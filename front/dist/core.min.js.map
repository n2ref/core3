{"version":3,"file":"core.min.js","sources":["core.min.js"],"sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.Core = factory());\n})(this, (function () { 'use strict';\n\n  function _regeneratorRuntime() {\n    _regeneratorRuntime = function () {\n      return e;\n    };\n    var t,\n      e = {},\n      r = Object.prototype,\n      n = r.hasOwnProperty,\n      o = Object.defineProperty || function (t, e, r) {\n        t[e] = r.value;\n      },\n      i = \"function\" == typeof Symbol ? Symbol : {},\n      a = i.iterator || \"@@iterator\",\n      c = i.asyncIterator || \"@@asyncIterator\",\n      u = i.toStringTag || \"@@toStringTag\";\n    function define(t, e, r) {\n      return Object.defineProperty(t, e, {\n        value: r,\n        enumerable: !0,\n        configurable: !0,\n        writable: !0\n      }), t[e];\n    }\n    try {\n      define({}, \"\");\n    } catch (t) {\n      define = function (t, e, r) {\n        return t[e] = r;\n      };\n    }\n    function wrap(t, e, r, n) {\n      var i = e && e.prototype instanceof Generator ? e : Generator,\n        a = Object.create(i.prototype),\n        c = new Context(n || []);\n      return o(a, \"_invoke\", {\n        value: makeInvokeMethod(t, r, c)\n      }), a;\n    }\n    function tryCatch(t, e, r) {\n      try {\n        return {\n          type: \"normal\",\n          arg: t.call(e, r)\n        };\n      } catch (t) {\n        return {\n          type: \"throw\",\n          arg: t\n        };\n      }\n    }\n    e.wrap = wrap;\n    var h = \"suspendedStart\",\n      l = \"suspendedYield\",\n      f = \"executing\",\n      s = \"completed\",\n      y = {};\n    function Generator() {}\n    function GeneratorFunction() {}\n    function GeneratorFunctionPrototype() {}\n    var p = {};\n    define(p, a, function () {\n      return this;\n    });\n    var d = Object.getPrototypeOf,\n      v = d && d(d(values([])));\n    v && v !== r && n.call(v, a) && (p = v);\n    var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);\n    function defineIteratorMethods(t) {\n      [\"next\", \"throw\", \"return\"].forEach(function (e) {\n        define(t, e, function (t) {\n          return this._invoke(e, t);\n        });\n      });\n    }\n    function AsyncIterator(t, e) {\n      function invoke(r, o, i, a) {\n        var c = tryCatch(t[r], t, o);\n        if (\"throw\" !== c.type) {\n          var u = c.arg,\n            h = u.value;\n          return h && \"object\" == typeof h && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) {\n            invoke(\"next\", t, i, a);\n          }, function (t) {\n            invoke(\"throw\", t, i, a);\n          }) : e.resolve(h).then(function (t) {\n            u.value = t, i(u);\n          }, function (t) {\n            return invoke(\"throw\", t, i, a);\n          });\n        }\n        a(c.arg);\n      }\n      var r;\n      o(this, \"_invoke\", {\n        value: function (t, n) {\n          function callInvokeWithMethodAndArg() {\n            return new e(function (e, r) {\n              invoke(t, n, e, r);\n            });\n          }\n          return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n        }\n      });\n    }\n    function makeInvokeMethod(e, r, n) {\n      var o = h;\n      return function (i, a) {\n        if (o === f) throw new Error(\"Generator is already running\");\n        if (o === s) {\n          if (\"throw\" === i) throw a;\n          return {\n            value: t,\n            done: !0\n          };\n        }\n        for (n.method = i, n.arg = a;;) {\n          var c = n.delegate;\n          if (c) {\n            var u = maybeInvokeDelegate(c, n);\n            if (u) {\n              if (u === y) continue;\n              return u;\n            }\n          }\n          if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) {\n            if (o === h) throw o = s, n.arg;\n            n.dispatchException(n.arg);\n          } else \"return\" === n.method && n.abrupt(\"return\", n.arg);\n          o = f;\n          var p = tryCatch(e, r, n);\n          if (\"normal\" === p.type) {\n            if (o = n.done ? s : l, p.arg === y) continue;\n            return {\n              value: p.arg,\n              done: n.done\n            };\n          }\n          \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg);\n        }\n      };\n    }\n    function maybeInvokeDelegate(e, r) {\n      var n = r.method,\n        o = e.iterator[n];\n      if (o === t) return r.delegate = null, \"throw\" === n && e.iterator.return && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y;\n      var i = tryCatch(o, e.iterator, r.arg);\n      if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y;\n      var a = i.arg;\n      return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y);\n    }\n    function pushTryEntry(t) {\n      var e = {\n        tryLoc: t[0]\n      };\n      1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);\n    }\n    function resetTryEntry(t) {\n      var e = t.completion || {};\n      e.type = \"normal\", delete e.arg, t.completion = e;\n    }\n    function Context(t) {\n      this.tryEntries = [{\n        tryLoc: \"root\"\n      }], t.forEach(pushTryEntry, this), this.reset(!0);\n    }\n    function values(e) {\n      if (e || \"\" === e) {\n        var r = e[a];\n        if (r) return r.call(e);\n        if (\"function\" == typeof e.next) return e;\n        if (!isNaN(e.length)) {\n          var o = -1,\n            i = function next() {\n              for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next;\n              return next.value = t, next.done = !0, next;\n            };\n          return i.next = i;\n        }\n      }\n      throw new TypeError(typeof e + \" is not iterable\");\n    }\n    return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", {\n      value: GeneratorFunctionPrototype,\n      configurable: !0\n    }), o(GeneratorFunctionPrototype, \"constructor\", {\n      value: GeneratorFunction,\n      configurable: !0\n    }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) {\n      var e = \"function\" == typeof t && t.constructor;\n      return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name));\n    }, e.mark = function (t) {\n      return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t;\n    }, e.awrap = function (t) {\n      return {\n        __await: t\n      };\n    }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () {\n      return this;\n    }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) {\n      void 0 === i && (i = Promise);\n      var a = new AsyncIterator(wrap(t, r, n, o), i);\n      return e.isGeneratorFunction(r) ? a : a.next().then(function (t) {\n        return t.done ? t.value : a.next();\n      });\n    }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () {\n      return this;\n    }), define(g, \"toString\", function () {\n      return \"[object Generator]\";\n    }), e.keys = function (t) {\n      var e = Object(t),\n        r = [];\n      for (var n in e) r.push(n);\n      return r.reverse(), function next() {\n        for (; r.length;) {\n          var t = r.pop();\n          if (t in e) return next.value = t, next.done = !1, next;\n        }\n        return next.done = !0, next;\n      };\n    }, e.values = values, Context.prototype = {\n      constructor: Context,\n      reset: function (e) {\n        if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);\n      },\n      stop: function () {\n        this.done = !0;\n        var t = this.tryEntries[0].completion;\n        if (\"throw\" === t.type) throw t.arg;\n        return this.rval;\n      },\n      dispatchException: function (e) {\n        if (this.done) throw e;\n        var r = this;\n        function handle(n, o) {\n          return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o;\n        }\n        for (var o = this.tryEntries.length - 1; o >= 0; --o) {\n          var i = this.tryEntries[o],\n            a = i.completion;\n          if (\"root\" === i.tryLoc) return handle(\"end\");\n          if (i.tryLoc <= this.prev) {\n            var c = n.call(i, \"catchLoc\"),\n              u = n.call(i, \"finallyLoc\");\n            if (c && u) {\n              if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);\n              if (this.prev < i.finallyLoc) return handle(i.finallyLoc);\n            } else if (c) {\n              if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);\n            } else {\n              if (!u) throw new Error(\"try statement without catch or finally\");\n              if (this.prev < i.finallyLoc) return handle(i.finallyLoc);\n            }\n          }\n        }\n      },\n      abrupt: function (t, e) {\n        for (var r = this.tryEntries.length - 1; r >= 0; --r) {\n          var o = this.tryEntries[r];\n          if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) {\n            var i = o;\n            break;\n          }\n        }\n        i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);\n        var a = i ? i.completion : {};\n        return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a);\n      },\n      complete: function (t, e) {\n        if (\"throw\" === t.type) throw t.arg;\n        return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y;\n      },\n      finish: function (t) {\n        for (var e = this.tryEntries.length - 1; e >= 0; --e) {\n          var r = this.tryEntries[e];\n          if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;\n        }\n      },\n      catch: function (t) {\n        for (var e = this.tryEntries.length - 1; e >= 0; --e) {\n          var r = this.tryEntries[e];\n          if (r.tryLoc === t) {\n            var n = r.completion;\n            if (\"throw\" === n.type) {\n              var o = n.arg;\n              resetTryEntry(r);\n            }\n            return o;\n          }\n        }\n        throw new Error(\"illegal catch attempt\");\n      },\n      delegateYield: function (e, r, n) {\n        return this.delegate = {\n          iterator: values(e),\n          resultName: r,\n          nextLoc: n\n        }, \"next\" === this.method && (this.arg = t), y;\n      }\n    }, e;\n  }\n  function _typeof(o) {\n    \"@babel/helpers - typeof\";\n\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n      return typeof o;\n    } : function (o) {\n      return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n  }\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n    try {\n      var info = gen[key](arg);\n      var value = info.value;\n    } catch (error) {\n      reject(error);\n      return;\n    }\n    if (info.done) {\n      resolve(value);\n    } else {\n      Promise.resolve(value).then(_next, _throw);\n    }\n  }\n  function _asyncToGenerator(fn) {\n    return function () {\n      var self = this,\n        args = arguments;\n      return new Promise(function (resolve, reject) {\n        var gen = fn.apply(self, args);\n        function _next(value) {\n          asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n        }\n        function _throw(err) {\n          asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n        }\n        _next(undefined);\n      });\n    };\n  }\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n  function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n    }\n  }\n  function _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    Object.defineProperty(Constructor, \"prototype\", {\n      writable: false\n    });\n    return Constructor;\n  }\n  function _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n  }\n  function _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n    return arr2;\n  }\n  function _createForOfIteratorHelper(o, allowArrayLike) {\n    var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n    if (!it) {\n      if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n        if (it) o = it;\n        var i = 0;\n        var F = function () {};\n        return {\n          s: F,\n          n: function () {\n            if (i >= o.length) return {\n              done: true\n            };\n            return {\n              done: false,\n              value: o[i++]\n            };\n          },\n          e: function (e) {\n            throw e;\n          },\n          f: F\n        };\n      }\n      throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n    }\n    var normalCompletion = true,\n      didErr = false,\n      err;\n    return {\n      s: function () {\n        it = it.call(o);\n      },\n      n: function () {\n        var step = it.next();\n        normalCompletion = step.done;\n        return step;\n      },\n      e: function (e) {\n        didErr = true;\n        err = e;\n      },\n      f: function () {\n        try {\n          if (!normalCompletion && it.return != null) it.return();\n        } finally {\n          if (didErr) throw err;\n        }\n      }\n    };\n  }\n  function _toPrimitive(input, hint) {\n    if (typeof input !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n      var res = prim.call(input, hint || \"default\");\n      if (typeof res !== \"object\") return res;\n      throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n  }\n  function _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return typeof key === \"symbol\" ? key : String(key);\n  }\n\n  function e(e) {\n    this.message = e;\n  }\n  e.prototype = new Error(), e.prototype.name = \"InvalidCharacterError\";\n  var r = \"undefined\" != typeof window && window.atob && window.atob.bind(window) || function (r) {\n    var t = String(r).replace(/=+$/, \"\");\n    if (t.length % 4 == 1) throw new e(\"'atob' failed: The string to be decoded is not correctly encoded.\");\n    for (var n, o, a = 0, i = 0, c = \"\"; o = t.charAt(i++); ~o && (n = a % 4 ? 64 * n + o : o, a++ % 4) ? c += String.fromCharCode(255 & n >> (-2 * a & 6)) : 0) o = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\".indexOf(o);\n    return c;\n  };\n  function t(e) {\n    var t = e.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    switch (t.length % 4) {\n      case 0:\n        break;\n      case 2:\n        t += \"==\";\n        break;\n      case 3:\n        t += \"=\";\n        break;\n      default:\n        throw \"Illegal base64url string!\";\n    }\n    try {\n      return function (e) {\n        return decodeURIComponent(r(e).replace(/(.)/g, function (e, r) {\n          var t = r.charCodeAt(0).toString(16).toUpperCase();\n          return t.length < 2 && (t = \"0\" + t), \"%\" + t;\n        }));\n      }(t);\n    } catch (e) {\n      return r(t);\n    }\n  }\n  function n(e) {\n    this.message = e;\n  }\n  function o(e, r) {\n    if (\"string\" != typeof e) throw new n(\"Invalid token specified\");\n    var o = !0 === (r = r || {}).header ? 0 : 1;\n    try {\n      return JSON.parse(t(e.split(\".\")[o]));\n    } catch (e) {\n      throw new n(\"Invalid token specified: \" + e.message);\n    }\n  }\n  n.prototype = new Error(), n.prototype.name = \"InvalidTokenError\";\n\n  /******************************************************************************\n  Copyright (c) Microsoft Corporation.\n\n  Permission to use, copy, modify, and/or distribute this software for any\n  purpose with or without fee is hereby granted.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\n  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n  PERFORMANCE OF THIS SOFTWARE.\n  ***************************************************************************** */\n  /* global Reflect, Promise, SuppressedError, Symbol */\n\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  function __extends(d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  }\n  var __assign = function () {\n    __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n    };\n    return __assign.apply(this, arguments);\n  };\n  function __awaiter(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n      return value instanceof P ? value : new P(function (resolve) {\n        resolve(value);\n      });\n    }\n    return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) {\n        try {\n          step(generator.next(value));\n        } catch (e) {\n          reject(e);\n        }\n      }\n      function rejected(value) {\n        try {\n          step(generator[\"throw\"](value));\n        } catch (e) {\n          reject(e);\n        }\n      }\n      function step(result) {\n        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n      }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n  }\n  function __generator(thisArg, body) {\n    var _ = {\n        label: 0,\n        sent: function () {\n          if (t[0] & 1) throw t[1];\n          return t[1];\n        },\n        trys: [],\n        ops: []\n      },\n      f,\n      y,\n      t,\n      g;\n    return g = {\n      next: verb(0),\n      \"throw\": verb(1),\n      \"return\": verb(2)\n    }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n      return this;\n    }), g;\n    function verb(n) {\n      return function (v) {\n        return step([n, v]);\n      };\n    }\n    function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n          case 7:\n            op = _.ops.pop();\n            _.trys.pop();\n            continue;\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n              _.ops.push(op);\n              break;\n            }\n            if (t[2]) _.ops.pop();\n            _.trys.pop();\n            continue;\n        }\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n      if (op[0] & 5) throw op[1];\n      return {\n        value: op[0] ? op[1] : void 0,\n        done: true\n      };\n    }\n  }\n  function __values(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n      next: function () {\n        if (o && i >= o.length) o = void 0;\n        return {\n          value: o && o[i++],\n          done: !o\n        };\n      }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n  }\n  function __read(o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o),\n      r,\n      ar = [],\n      e;\n    try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    } catch (error) {\n      e = {\n        error: error\n      };\n    } finally {\n      try {\n        if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      } finally {\n        if (e) throw e.error;\n      }\n    }\n    return ar;\n  }\n\n  /** @deprecated */\n  function __spreadArrays() {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n    return r;\n  }\n  function __spreadArray(to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n        if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n        ar[i] = from[i];\n      }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n  }\n  typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n    var e = new Error(message);\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n  };\n\n  /**\n   * FingerprintJS v3.3.3 - Copyright (c) FingerprintJS, Inc, 2022 (https://fingerprintjs.com)\n   * Licensed under the MIT (http://www.opensource.org/licenses/mit-license.php) license.\n   *\n   * This software contains code from open-source projects:\n   * MurmurHash3 by Karan Lyons (https://github.com/karanlyons/murmurHash3.js)\n   */\n  var version = \"3.3.3\";\n  function wait(durationMs, resolveWith) {\n    return new Promise(function (resolve) {\n      return setTimeout(resolve, durationMs, resolveWith);\n    });\n  }\n  function requestIdleCallbackIfAvailable(fallbackTimeout, deadlineTimeout) {\n    if (deadlineTimeout === void 0) {\n      deadlineTimeout = Infinity;\n    }\n    var requestIdleCallback = window.requestIdleCallback;\n    if (requestIdleCallback) {\n      // The function `requestIdleCallback` loses the binding to `window` here.\n      // `globalThis` isn't always equal `window` (see https://github.com/fingerprintjs/fingerprintjs/issues/683).\n      // Therefore, an error can occur. `call(window,` prevents the error.\n      return new Promise(function (resolve) {\n        return requestIdleCallback.call(window, function () {\n          return resolve();\n        }, {\n          timeout: deadlineTimeout\n        });\n      });\n    } else {\n      return wait(Math.min(fallbackTimeout, deadlineTimeout));\n    }\n  }\n  function isPromise(value) {\n    return value && typeof value.then === 'function';\n  }\n  /**\n   * Calls a maybe asynchronous function without creating microtasks when the function is synchronous.\n   * Catches errors in both cases.\n   *\n   * If just you run a code like this:\n   * ```\n   * console.time('Action duration')\n   * await action()\n   * console.timeEnd('Action duration')\n   * ```\n   * The synchronous function time can be measured incorrectly because another microtask may run before the `await`\n   * returns the control back to the code.\n   */\n  function awaitIfAsync(action, callback) {\n    try {\n      var returnedValue = action();\n      if (isPromise(returnedValue)) {\n        returnedValue.then(function (result) {\n          return callback(true, result);\n        }, function (error) {\n          return callback(false, error);\n        });\n      } else {\n        callback(true, returnedValue);\n      }\n    } catch (error) {\n      callback(false, error);\n    }\n  }\n  /**\n   * If you run many synchronous tasks without using this function, the JS main loop will be busy and asynchronous tasks\n   * (e.g. completing a network request, rendering the page) won't be able to happen.\n   * This function allows running many synchronous tasks such way that asynchronous tasks can run too in background.\n   */\n  function forEachWithBreaks(items, callback, loopReleaseInterval) {\n    if (loopReleaseInterval === void 0) {\n      loopReleaseInterval = 16;\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var lastLoopReleaseTime, i, now;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            lastLoopReleaseTime = Date.now();\n            i = 0;\n            _a.label = 1;\n          case 1:\n            if (!(i < items.length)) return [3 /*break*/, 4];\n            callback(items[i], i);\n            now = Date.now();\n            if (!(now >= lastLoopReleaseTime + loopReleaseInterval)) return [3 /*break*/, 3];\n            lastLoopReleaseTime = now;\n            // Allows asynchronous actions and microtasks to happen\n            return [4 /*yield*/, wait(0)];\n          case 2:\n            // Allows asynchronous actions and microtasks to happen\n            _a.sent();\n            _a.label = 3;\n          case 3:\n            ++i;\n            return [3 /*break*/, 1];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  }\n\n  /*\n   * Taken from https://github.com/karanlyons/murmurHash3.js/blob/a33d0723127e2e5415056c455f8aed2451ace208/murmurHash3.js\n   */\n  //\n  // Given two 64bit ints (as an array of two 32bit ints) returns the two\n  // added together as a 64bit int (as an array of two 32bit ints).\n  //\n  function x64Add(m, n) {\n    m = [m[0] >>> 16, m[0] & 0xffff, m[1] >>> 16, m[1] & 0xffff];\n    n = [n[0] >>> 16, n[0] & 0xffff, n[1] >>> 16, n[1] & 0xffff];\n    var o = [0, 0, 0, 0];\n    o[3] += m[3] + n[3];\n    o[2] += o[3] >>> 16;\n    o[3] &= 0xffff;\n    o[2] += m[2] + n[2];\n    o[1] += o[2] >>> 16;\n    o[2] &= 0xffff;\n    o[1] += m[1] + n[1];\n    o[0] += o[1] >>> 16;\n    o[1] &= 0xffff;\n    o[0] += m[0] + n[0];\n    o[0] &= 0xffff;\n    return [o[0] << 16 | o[1], o[2] << 16 | o[3]];\n  }\n  //\n  // Given two 64bit ints (as an array of two 32bit ints) returns the two\n  // multiplied together as a 64bit int (as an array of two 32bit ints).\n  //\n  function x64Multiply(m, n) {\n    m = [m[0] >>> 16, m[0] & 0xffff, m[1] >>> 16, m[1] & 0xffff];\n    n = [n[0] >>> 16, n[0] & 0xffff, n[1] >>> 16, n[1] & 0xffff];\n    var o = [0, 0, 0, 0];\n    o[3] += m[3] * n[3];\n    o[2] += o[3] >>> 16;\n    o[3] &= 0xffff;\n    o[2] += m[2] * n[3];\n    o[1] += o[2] >>> 16;\n    o[2] &= 0xffff;\n    o[2] += m[3] * n[2];\n    o[1] += o[2] >>> 16;\n    o[2] &= 0xffff;\n    o[1] += m[1] * n[3];\n    o[0] += o[1] >>> 16;\n    o[1] &= 0xffff;\n    o[1] += m[2] * n[2];\n    o[0] += o[1] >>> 16;\n    o[1] &= 0xffff;\n    o[1] += m[3] * n[1];\n    o[0] += o[1] >>> 16;\n    o[1] &= 0xffff;\n    o[0] += m[0] * n[3] + m[1] * n[2] + m[2] * n[1] + m[3] * n[0];\n    o[0] &= 0xffff;\n    return [o[0] << 16 | o[1], o[2] << 16 | o[3]];\n  }\n  //\n  // Given a 64bit int (as an array of two 32bit ints) and an int\n  // representing a number of bit positions, returns the 64bit int (as an\n  // array of two 32bit ints) rotated left by that number of positions.\n  //\n  function x64Rotl(m, n) {\n    n %= 64;\n    if (n === 32) {\n      return [m[1], m[0]];\n    } else if (n < 32) {\n      return [m[0] << n | m[1] >>> 32 - n, m[1] << n | m[0] >>> 32 - n];\n    } else {\n      n -= 32;\n      return [m[1] << n | m[0] >>> 32 - n, m[0] << n | m[1] >>> 32 - n];\n    }\n  }\n  //\n  // Given a 64bit int (as an array of two 32bit ints) and an int\n  // representing a number of bit positions, returns the 64bit int (as an\n  // array of two 32bit ints) shifted left by that number of positions.\n  //\n  function x64LeftShift(m, n) {\n    n %= 64;\n    if (n === 0) {\n      return m;\n    } else if (n < 32) {\n      return [m[0] << n | m[1] >>> 32 - n, m[1] << n];\n    } else {\n      return [m[1] << n - 32, 0];\n    }\n  }\n  //\n  // Given two 64bit ints (as an array of two 32bit ints) returns the two\n  // xored together as a 64bit int (as an array of two 32bit ints).\n  //\n  function x64Xor(m, n) {\n    return [m[0] ^ n[0], m[1] ^ n[1]];\n  }\n  //\n  // Given a block, returns murmurHash3's final x64 mix of that block.\n  // (`[0, h[0] >>> 1]` is a 33 bit unsigned right shift. This is the\n  // only place where we need to right shift 64bit ints.)\n  //\n  function x64Fmix(h) {\n    h = x64Xor(h, [0, h[0] >>> 1]);\n    h = x64Multiply(h, [0xff51afd7, 0xed558ccd]);\n    h = x64Xor(h, [0, h[0] >>> 1]);\n    h = x64Multiply(h, [0xc4ceb9fe, 0x1a85ec53]);\n    h = x64Xor(h, [0, h[0] >>> 1]);\n    return h;\n  }\n  //\n  // Given a string and an optional seed as an int, returns a 128 bit\n  // hash using the x64 flavor of MurmurHash3, as an unsigned hex.\n  //\n  function x64hash128(key, seed) {\n    key = key || '';\n    seed = seed || 0;\n    var remainder = key.length % 16;\n    var bytes = key.length - remainder;\n    var h1 = [0, seed];\n    var h2 = [0, seed];\n    var k1 = [0, 0];\n    var k2 = [0, 0];\n    var c1 = [0x87c37b91, 0x114253d5];\n    var c2 = [0x4cf5ad43, 0x2745937f];\n    var i;\n    for (i = 0; i < bytes; i = i + 16) {\n      k1 = [key.charCodeAt(i + 4) & 0xff | (key.charCodeAt(i + 5) & 0xff) << 8 | (key.charCodeAt(i + 6) & 0xff) << 16 | (key.charCodeAt(i + 7) & 0xff) << 24, key.charCodeAt(i) & 0xff | (key.charCodeAt(i + 1) & 0xff) << 8 | (key.charCodeAt(i + 2) & 0xff) << 16 | (key.charCodeAt(i + 3) & 0xff) << 24];\n      k2 = [key.charCodeAt(i + 12) & 0xff | (key.charCodeAt(i + 13) & 0xff) << 8 | (key.charCodeAt(i + 14) & 0xff) << 16 | (key.charCodeAt(i + 15) & 0xff) << 24, key.charCodeAt(i + 8) & 0xff | (key.charCodeAt(i + 9) & 0xff) << 8 | (key.charCodeAt(i + 10) & 0xff) << 16 | (key.charCodeAt(i + 11) & 0xff) << 24];\n      k1 = x64Multiply(k1, c1);\n      k1 = x64Rotl(k1, 31);\n      k1 = x64Multiply(k1, c2);\n      h1 = x64Xor(h1, k1);\n      h1 = x64Rotl(h1, 27);\n      h1 = x64Add(h1, h2);\n      h1 = x64Add(x64Multiply(h1, [0, 5]), [0, 0x52dce729]);\n      k2 = x64Multiply(k2, c2);\n      k2 = x64Rotl(k2, 33);\n      k2 = x64Multiply(k2, c1);\n      h2 = x64Xor(h2, k2);\n      h2 = x64Rotl(h2, 31);\n      h2 = x64Add(h2, h1);\n      h2 = x64Add(x64Multiply(h2, [0, 5]), [0, 0x38495ab5]);\n    }\n    k1 = [0, 0];\n    k2 = [0, 0];\n    switch (remainder) {\n      case 15:\n        k2 = x64Xor(k2, x64LeftShift([0, key.charCodeAt(i + 14)], 48));\n      // fallthrough\n      case 14:\n        k2 = x64Xor(k2, x64LeftShift([0, key.charCodeAt(i + 13)], 40));\n      // fallthrough\n      case 13:\n        k2 = x64Xor(k2, x64LeftShift([0, key.charCodeAt(i + 12)], 32));\n      // fallthrough\n      case 12:\n        k2 = x64Xor(k2, x64LeftShift([0, key.charCodeAt(i + 11)], 24));\n      // fallthrough\n      case 11:\n        k2 = x64Xor(k2, x64LeftShift([0, key.charCodeAt(i + 10)], 16));\n      // fallthrough\n      case 10:\n        k2 = x64Xor(k2, x64LeftShift([0, key.charCodeAt(i + 9)], 8));\n      // fallthrough\n      case 9:\n        k2 = x64Xor(k2, [0, key.charCodeAt(i + 8)]);\n        k2 = x64Multiply(k2, c2);\n        k2 = x64Rotl(k2, 33);\n        k2 = x64Multiply(k2, c1);\n        h2 = x64Xor(h2, k2);\n      // fallthrough\n      case 8:\n        k1 = x64Xor(k1, x64LeftShift([0, key.charCodeAt(i + 7)], 56));\n      // fallthrough\n      case 7:\n        k1 = x64Xor(k1, x64LeftShift([0, key.charCodeAt(i + 6)], 48));\n      // fallthrough\n      case 6:\n        k1 = x64Xor(k1, x64LeftShift([0, key.charCodeAt(i + 5)], 40));\n      // fallthrough\n      case 5:\n        k1 = x64Xor(k1, x64LeftShift([0, key.charCodeAt(i + 4)], 32));\n      // fallthrough\n      case 4:\n        k1 = x64Xor(k1, x64LeftShift([0, key.charCodeAt(i + 3)], 24));\n      // fallthrough\n      case 3:\n        k1 = x64Xor(k1, x64LeftShift([0, key.charCodeAt(i + 2)], 16));\n      // fallthrough\n      case 2:\n        k1 = x64Xor(k1, x64LeftShift([0, key.charCodeAt(i + 1)], 8));\n      // fallthrough\n      case 1:\n        k1 = x64Xor(k1, [0, key.charCodeAt(i)]);\n        k1 = x64Multiply(k1, c1);\n        k1 = x64Rotl(k1, 31);\n        k1 = x64Multiply(k1, c2);\n        h1 = x64Xor(h1, k1);\n      // fallthrough\n    }\n\n    h1 = x64Xor(h1, [0, key.length]);\n    h2 = x64Xor(h2, [0, key.length]);\n    h1 = x64Add(h1, h2);\n    h2 = x64Add(h2, h1);\n    h1 = x64Fmix(h1);\n    h2 = x64Fmix(h2);\n    h1 = x64Add(h1, h2);\n    h2 = x64Add(h2, h1);\n    return ('00000000' + (h1[0] >>> 0).toString(16)).slice(-8) + ('00000000' + (h1[1] >>> 0).toString(16)).slice(-8) + ('00000000' + (h2[0] >>> 0).toString(16)).slice(-8) + ('00000000' + (h2[1] >>> 0).toString(16)).slice(-8);\n  }\n\n  /**\n   * Converts an error object to a plain object that can be used with `JSON.stringify`.\n   * If you just run `JSON.stringify(error)`, you'll get `'{}'`.\n   */\n  function errorToObject(error) {\n    var _a;\n    return __assign({\n      name: error.name,\n      message: error.message,\n      stack: (_a = error.stack) === null || _a === void 0 ? void 0 : _a.split('\\n')\n    }, error);\n  }\n\n  /*\n   * This file contains functions to work with pure data only (no browser features, DOM, side effects, etc).\n   */\n  /**\n   * Does the same as Array.prototype.includes but has better typing\n   */\n  function includes(haystack, needle) {\n    for (var i = 0, l = haystack.length; i < l; ++i) {\n      if (haystack[i] === needle) {\n        return true;\n      }\n    }\n    return false;\n  }\n  /**\n   * Like `!includes()` but with proper typing\n   */\n  function excludes(haystack, needle) {\n    return !includes(haystack, needle);\n  }\n  /**\n   * Be careful, NaN can return\n   */\n  function toInt(value) {\n    return parseInt(value);\n  }\n  /**\n   * Be careful, NaN can return\n   */\n  function toFloat(value) {\n    return parseFloat(value);\n  }\n  function replaceNaN(value, replacement) {\n    return typeof value === 'number' && isNaN(value) ? replacement : value;\n  }\n  function countTruthy(values) {\n    return values.reduce(function (sum, value) {\n      return sum + (value ? 1 : 0);\n    }, 0);\n  }\n  function round(value, base) {\n    if (base === void 0) {\n      base = 1;\n    }\n    if (Math.abs(base) >= 1) {\n      return Math.round(value / base) * base;\n    } else {\n      // Sometimes when a number is multiplied by a small number, precision is lost,\n      // for example 1234 * 0.0001 === 0.12340000000000001, and it's more precise divide: 1234 / (1 / 0.0001) === 0.1234.\n      var counterBase = 1 / base;\n      return Math.round(value * counterBase) / counterBase;\n    }\n  }\n  /**\n   * Parses a CSS selector into tag name with HTML attributes.\n   * Only single element selector are supported (without operators like space, +, >, etc).\n   *\n   * Multiple values can be returned for each attribute. You decide how to handle them.\n   */\n  function parseSimpleCssSelector(selector) {\n    var _a, _b;\n    var errorMessage = \"Unexpected syntax '\" + selector + \"'\";\n    var tagMatch = /^\\s*([a-z-]*)(.*)$/i.exec(selector);\n    var tag = tagMatch[1] || undefined;\n    var attributes = {};\n    var partsRegex = /([.:#][\\w-]+|\\[.+?\\])/gi;\n    var addAttribute = function (name, value) {\n      attributes[name] = attributes[name] || [];\n      attributes[name].push(value);\n    };\n    for (;;) {\n      var match = partsRegex.exec(tagMatch[2]);\n      if (!match) {\n        break;\n      }\n      var part = match[0];\n      switch (part[0]) {\n        case '.':\n          addAttribute('class', part.slice(1));\n          break;\n        case '#':\n          addAttribute('id', part.slice(1));\n          break;\n        case '[':\n          {\n            var attributeMatch = /^\\[([\\w-]+)([~|^$*]?=(\"(.*?)\"|([\\w-]+)))?(\\s+[is])?\\]$/.exec(part);\n            if (attributeMatch) {\n              addAttribute(attributeMatch[1], (_b = (_a = attributeMatch[4]) !== null && _a !== void 0 ? _a : attributeMatch[5]) !== null && _b !== void 0 ? _b : '');\n            } else {\n              throw new Error(errorMessage);\n            }\n            break;\n          }\n        default:\n          throw new Error(errorMessage);\n      }\n    }\n    return [tag, attributes];\n  }\n  function ensureErrorWithMessage(error) {\n    return error && typeof error === 'object' && 'message' in error ? error : {\n      message: error\n    };\n  }\n  /**\n   * Loads the given entropy source. Returns a function that gets an entropy component from the source.\n   *\n   * The result is returned synchronously to prevent `loadSources` from\n   * waiting for one source to load before getting the components from the other sources.\n   */\n  function loadSource(source, sourceOptions) {\n    var isFinalResultLoaded = function (loadResult) {\n      return typeof loadResult !== 'function';\n    };\n    var sourceLoadPromise = new Promise(function (resolveLoad) {\n      var loadStartTime = Date.now();\n      // `awaitIfAsync` is used instead of just `await` in order to measure the duration of synchronous sources\n      // correctly (other microtasks won't affect the duration).\n      awaitIfAsync(source.bind(null, sourceOptions), function () {\n        var loadArgs = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n          loadArgs[_i] = arguments[_i];\n        }\n        var loadDuration = Date.now() - loadStartTime;\n        // Source loading failed\n        if (!loadArgs[0]) {\n          return resolveLoad(function () {\n            return {\n              error: ensureErrorWithMessage(loadArgs[1]),\n              duration: loadDuration\n            };\n          });\n        }\n        var loadResult = loadArgs[1];\n        // Source loaded with the final result\n        if (isFinalResultLoaded(loadResult)) {\n          return resolveLoad(function () {\n            return {\n              value: loadResult,\n              duration: loadDuration\n            };\n          });\n        }\n        // Source loaded with \"get\" stage\n        resolveLoad(function () {\n          return new Promise(function (resolveGet) {\n            var getStartTime = Date.now();\n            awaitIfAsync(loadResult, function () {\n              var getArgs = [];\n              for (var _i = 0; _i < arguments.length; _i++) {\n                getArgs[_i] = arguments[_i];\n              }\n              var duration = loadDuration + Date.now() - getStartTime;\n              // Source getting failed\n              if (!getArgs[0]) {\n                return resolveGet({\n                  error: ensureErrorWithMessage(getArgs[1]),\n                  duration: duration\n                });\n              }\n              // Source getting succeeded\n              resolveGet({\n                value: getArgs[1],\n                duration: duration\n              });\n            });\n          });\n        });\n      });\n    });\n    return function getComponent() {\n      return sourceLoadPromise.then(function (finalizeSource) {\n        return finalizeSource();\n      });\n    };\n  }\n  /**\n   * Loads the given entropy sources. Returns a function that collects the entropy components.\n   *\n   * The result is returned synchronously in order to allow start getting the components\n   * before the sources are loaded completely.\n   *\n   * Warning for package users:\n   * This function is out of Semantic Versioning, i.e. can change unexpectedly. Usage is at your own risk.\n   */\n  function loadSources(sources, sourceOptions, excludeSources) {\n    var includedSources = Object.keys(sources).filter(function (sourceKey) {\n      return excludes(excludeSources, sourceKey);\n    });\n    var sourceGetters = Array(includedSources.length);\n    // Using `forEachWithBreaks` allows asynchronous sources to complete between synchronous sources\n    // and measure the duration correctly\n    forEachWithBreaks(includedSources, function (sourceKey, index) {\n      sourceGetters[index] = loadSource(sources[sourceKey], sourceOptions);\n    });\n    return function getComponents() {\n      return __awaiter(this, void 0, void 0, function () {\n        var components, _i, includedSources_1, sourceKey, componentPromises, _loop_1, state_1;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              components = {};\n              for (_i = 0, includedSources_1 = includedSources; _i < includedSources_1.length; _i++) {\n                sourceKey = includedSources_1[_i];\n                components[sourceKey] = undefined;\n              }\n              componentPromises = Array(includedSources.length);\n              _loop_1 = function () {\n                var hasAllComponentPromises;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      hasAllComponentPromises = true;\n                      return [4 /*yield*/, forEachWithBreaks(includedSources, function (sourceKey, index) {\n                        if (!componentPromises[index]) {\n                          // `sourceGetters` may be incomplete at this point of execution because `forEachWithBreaks` is asynchronous\n                          if (sourceGetters[index]) {\n                            componentPromises[index] = sourceGetters[index]().then(function (component) {\n                              return components[sourceKey] = component;\n                            });\n                          } else {\n                            hasAllComponentPromises = false;\n                          }\n                        }\n                      })];\n                    case 1:\n                      _a.sent();\n                      if (hasAllComponentPromises) {\n                        return [2 /*return*/, \"break\"];\n                      }\n                      return [4 /*yield*/, wait(1)];\n                    // Lets the source load loop continue\n                    case 2:\n                      _a.sent(); // Lets the source load loop continue\n                      return [2 /*return*/];\n                  }\n                });\n              };\n\n              _a.label = 1;\n            case 1:\n              return [5 /*yield**/, _loop_1()];\n            case 2:\n              state_1 = _a.sent();\n              if (state_1 === \"break\") return [3 /*break*/, 4];\n              _a.label = 3;\n            case 3:\n              return [3 /*break*/, 1];\n            case 4:\n              return [4 /*yield*/, Promise.all(componentPromises)];\n            case 5:\n              _a.sent();\n              return [2 /*return*/, components];\n          }\n        });\n      });\n    };\n  }\n\n  /*\n   * Functions to help with features that vary through browsers\n   */\n  /**\n   * Checks whether the browser is based on Trident (the Internet Explorer engine) without using user-agent.\n   *\n   * Warning for package users:\n   * This function is out of Semantic Versioning, i.e. can change unexpectedly. Usage is at your own risk.\n   */\n  function isTrident() {\n    var w = window;\n    var n = navigator;\n    // The properties are checked to be in IE 10, IE 11 and not to be in other browsers in October 2020\n    return countTruthy(['MSCSSMatrix' in w, 'msSetImmediate' in w, 'msIndexedDB' in w, 'msMaxTouchPoints' in n, 'msPointerEnabled' in n]) >= 4;\n  }\n  /**\n   * Checks whether the browser is based on EdgeHTML (the pre-Chromium Edge engine) without using user-agent.\n   *\n   * Warning for package users:\n   * This function is out of Semantic Versioning, i.e. can change unexpectedly. Usage is at your own risk.\n   */\n  function isEdgeHTML() {\n    // Based on research in October 2020\n    var w = window;\n    var n = navigator;\n    return countTruthy(['msWriteProfilerMark' in w, 'MSStream' in w, 'msLaunchUri' in n, 'msSaveBlob' in n]) >= 3 && !isTrident();\n  }\n  /**\n   * Checks whether the browser is based on Chromium without using user-agent.\n   *\n   * Warning for package users:\n   * This function is out of Semantic Versioning, i.e. can change unexpectedly. Usage is at your own risk.\n   */\n  function isChromium() {\n    // Based on research in October 2020. Tested to detect Chromium 42-86.\n    var w = window;\n    var n = navigator;\n    return countTruthy(['webkitPersistentStorage' in n, 'webkitTemporaryStorage' in n, n.vendor.indexOf('Google') === 0, 'webkitResolveLocalFileSystemURL' in w, 'BatteryManager' in w, 'webkitMediaStream' in w, 'webkitSpeechGrammar' in w]) >= 5;\n  }\n  /**\n   * Checks whether the browser is based on mobile or desktop Safari without using user-agent.\n   * All iOS browsers use WebKit (the Safari engine).\n   *\n   * Warning for package users:\n   * This function is out of Semantic Versioning, i.e. can change unexpectedly. Usage is at your own risk.\n   */\n  function isWebKit() {\n    // Based on research in September 2020\n    var w = window;\n    var n = navigator;\n    return countTruthy(['ApplePayError' in w, 'CSSPrimitiveValue' in w, 'Counter' in w, n.vendor.indexOf('Apple') === 0, 'getStorageUpdates' in n, 'WebKitMediaKeys' in w]) >= 4;\n  }\n  /**\n   * Checks whether the WebKit browser is a desktop Safari.\n   *\n   * Warning for package users:\n   * This function is out of Semantic Versioning, i.e. can change unexpectedly. Usage is at your own risk.\n   */\n  function isDesktopSafari() {\n    var w = window;\n    return countTruthy(['safari' in w, !('DeviceMotionEvent' in w), !('ongestureend' in w), !('standalone' in navigator)]) >= 3;\n  }\n  /**\n   * Checks whether the browser is based on Gecko (Firefox engine) without using user-agent.\n   *\n   * Warning for package users:\n   * This function is out of Semantic Versioning, i.e. can change unexpectedly. Usage is at your own risk.\n   */\n  function isGecko() {\n    var _a, _b;\n    var w = window;\n    // Based on research in September 2020\n    return countTruthy(['buildID' in navigator, 'MozAppearance' in ((_b = (_a = document.documentElement) === null || _a === void 0 ? void 0 : _a.style) !== null && _b !== void 0 ? _b : {}), 'onmozfullscreenchange' in w, 'mozInnerScreenX' in w, 'CSSMozDocumentRule' in w, 'CanvasCaptureMediaStream' in w]) >= 4;\n  }\n  /**\n   * Checks whether the browser is based on Chromium version ≥86 without using user-agent.\n   * It doesn't check that the browser is based on Chromium, there is a separate function for this.\n   */\n  function isChromium86OrNewer() {\n    // Checked in Chrome 85 vs Chrome 86 both on desktop and Android\n    var w = window;\n    return countTruthy([!('MediaSettingsRange' in w), 'RTCEncodedAudioFrame' in w, '' + w.Intl === '[object Intl]', '' + w.Reflect === '[object Reflect]']) >= 3;\n  }\n  /**\n   * Checks whether the browser is based on WebKit version ≥606 (Safari ≥12) without using user-agent.\n   * It doesn't check that the browser is based on WebKit, there is a separate function for this.\n   *\n   * @link https://en.wikipedia.org/wiki/Safari_version_history#Release_history Safari-WebKit versions map\n   */\n  function isWebKit606OrNewer() {\n    // Checked in Safari 9–14\n    var w = window;\n    return countTruthy(['DOMRectList' in w, 'RTCPeerConnectionIceEvent' in w, 'SVGGeometryElement' in w, 'ontransitioncancel' in w]) >= 3;\n  }\n  /**\n   * Checks whether the device is an iPad.\n   * It doesn't check that the engine is WebKit and that the WebKit isn't desktop.\n   */\n  function isIPad() {\n    // Checked on:\n    // Safari on iPadOS (both mobile and desktop modes): 8, 11, 12, 13, 14\n    // Chrome on iPadOS (both mobile and desktop modes): 11, 12, 13, 14\n    // Safari on iOS (both mobile and desktop modes): 9, 10, 11, 12, 13, 14\n    // Chrome on iOS (both mobile and desktop modes): 9, 10, 11, 12, 13, 14\n    // Before iOS 13. Safari tampers the value in \"request desktop site\" mode since iOS 13.\n    if (navigator.platform === 'iPad') {\n      return true;\n    }\n    var s = screen;\n    var screenRatio = s.width / s.height;\n    return countTruthy(['MediaSource' in window, !!Element.prototype.webkitRequestFullscreen,\n    // iPhone 4S that runs iOS 9 matches this. But it won't match the criteria above, so it won't be detected as iPad.\n    screenRatio > 0.65 && screenRatio < 1.53]) >= 2;\n  }\n  /**\n   * Warning for package users:\n   * This function is out of Semantic Versioning, i.e. can change unexpectedly. Usage is at your own risk.\n   */\n  function getFullscreenElement() {\n    var d = document;\n    return d.fullscreenElement || d.msFullscreenElement || d.mozFullScreenElement || d.webkitFullscreenElement || null;\n  }\n  function exitFullscreen() {\n    var d = document;\n    // `call` is required because the function throws an error without a proper \"this\" context\n    return (d.exitFullscreen || d.msExitFullscreen || d.mozCancelFullScreen || d.webkitExitFullscreen).call(d);\n  }\n  /**\n   * Checks whether the device runs on Android without using user-agent.\n   *\n   * Warning for package users:\n   * This function is out of Semantic Versioning, i.e. can change unexpectedly. Usage is at your own risk.\n   */\n  function isAndroid() {\n    var isItChromium = isChromium();\n    var isItGecko = isGecko();\n    // Only 2 browser engines are presented on Android.\n    // Actually, there is also Android 4.1 browser, but it's not worth detecting it at the moment.\n    if (!isItChromium && !isItGecko) {\n      return false;\n    }\n    var w = window;\n    // Chrome removes all words \"Android\" from `navigator` when desktop version is requested\n    // Firefox keeps \"Android\" in `navigator.appVersion` when desktop version is requested\n    return countTruthy(['onorientationchange' in w, 'orientation' in w, isItChromium && !('SharedWorker' in w), isItGecko && /android/i.test(navigator.appVersion)]) >= 2;\n  }\n\n  /**\n   * A deep description: https://fingerprintjs.com/blog/audio-fingerprinting/\n   * Inspired by and based on https://github.com/cozylife/audio-fingerprint\n   */\n  function getAudioFingerprint() {\n    var w = window;\n    var AudioContext = w.OfflineAudioContext || w.webkitOfflineAudioContext;\n    if (!AudioContext) {\n      return -2 /* NotSupported */;\n    }\n    // In some browsers, audio context always stays suspended unless the context is started in response to a user action\n    // (e.g. a click or a tap). It prevents audio fingerprint from being taken at an arbitrary moment of time.\n    // Such browsers are old and unpopular, so the audio fingerprinting is just skipped in them.\n    // See a similar case explanation at https://stackoverflow.com/questions/46363048/onaudioprocess-not-called-on-ios11#46534088\n    if (doesCurrentBrowserSuspendAudioContext()) {\n      return -1 /* KnownToSuspend */;\n    }\n\n    var hashFromIndex = 4500;\n    var hashToIndex = 5000;\n    var context = new AudioContext(1, hashToIndex, 44100);\n    var oscillator = context.createOscillator();\n    oscillator.type = 'triangle';\n    oscillator.frequency.value = 10000;\n    var compressor = context.createDynamicsCompressor();\n    compressor.threshold.value = -50;\n    compressor.knee.value = 40;\n    compressor.ratio.value = 12;\n    compressor.attack.value = 0;\n    compressor.release.value = 0.25;\n    oscillator.connect(compressor);\n    compressor.connect(context.destination);\n    oscillator.start(0);\n    var _a = startRenderingAudio(context),\n      renderPromise = _a[0],\n      finishRendering = _a[1];\n    var fingerprintPromise = renderPromise.then(function (buffer) {\n      return getHash(buffer.getChannelData(0).subarray(hashFromIndex));\n    }, function (error) {\n      if (error.name === \"timeout\" /* Timeout */ || error.name === \"suspended\" /* Suspended */) {\n        return -3 /* Timeout */;\n      }\n\n      throw error;\n    });\n    // Suppresses the console error message in case when the fingerprint fails before requested\n    fingerprintPromise.catch(function () {\n      return undefined;\n    });\n    return function () {\n      finishRendering();\n      return fingerprintPromise;\n    };\n  }\n  /**\n   * Checks if the current browser is known to always suspend audio context\n   */\n  function doesCurrentBrowserSuspendAudioContext() {\n    return isWebKit() && !isDesktopSafari() && !isWebKit606OrNewer();\n  }\n  /**\n   * Starts rendering the audio context.\n   * When the returned function is called, the render process starts finishing.\n   */\n  function startRenderingAudio(context) {\n    var renderTryMaxCount = 3;\n    var renderRetryDelay = 500;\n    var runningMaxAwaitTime = 500;\n    var runningSufficientTime = 5000;\n    var finalize = function () {\n      return undefined;\n    };\n    var resultPromise = new Promise(function (resolve, reject) {\n      var isFinalized = false;\n      var renderTryCount = 0;\n      var startedRunningAt = 0;\n      context.oncomplete = function (event) {\n        return resolve(event.renderedBuffer);\n      };\n      var startRunningTimeout = function () {\n        setTimeout(function () {\n          return reject(makeInnerError(\"timeout\" /* Timeout */));\n        }, Math.min(runningMaxAwaitTime, startedRunningAt + runningSufficientTime - Date.now()));\n      };\n      var tryRender = function () {\n        try {\n          context.startRendering();\n          switch (context.state) {\n            case 'running':\n              startedRunningAt = Date.now();\n              if (isFinalized) {\n                startRunningTimeout();\n              }\n              break;\n            // Sometimes the audio context doesn't start after calling `startRendering` (in addition to the cases where\n            // audio context doesn't start at all). A known case is starting an audio context when the browser tab is in\n            // background on iPhone. Retries usually help in this case.\n            case 'suspended':\n              // The audio context can reject starting until the tab is in foreground. Long fingerprint duration\n              // in background isn't a problem, therefore the retry attempts don't count in background. It can lead to\n              // a situation when a fingerprint takes very long time and finishes successfully. FYI, the audio context\n              // can be suspended when `document.hidden === false` and start running after a retry.\n              if (!document.hidden) {\n                renderTryCount++;\n              }\n              if (isFinalized && renderTryCount >= renderTryMaxCount) {\n                reject(makeInnerError(\"suspended\" /* Suspended */));\n              } else {\n                setTimeout(tryRender, renderRetryDelay);\n              }\n              break;\n          }\n        } catch (error) {\n          reject(error);\n        }\n      };\n      tryRender();\n      finalize = function () {\n        if (!isFinalized) {\n          isFinalized = true;\n          if (startedRunningAt > 0) {\n            startRunningTimeout();\n          }\n        }\n      };\n    });\n    return [resultPromise, finalize];\n  }\n  function getHash(signal) {\n    var hash = 0;\n    for (var i = 0; i < signal.length; ++i) {\n      hash += Math.abs(signal[i]);\n    }\n    return hash;\n  }\n  function makeInnerError(name) {\n    var error = new Error(name);\n    error.name = name;\n    return error;\n  }\n\n  /**\n   * Creates and keeps an invisible iframe while the given function runs.\n   * The given function is called when the iframe is loaded and has a body.\n   * The iframe allows to measure DOM sizes inside itself.\n   *\n   * Notice: passing an initial HTML code doesn't work in IE.\n   *\n   * Warning for package users:\n   * This function is out of Semantic Versioning, i.e. can change unexpectedly. Usage is at your own risk.\n   */\n  function withIframe(action, initialHtml, domPollInterval) {\n    var _a, _b, _c;\n    if (domPollInterval === void 0) {\n      domPollInterval = 50;\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var d, iframe;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            d = document;\n            _d.label = 1;\n          case 1:\n            if (!!d.body) return [3 /*break*/, 3];\n            return [4 /*yield*/, wait(domPollInterval)];\n          case 2:\n            _d.sent();\n            return [3 /*break*/, 1];\n          case 3:\n            iframe = d.createElement('iframe');\n            _d.label = 4;\n          case 4:\n            _d.trys.push([4,, 10, 11]);\n            return [4 /*yield*/, new Promise(function (_resolve, _reject) {\n              var isComplete = false;\n              var resolve = function () {\n                isComplete = true;\n                _resolve();\n              };\n              var reject = function (error) {\n                isComplete = true;\n                _reject(error);\n              };\n              iframe.onload = resolve;\n              iframe.onerror = reject;\n              var style = iframe.style;\n              style.setProperty('display', 'block', 'important'); // Required for browsers to calculate the layout\n              style.position = 'absolute';\n              style.top = '0';\n              style.left = '0';\n              style.visibility = 'hidden';\n              if (initialHtml && 'srcdoc' in iframe) {\n                iframe.srcdoc = initialHtml;\n              } else {\n                iframe.src = 'about:blank';\n              }\n              d.body.appendChild(iframe);\n              // WebKit in WeChat doesn't fire the iframe's `onload` for some reason.\n              // This code checks for the loading state manually.\n              // See https://github.com/fingerprintjs/fingerprintjs/issues/645\n              var checkReadyState = function () {\n                var _a, _b;\n                // The ready state may never become 'complete' in Firefox despite the 'load' event being fired.\n                // So an infinite setTimeout loop can happen without this check.\n                // See https://github.com/fingerprintjs/fingerprintjs/pull/716#issuecomment-986898796\n                if (isComplete) {\n                  return;\n                }\n                // Make sure iframe.contentWindow and iframe.contentWindow.document are both loaded\n                // The contentWindow.document can miss in JSDOM (https://github.com/jsdom/jsdom).\n                if (((_b = (_a = iframe.contentWindow) === null || _a === void 0 ? void 0 : _a.document) === null || _b === void 0 ? void 0 : _b.readyState) === 'complete') {\n                  resolve();\n                } else {\n                  setTimeout(checkReadyState, 10);\n                }\n              };\n              checkReadyState();\n            })];\n          case 5:\n            _d.sent();\n            _d.label = 6;\n          case 6:\n            if (!!((_b = (_a = iframe.contentWindow) === null || _a === void 0 ? void 0 : _a.document) === null || _b === void 0 ? void 0 : _b.body)) return [3 /*break*/, 8];\n            return [4 /*yield*/, wait(domPollInterval)];\n          case 7:\n            _d.sent();\n            return [3 /*break*/, 6];\n          case 8:\n            return [4 /*yield*/, action(iframe, iframe.contentWindow)];\n          case 9:\n            return [2 /*return*/, _d.sent()];\n          case 10:\n            (_c = iframe.parentNode) === null || _c === void 0 ? void 0 : _c.removeChild(iframe);\n            return [7 /*endfinally*/];\n          case 11:\n            return [2 /*return*/];\n        }\n      });\n    });\n  }\n  /**\n   * Creates a DOM element that matches the given selector.\n   * Only single element selector are supported (without operators like space, +, >, etc).\n   */\n  function selectorToElement(selector) {\n    var _a = parseSimpleCssSelector(selector),\n      tag = _a[0],\n      attributes = _a[1];\n    var element = document.createElement(tag !== null && tag !== void 0 ? tag : 'div');\n    for (var _i = 0, _b = Object.keys(attributes); _i < _b.length; _i++) {\n      var name_1 = _b[_i];\n      var value = attributes[name_1].join(' ');\n      // Changing the `style` attribute can cause a CSP error, therefore we change the `style.cssText` property.\n      // https://github.com/fingerprintjs/fingerprintjs/issues/733\n      if (name_1 === 'style') {\n        addStyleString(element.style, value);\n      } else {\n        element.setAttribute(name_1, value);\n      }\n    }\n    return element;\n  }\n  /**\n   * Adds CSS styles from a string in such a way that doesn't trigger a CSP warning (unsafe-inline or unsafe-eval)\n   */\n  function addStyleString(style, source) {\n    // We don't use `style.cssText` because browsers must block it when no `unsafe-eval` CSP is presented: https://csplite.com/csp145/#w3c_note\n    // Even though the browsers ignore this standard, we don't use `cssText` just in case.\n    for (var _i = 0, _a = source.split(';'); _i < _a.length; _i++) {\n      var property = _a[_i];\n      var match = /^\\s*([\\w-]+)\\s*:\\s*(.+?)(\\s*!([\\w-]+))?\\s*$/.exec(property);\n      if (match) {\n        var name_2 = match[1],\n          value = match[2],\n          priority = match[4];\n        style.setProperty(name_2, value, priority || ''); // The last argument can't be undefined in IE11\n      }\n    }\n  }\n\n  // We use m or w because these two characters take up the maximum width.\n  // And we use a LLi so that the same matching fonts can get separated.\n  var testString = 'mmMwWLliI0O&1';\n  // We test using 48px font size, we may use any size. I guess larger the better.\n  var textSize = '48px';\n  // A font will be compared against all the three default fonts.\n  // And if for any default fonts it doesn't match, then that font is available.\n  var baseFonts = ['monospace', 'sans-serif', 'serif'];\n  var fontList = [\n  // This is android-specific font from \"Roboto\" family\n  'sans-serif-thin', 'ARNO PRO', 'Agency FB', 'Arabic Typesetting', 'Arial Unicode MS', 'AvantGarde Bk BT', 'BankGothic Md BT', 'Batang', 'Bitstream Vera Sans Mono', 'Calibri', 'Century', 'Century Gothic', 'Clarendon', 'EUROSTILE', 'Franklin Gothic', 'Futura Bk BT', 'Futura Md BT', 'GOTHAM', 'Gill Sans', 'HELV', 'Haettenschweiler', 'Helvetica Neue', 'Humanst521 BT', 'Leelawadee', 'Letter Gothic', 'Levenim MT', 'Lucida Bright', 'Lucida Sans', 'Menlo', 'MS Mincho', 'MS Outlook', 'MS Reference Specialty', 'MS UI Gothic', 'MT Extra', 'MYRIAD PRO', 'Marlett', 'Meiryo UI', 'Microsoft Uighur', 'Minion Pro', 'Monotype Corsiva', 'PMingLiU', 'Pristina', 'SCRIPTINA', 'Segoe UI Light', 'Serifa', 'SimHei', 'Small Fonts', 'Staccato222 BT', 'TRAJAN PRO', 'Univers CE 55 Medium', 'Vrinda', 'ZWAdobeF'];\n  // kudos to http://www.lalit.org/lab/javascript-css-font-detect/\n  function getFonts() {\n    // Running the script in an iframe makes it not affect the page look and not be affected by the page CSS. See:\n    // https://github.com/fingerprintjs/fingerprintjs/issues/592\n    // https://github.com/fingerprintjs/fingerprintjs/issues/628\n    return withIframe(function (_, _a) {\n      var document = _a.document;\n      var holder = document.body;\n      holder.style.fontSize = textSize;\n      // div to load spans for the default fonts and the fonts to detect\n      var spansContainer = document.createElement('div');\n      var defaultWidth = {};\n      var defaultHeight = {};\n      // creates a span where the fonts will be loaded\n      var createSpan = function (fontFamily) {\n        var span = document.createElement('span');\n        var style = span.style;\n        style.position = 'absolute';\n        style.top = '0';\n        style.left = '0';\n        style.fontFamily = fontFamily;\n        span.textContent = testString;\n        spansContainer.appendChild(span);\n        return span;\n      };\n      // creates a span and load the font to detect and a base font for fallback\n      var createSpanWithFonts = function (fontToDetect, baseFont) {\n        return createSpan(\"'\" + fontToDetect + \"',\" + baseFont);\n      };\n      // creates spans for the base fonts and adds them to baseFontsDiv\n      var initializeBaseFontsSpans = function () {\n        return baseFonts.map(createSpan);\n      };\n      // creates spans for the fonts to detect and adds them to fontsDiv\n      var initializeFontsSpans = function () {\n        // Stores {fontName : [spans for that font]}\n        var spans = {};\n        var _loop_1 = function (font) {\n          spans[font] = baseFonts.map(function (baseFont) {\n            return createSpanWithFonts(font, baseFont);\n          });\n        };\n        for (var _i = 0, fontList_1 = fontList; _i < fontList_1.length; _i++) {\n          var font = fontList_1[_i];\n          _loop_1(font);\n        }\n        return spans;\n      };\n      // checks if a font is available\n      var isFontAvailable = function (fontSpans) {\n        return baseFonts.some(function (baseFont, baseFontIndex) {\n          return fontSpans[baseFontIndex].offsetWidth !== defaultWidth[baseFont] || fontSpans[baseFontIndex].offsetHeight !== defaultHeight[baseFont];\n        });\n      };\n      // create spans for base fonts\n      var baseFontsSpans = initializeBaseFontsSpans();\n      // create spans for fonts to detect\n      var fontsSpans = initializeFontsSpans();\n      // add all the spans to the DOM\n      holder.appendChild(spansContainer);\n      // get the default width for the three base fonts\n      for (var index = 0; index < baseFonts.length; index++) {\n        defaultWidth[baseFonts[index]] = baseFontsSpans[index].offsetWidth; // width for the default font\n        defaultHeight[baseFonts[index]] = baseFontsSpans[index].offsetHeight; // height for the default font\n      }\n      // check available fonts\n      return fontList.filter(function (font) {\n        return isFontAvailable(fontsSpans[font]);\n      });\n    });\n  }\n  function getPlugins() {\n    var rawPlugins = navigator.plugins;\n    if (!rawPlugins) {\n      return undefined;\n    }\n    var plugins = [];\n    // Safari 10 doesn't support iterating navigator.plugins with for...of\n    for (var i = 0; i < rawPlugins.length; ++i) {\n      var plugin = rawPlugins[i];\n      if (!plugin) {\n        continue;\n      }\n      var mimeTypes = [];\n      for (var j = 0; j < plugin.length; ++j) {\n        var mimeType = plugin[j];\n        mimeTypes.push({\n          type: mimeType.type,\n          suffixes: mimeType.suffixes\n        });\n      }\n      plugins.push({\n        name: plugin.name,\n        description: plugin.description,\n        mimeTypes: mimeTypes\n      });\n    }\n    return plugins;\n  }\n\n  // https://www.browserleaks.com/canvas#how-does-it-work\n  function getCanvasFingerprint() {\n    var _a = makeCanvasContext(),\n      canvas = _a[0],\n      context = _a[1];\n    if (!isSupported(canvas, context)) {\n      return {\n        winding: false,\n        geometry: '',\n        text: ''\n      };\n    }\n    return {\n      winding: doesSupportWinding(context),\n      geometry: makeGeometryImage(canvas, context),\n      // Text is unstable:\n      // https://github.com/fingerprintjs/fingerprintjs/issues/583\n      // https://github.com/fingerprintjs/fingerprintjs/issues/103\n      // Therefore it's extracted into a separate image.\n      text: makeTextImage(canvas, context)\n    };\n  }\n  function makeCanvasContext() {\n    var canvas = document.createElement('canvas');\n    canvas.width = 1;\n    canvas.height = 1;\n    return [canvas, canvas.getContext('2d')];\n  }\n  function isSupported(canvas, context) {\n    // TODO: look into: https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob\n    return !!(context && canvas.toDataURL);\n  }\n  function doesSupportWinding(context) {\n    // https://web.archive.org/web/20170825024655/http://blogs.adobe.com/webplatform/2013/01/30/winding-rules-in-canvas/\n    // https://github.com/Modernizr/Modernizr/blob/master/feature-detects/canvas/winding.js\n    context.rect(0, 0, 10, 10);\n    context.rect(2, 2, 6, 6);\n    return !context.isPointInPath(5, 5, 'evenodd');\n  }\n  function makeTextImage(canvas, context) {\n    // Resizing the canvas cleans it\n    canvas.width = 240;\n    canvas.height = 60;\n    context.textBaseline = 'alphabetic';\n    context.fillStyle = '#f60';\n    context.fillRect(100, 1, 62, 20);\n    context.fillStyle = '#069';\n    // It's important to use explicit built-in fonts in order to exclude the affect of font preferences\n    // (there is a separate entropy source for them).\n    context.font = '11pt \"Times New Roman\"';\n    // The choice of emojis has a gigantic impact on rendering performance (especially in FF).\n    // Some newer emojis cause it to slow down 50-200 times.\n    // There must be no text to the right of the emoji, see https://github.com/fingerprintjs/fingerprintjs/issues/574\n    // A bare emoji shouldn't be used because the canvas will change depending on the script encoding:\n    // https://github.com/fingerprintjs/fingerprintjs/issues/66\n    // Escape sequence shouldn't be used too because Terser will turn it into a bare unicode.\n    var printedText = \"Cwm fjordbank gly \" + String.fromCharCode(55357, 56835) /* 😃 */;\n    context.fillText(printedText, 2, 15);\n    context.fillStyle = 'rgba(102, 204, 0, 0.2)';\n    context.font = '18pt Arial';\n    context.fillText(printedText, 4, 45);\n    return save(canvas);\n  }\n  function makeGeometryImage(canvas, context) {\n    // Resizing the canvas cleans it\n    canvas.width = 122;\n    canvas.height = 110;\n    // Canvas blending\n    // https://web.archive.org/web/20170826194121/http://blogs.adobe.com/webplatform/2013/01/28/blending-features-in-canvas/\n    // http://jsfiddle.net/NDYV8/16/\n    context.globalCompositeOperation = 'multiply';\n    for (var _i = 0, _a = [['#f2f', 40, 40], ['#2ff', 80, 40], ['#ff2', 60, 80]]; _i < _a.length; _i++) {\n      var _b = _a[_i],\n        color = _b[0],\n        x = _b[1],\n        y = _b[2];\n      context.fillStyle = color;\n      context.beginPath();\n      context.arc(x, y, 40, 0, Math.PI * 2, true);\n      context.closePath();\n      context.fill();\n    }\n    // Canvas winding\n    // https://web.archive.org/web/20130913061632/http://blogs.adobe.com/webplatform/2013/01/30/winding-rules-in-canvas/\n    // http://jsfiddle.net/NDYV8/19/\n    context.fillStyle = '#f9c';\n    context.arc(60, 60, 60, 0, Math.PI * 2, true);\n    context.arc(60, 60, 20, 0, Math.PI * 2, true);\n    context.fill('evenodd');\n    return save(canvas);\n  }\n  function save(canvas) {\n    // TODO: look into: https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob\n    return canvas.toDataURL();\n  }\n\n  /**\n   * This is a crude and primitive touch screen detection. It's not possible to currently reliably detect the availability\n   * of a touch screen with a JS, without actually subscribing to a touch event.\n   *\n   * @see http://www.stucox.com/blog/you-cant-detect-a-touchscreen/\n   * @see https://github.com/Modernizr/Modernizr/issues/548\n   */\n  function getTouchSupport() {\n    var n = navigator;\n    var maxTouchPoints = 0;\n    var touchEvent;\n    if (n.maxTouchPoints !== undefined) {\n      maxTouchPoints = toInt(n.maxTouchPoints);\n    } else if (n.msMaxTouchPoints !== undefined) {\n      maxTouchPoints = n.msMaxTouchPoints;\n    }\n    try {\n      document.createEvent('TouchEvent');\n      touchEvent = true;\n    } catch (_a) {\n      touchEvent = false;\n    }\n    var touchStart = ('ontouchstart' in window);\n    return {\n      maxTouchPoints: maxTouchPoints,\n      touchEvent: touchEvent,\n      touchStart: touchStart\n    };\n  }\n  function getOsCpu() {\n    return navigator.oscpu;\n  }\n  function getLanguages() {\n    var n = navigator;\n    var result = [];\n    var language = n.language || n.userLanguage || n.browserLanguage || n.systemLanguage;\n    if (language !== undefined) {\n      result.push([language]);\n    }\n    if (Array.isArray(n.languages)) {\n      // Starting from Chromium 86, there is only a single value in `navigator.language` in Incognito mode:\n      // the value of `navigator.language`. Therefore the value is ignored in this browser.\n      if (!(isChromium() && isChromium86OrNewer())) {\n        result.push(n.languages);\n      }\n    } else if (typeof n.languages === 'string') {\n      var languages = n.languages;\n      if (languages) {\n        result.push(languages.split(','));\n      }\n    }\n    return result;\n  }\n  function getColorDepth() {\n    return window.screen.colorDepth;\n  }\n  function getDeviceMemory() {\n    // `navigator.deviceMemory` is a string containing a number in some unidentified cases\n    return replaceNaN(toFloat(navigator.deviceMemory), undefined);\n  }\n  function getScreenResolution() {\n    var s = screen;\n    // Some browsers return screen resolution as strings, e.g. \"1200\", instead of a number, e.g. 1200.\n    // I suspect it's done by certain plugins that randomize browser properties to prevent fingerprinting.\n    // Some browsers even return  screen resolution as not numbers.\n    var parseDimension = function (value) {\n      return replaceNaN(toInt(value), null);\n    };\n    var dimensions = [parseDimension(s.width), parseDimension(s.height)];\n    dimensions.sort().reverse();\n    return dimensions;\n  }\n  var screenFrameCheckInterval = 2500;\n  var roundingPrecision = 10;\n  // The type is readonly to protect from unwanted mutations\n  var screenFrameBackup;\n  var screenFrameSizeTimeoutId;\n  /**\n   * Starts watching the screen frame size. When a non-zero size appears, the size is saved and the watch is stopped.\n   * Later, when `getScreenFrame` runs, it will return the saved non-zero size if the current size is null.\n   *\n   * This trick is required to mitigate the fact that the screen frame turns null in some cases.\n   * See more on this at https://github.com/fingerprintjs/fingerprintjs/issues/568\n   */\n  function watchScreenFrame() {\n    if (screenFrameSizeTimeoutId !== undefined) {\n      return;\n    }\n    var checkScreenFrame = function () {\n      var frameSize = getCurrentScreenFrame();\n      if (isFrameSizeNull(frameSize)) {\n        screenFrameSizeTimeoutId = setTimeout(checkScreenFrame, screenFrameCheckInterval);\n      } else {\n        screenFrameBackup = frameSize;\n        screenFrameSizeTimeoutId = undefined;\n      }\n    };\n    checkScreenFrame();\n  }\n  function getScreenFrame() {\n    var _this = this;\n    watchScreenFrame();\n    return function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        var frameSize;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              frameSize = getCurrentScreenFrame();\n              if (!isFrameSizeNull(frameSize)) return [3 /*break*/, 2];\n              if (screenFrameBackup) {\n                return [2 /*return*/, __spreadArrays(screenFrameBackup)];\n              }\n              if (!getFullscreenElement()) return [3 /*break*/, 2];\n              // Some browsers set the screen frame to zero when programmatic fullscreen is on.\n              // There is a chance of getting a non-zero frame after exiting the fullscreen.\n              // See more on this at https://github.com/fingerprintjs/fingerprintjs/issues/568\n              return [4 /*yield*/, exitFullscreen()];\n            case 1:\n              // Some browsers set the screen frame to zero when programmatic fullscreen is on.\n              // There is a chance of getting a non-zero frame after exiting the fullscreen.\n              // See more on this at https://github.com/fingerprintjs/fingerprintjs/issues/568\n              _a.sent();\n              frameSize = getCurrentScreenFrame();\n              _a.label = 2;\n            case 2:\n              if (!isFrameSizeNull(frameSize)) {\n                screenFrameBackup = frameSize;\n              }\n              return [2 /*return*/, frameSize];\n          }\n        });\n      });\n    };\n  }\n  /**\n   * Sometimes the available screen resolution changes a bit, e.g. 1900x1440 → 1900x1439. A possible reason: macOS Dock\n   * shrinks to fit more icons when there is too little space. The rounding is used to mitigate the difference.\n   */\n  function getRoundedScreenFrame() {\n    var _this = this;\n    var screenFrameGetter = getScreenFrame();\n    return function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        var frameSize, processSize;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4 /*yield*/, screenFrameGetter()];\n            case 1:\n              frameSize = _a.sent();\n              processSize = function (sideSize) {\n                return sideSize === null ? null : round(sideSize, roundingPrecision);\n              };\n              // It might look like I don't know about `for` and `map`.\n              // In fact, such code is used to avoid TypeScript issues without using `as`.\n              return [2 /*return*/, [processSize(frameSize[0]), processSize(frameSize[1]), processSize(frameSize[2]), processSize(frameSize[3])]];\n          }\n        });\n      });\n    };\n  }\n  function getCurrentScreenFrame() {\n    var s = screen;\n    // Some browsers return screen resolution as strings, e.g. \"1200\", instead of a number, e.g. 1200.\n    // I suspect it's done by certain plugins that randomize browser properties to prevent fingerprinting.\n    //\n    // Some browsers (IE, Edge ≤18) don't provide `screen.availLeft` and `screen.availTop`. The property values are\n    // replaced with 0 in such cases to not lose the entropy from `screen.availWidth` and `screen.availHeight`.\n    return [replaceNaN(toFloat(s.availTop), null), replaceNaN(toFloat(s.width) - toFloat(s.availWidth) - replaceNaN(toFloat(s.availLeft), 0), null), replaceNaN(toFloat(s.height) - toFloat(s.availHeight) - replaceNaN(toFloat(s.availTop), 0), null), replaceNaN(toFloat(s.availLeft), null)];\n  }\n  function isFrameSizeNull(frameSize) {\n    for (var i = 0; i < 4; ++i) {\n      if (frameSize[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function getHardwareConcurrency() {\n    // sometimes hardware concurrency is a string\n    return replaceNaN(toInt(navigator.hardwareConcurrency), undefined);\n  }\n  function getTimezone() {\n    var _a;\n    var DateTimeFormat = (_a = window.Intl) === null || _a === void 0 ? void 0 : _a.DateTimeFormat;\n    if (DateTimeFormat) {\n      var timezone = new DateTimeFormat().resolvedOptions().timeZone;\n      if (timezone) {\n        return timezone;\n      }\n    }\n    // For browsers that don't support timezone names\n    // The minus is intentional because the JS offset is opposite to the real offset\n    var offset = -getTimezoneOffset();\n    return \"UTC\" + (offset >= 0 ? '+' : '') + Math.abs(offset);\n  }\n  function getTimezoneOffset() {\n    var currentYear = new Date().getFullYear();\n    // The timezone offset may change over time due to daylight saving time (DST) shifts.\n    // The non-DST timezone offset is used as the result timezone offset.\n    // Since the DST season differs in the northern and the southern hemispheres,\n    // both January and July timezones offsets are considered.\n    return Math.max(\n    // `getTimezoneOffset` returns a number as a string in some unidentified cases\n    toFloat(new Date(currentYear, 0, 1).getTimezoneOffset()), toFloat(new Date(currentYear, 6, 1).getTimezoneOffset()));\n  }\n  function getSessionStorage() {\n    try {\n      return !!window.sessionStorage;\n    } catch (error) {\n      /* SecurityError when referencing it means it exists */\n      return true;\n    }\n  }\n\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=781447\n  function getLocalStorage() {\n    try {\n      return !!window.localStorage;\n    } catch (e) {\n      /* SecurityError when referencing it means it exists */\n      return true;\n    }\n  }\n  function getIndexedDB() {\n    // IE and Edge don't allow accessing indexedDB in private mode, therefore IE and Edge will have different\n    // visitor identifier in normal and private modes.\n    if (isTrident() || isEdgeHTML()) {\n      return undefined;\n    }\n    try {\n      return !!window.indexedDB;\n    } catch (e) {\n      /* SecurityError when referencing it means it exists */\n      return true;\n    }\n  }\n  function getOpenDatabase() {\n    return !!window.openDatabase;\n  }\n  function getCpuClass() {\n    return navigator.cpuClass;\n  }\n  function getPlatform() {\n    // Android Chrome 86 and 87 and Android Firefox 80 and 84 don't mock the platform value when desktop mode is requested\n    var platform = navigator.platform;\n    // iOS mocks the platform value when desktop version is requested: https://github.com/fingerprintjs/fingerprintjs/issues/514\n    // iPad uses desktop mode by default since iOS 13\n    // The value is 'MacIntel' on M1 Macs\n    // The value is 'iPhone' on iPod Touch\n    if (platform === 'MacIntel') {\n      if (isWebKit() && !isDesktopSafari()) {\n        return isIPad() ? 'iPad' : 'iPhone';\n      }\n    }\n    return platform;\n  }\n  function getVendor() {\n    return navigator.vendor || '';\n  }\n\n  /**\n   * Checks for browser-specific (not engine specific) global variables to tell browsers with the same engine apart.\n   * Only somewhat popular browsers are considered.\n   */\n  function getVendorFlavors() {\n    var flavors = [];\n    for (var _i = 0, _a = [\n      // Blink and some browsers on iOS\n      'chrome',\n      // Safari on macOS\n      'safari',\n      // Chrome on iOS (checked in 85 on 13 and 87 on 14)\n      '__crWeb', '__gCrWeb',\n      // Yandex Browser on iOS, macOS and Android (checked in 21.2 on iOS 14, macOS and Android)\n      'yandex',\n      // Yandex Browser on iOS (checked in 21.2 on 14)\n      '__yb', '__ybro',\n      // Firefox on iOS (checked in 32 on 14)\n      '__firefox__',\n      // Edge on iOS (checked in 46 on 14)\n      '__edgeTrackingPreventionStatistics', 'webkit',\n      // Opera Touch on iOS (checked in 2.6 on 14)\n      'oprt',\n      // Samsung Internet on Android (checked in 11.1)\n      'samsungAr',\n      // UC Browser on Android (checked in 12.10 and 13.0)\n      'ucweb', 'UCShellJava',\n      // Puffin on Android (checked in 9.0)\n      'puffinDevice']; _i < _a.length; _i++) {\n      var key = _a[_i];\n      var value = window[key];\n      if (value && typeof value === 'object') {\n        flavors.push(key);\n      }\n    }\n    return flavors.sort();\n  }\n\n  /**\n   * navigator.cookieEnabled cannot detect custom or nuanced cookie blocking configurations. For example, when blocking\n   * cookies via the Advanced Privacy Settings in IE9, it always returns true. And there have been issues in the past with\n   * site-specific exceptions. Don't rely on it.\n   *\n   * @see https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cookies.js Taken from here\n   */\n  function areCookiesEnabled() {\n    var d = document;\n    // Taken from here: https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cookies.js\n    // navigator.cookieEnabled cannot detect custom or nuanced cookie blocking configurations. For example, when blocking\n    // cookies via the Advanced Privacy Settings in IE9, it always returns true. And there have been issues in the past\n    // with site-specific exceptions. Don't rely on it.\n    // try..catch because some in situations `document.cookie` is exposed but throws a\n    // SecurityError if you try to access it; e.g. documents created from data URIs\n    // or in sandboxed iframes (depending on flags/context)\n    try {\n      // Create cookie\n      d.cookie = 'cookietest=1; SameSite=Strict;';\n      var result = d.cookie.indexOf('cookietest=') !== -1;\n      // Delete cookie\n      d.cookie = 'cookietest=1; SameSite=Strict; expires=Thu, 01-Jan-1970 00:00:01 GMT';\n      return result;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  /**\n   * Only single element selector are supported (no operators like space, +, >, etc).\n   * `embed` and `position: fixed;` will be considered as blocked anyway because it always has no offsetParent.\n   * Avoid `iframe` and anything with `[src=]` because they produce excess HTTP requests.\n   *\n   * See docs/content_blockers.md to learn how to make the list\n   */\n  var filters = {\n    abpIndo: ['#Iklan-Melayang', '#Kolom-Iklan-728', '#SidebarIklan-wrapper', 'a[title=\"7naga poker\" i]', '[title=\"ALIENBOLA\" i]'],\n    abpvn: ['#quangcaomb', '.iosAdsiosAds-layout', '.quangcao', '[href^=\"https://r88.vn/\"]', '[href^=\"https://zbet.vn/\"]'],\n    adBlockFinland: ['.mainostila', '.sponsorit', '.ylamainos', 'a[href*=\"/clickthrgh.asp?\"]', 'a[href^=\"https://app.readpeak.com/ads\"]'],\n    adBlockPersian: ['#navbar_notice_50', 'a[href^=\"http://g1.v.fwmrm.net/ad/\"]', '.kadr', 'TABLE[width=\"140px\"]', '#divAgahi'],\n    adBlockWarningRemoval: ['#adblock-honeypot', '.adblocker-root', '.wp_adblock_detect'],\n    adGuardAnnoyances: ['amp-embed[type=\"zen\"]', '.hs-sosyal', '#cookieconsentdiv', 'div[class^=\"app_gdpr\"]', '.as-oil'],\n    adGuardBase: ['#ad-after', '#ad-p3', '.BetterJsPopOverlay', '#ad_300X250', '#bannerfloat22'],\n    adGuardChinese: [\n    // Disabled because not reproducible. Will be replaced during the next filter update.\n    // '#piao_div_0[style*=\"width:140px;\"]',\n    'a[href*=\".ttz5.cn\"]', 'a[href*=\".yabovip2027.com/\"]', '.tm3all2h4b', '.cc5278_banner_ad'],\n    adGuardFrench: ['.zonepub', '[class*=\"_adLeaderboard\"]', '[id^=\"block-xiti_oas-\"]', 'a[href^=\"http://ptapjmp.com/\"]', 'a[href^=\"https://go.alvexo.com/\"]'],\n    adGuardGerman: ['.banneritemwerbung_head_1', '.boxstartwerbung', '.werbung3', 'a[href^=\"http://www.eis.de/index.phtml?refid=\"]', 'a[href^=\"https://www.tipico.com/?affiliateId=\"]'],\n    adGuardJapanese: ['#kauli_yad_1', '#ad-giftext', '#adsSPRBlock', 'a[href^=\"http://ad2.trafficgate.net/\"]', 'a[href^=\"http://www.rssad.jp/\"]'],\n    adGuardMobile: ['amp-auto-ads', '#mgid_iframe', '.amp_ad', 'amp-embed[type=\"24smi\"]', '#mgid_iframe1'],\n    adGuardRussian: ['a[href^=\"https://ya-distrib.ru/r/\"]', 'a[href^=\"https://ad.letmeads.com/\"]', '.reclama', 'div[id^=\"smi2adblock\"]', 'div[id^=\"AdFox_banner_\"]'],\n    adGuardSocial: ['a[href^=\"//www.stumbleupon.com/submit?url=\"]', 'a[href^=\"//telegram.me/share/url?\"]', '.etsy-tweet', '#inlineShare', '.popup-social'],\n    adGuardSpanishPortuguese: ['#barraPublicidade', '#Publicidade', '#publiEspecial', '#queTooltip', '[href^=\"http://ads.glispa.com/\"]'],\n    adGuardTrackingProtection: ['amp-embed[type=\"taboola\"]', '#qoo-counter', 'a[href^=\"http://click.hotlog.ru/\"]', 'a[href^=\"http://hitcounter.ru/top/stat.php\"]', 'a[href^=\"http://top.mail.ru/jump\"]'],\n    adGuardTurkish: ['#backkapat', '#reklami', 'a[href^=\"http://adserv.ontek.com.tr/\"]', 'a[href^=\"http://izlenzi.com/campaign/\"]', 'a[href^=\"http://www.installads.net/\"]'],\n    bulgarian: ['td#freenet_table_ads', '#adbody', '#ea_intext_div', '.lapni-pop-over', '#xenium_hot_offers'],\n    easyList: ['#AD_banner_bottom', '#Ads_google_02', '#N-ad-article-rightRail-1', '#ad-fullbanner2', '#ad-zone-2'],\n    easyListChina: ['a[href*=\".wensixuetang.com/\"]', 'A[href*=\"/hth107.com/\"]', '.appguide-wrap[onclick*=\"bcebos.com\"]', '.frontpageAdvM', '#taotaole'],\n    easyListCookie: ['#adtoniq-msg-bar', '#CoockiesPage', '#CookieModal_cookiemodal', '#DO_CC_PANEL', '#ShowCookie'],\n    easyListCzechSlovak: ['#onlajny-stickers', '#reklamni-box', '.reklama-megaboard', '.sklik', '[id^=\"sklikReklama\"]'],\n    easyListDutch: ['#advertentie', '#vipAdmarktBannerBlock', '.adstekst', 'a[href^=\"https://xltube.nl/click/\"]', '#semilo-lrectangle'],\n    easyListGermany: ['a[href^=\"http://www.hw-area.com/?dp=\"]', 'a[href^=\"https://ads.sunmaker.com/tracking.php?\"]', '.werbung-skyscraper2', '.bannergroup_werbung', '.ads_rechts'],\n    easyListItaly: ['.box_adv_annunci', '.sb-box-pubbliredazionale', 'a[href^=\"http://affiliazioniads.snai.it/\"]', 'a[href^=\"https://adserver.html.it/\"]', 'a[href^=\"https://affiliazioniads.snai.it/\"]'],\n    easyListLithuania: ['.reklamos_tarpas', '.reklamos_nuorodos', 'img[alt=\"Reklaminis skydelis\"]', 'img[alt=\"Dedikuoti.lt serveriai\"]', 'img[alt=\"Hostingas Serveriai.lt\"]'],\n    estonian: ['A[href*=\"http://pay4results24.eu\"]'],\n    fanboyAnnoyances: ['#feedback-tab', '#taboola-below-article', '.feedburnerFeedBlock', '.widget-feedburner-counter', '[title=\"Subscribe to our blog\"]'],\n    fanboyAntiFacebook: ['.util-bar-module-firefly-visible'],\n    fanboyEnhancedTrackers: ['.open.pushModal', '#issuem-leaky-paywall-articles-zero-remaining-nag', '#sovrn_container', 'div[class$=\"-hide\"][zoompage-fontsize][style=\"display: block;\"]', '.BlockNag__Card'],\n    fanboySocial: ['.td-tags-and-social-wrapper-box', '.twitterContainer', '.youtube-social', 'a[title^=\"Like us on Facebook\"]', 'img[alt^=\"Share on Digg\"]'],\n    frellwitSwedish: ['a[href*=\"casinopro.se\"][target=\"_blank\"]', 'a[href*=\"doktor-se.onelink.me\"]', 'article.category-samarbete', 'div.holidAds', 'ul.adsmodern'],\n    greekAdBlock: ['A[href*=\"adman.otenet.gr/click?\"]', 'A[href*=\"http://axiabanners.exodus.gr/\"]', 'A[href*=\"http://interactive.forthnet.gr/click?\"]', 'DIV.agores300', 'TABLE.advright'],\n    hungarian: ['A[href*=\"ad.eval.hu\"]', 'A[href*=\"ad.netmedia.hu\"]', 'A[href*=\"daserver.ultraweb.hu\"]', '#cemp_doboz', '.optimonk-iframe-container'],\n    iDontCareAboutCookies: ['.alert-info[data-block-track*=\"CookieNotice\"]', '.ModuleTemplateCookieIndicator', '.o--cookies--container', '.cookie-msg-info-container', '#cookies-policy-sticky'],\n    icelandicAbp: ['A[href^=\"/framework/resources/forms/ads.aspx\"]'],\n    latvian: ['a[href=\"http://www.salidzini.lv/\"][style=\"display: block; width: 120px; height: 40px; overflow: hidden; position: relative;\"]', 'a[href=\"http://www.salidzini.lv/\"][style=\"display: block; width: 88px; height: 31px; overflow: hidden; position: relative;\"]'],\n    listKr: ['a[href*=\"//kingtoon.slnk.kr\"]', 'a[href*=\"//playdsb.com/kr\"]', 'div.logly-lift-adz', 'div[data-widget_id=\"ml6EJ074\"]', 'ins.daum_ddn_area'],\n    listeAr: ['.geminiLB1Ad', '.right-and-left-sponsers', 'a[href*=\".aflam.info\"]', 'a[href*=\"booraq.org\"]', 'a[href*=\"dubizzle.com/ar/?utm_source=\"]'],\n    listeFr: ['a[href^=\"http://promo.vador.com/\"]', '#adcontainer_recherche', 'a[href*=\"weborama.fr/fcgi-bin/\"]', '.site-pub-interstitiel', 'div[id^=\"crt-\"][data-criteo-id]'],\n    officialPolish: ['#ceneo-placeholder-ceneo-12', '[href^=\"https://aff.sendhub.pl/\"]', 'a[href^=\"http://advmanager.techfun.pl/redirect/\"]', 'a[href^=\"http://www.trizer.pl/?utm_source\"]', 'div#skapiec_ad'],\n    ro: ['a[href^=\"//afftrk.altex.ro/Counter/Click\"]', 'a[href^=\"/magazin/\"]', 'a[href^=\"https://blackfridaysales.ro/trk/shop/\"]', 'a[href^=\"https://event.2performant.com/events/click\"]', 'a[href^=\"https://l.profitshare.ro/\"]'],\n    ruAd: ['a[href*=\"//febrare.ru/\"]', 'a[href*=\"//utimg.ru/\"]', 'a[href*=\"://chikidiki.ru\"]', '#pgeldiz', '.yandex-rtb-block'],\n    thaiAds: ['a[href*=macau-uta-popup]', '#ads-google-middle_rectangle-group', '.ads300s', '.bumq', '.img-kosana'],\n    webAnnoyancesUltralist: ['#mod-social-share-2', '#social-tools', '.ctpl-fullbanner', '.zergnet-recommend', '.yt.btn-link.btn-md.btn']\n  };\n  /**\n   * The order of the returned array means nothing (it's always sorted alphabetically).\n   *\n   * Notice that the source is slightly unstable.\n   * Safari provides a 2-taps way to disable all content blockers on a page temporarily.\n   * Also content blockers can be disabled permanently for a domain, but it requires 4 taps.\n   * So empty array shouldn't be treated as \"no blockers\", it should be treated as \"no signal\".\n   * If you are a website owner, don't make your visitors want to disable content blockers.\n   */\n  function getDomBlockers(_a) {\n    var debug = (_a === void 0 ? {} : _a).debug;\n    return __awaiter(this, void 0, void 0, function () {\n      var filterNames, allSelectors, blockedSelectors, activeBlockers;\n      var _b;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            if (!isApplicable()) {\n              return [2 /*return*/, undefined];\n            }\n            filterNames = Object.keys(filters);\n            allSelectors = (_b = []).concat.apply(_b, filterNames.map(function (filterName) {\n              return filters[filterName];\n            }));\n            return [4 /*yield*/, getBlockedSelectors(allSelectors)];\n          case 1:\n            blockedSelectors = _c.sent();\n            if (debug) {\n              printDebug(blockedSelectors);\n            }\n            activeBlockers = filterNames.filter(function (filterName) {\n              var selectors = filters[filterName];\n              var blockedCount = countTruthy(selectors.map(function (selector) {\n                return blockedSelectors[selector];\n              }));\n              return blockedCount > selectors.length * 0.6;\n            });\n            activeBlockers.sort();\n            return [2 /*return*/, activeBlockers];\n        }\n      });\n    });\n  }\n  function isApplicable() {\n    // Safari (desktop and mobile) and all Android browsers keep content blockers in both regular and private mode\n    return isWebKit() || isAndroid();\n  }\n  function getBlockedSelectors(selectors) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function () {\n      var d, root, elements, blockedSelectors, i, element, holder, i;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            d = document;\n            root = d.createElement('div');\n            elements = new Array(selectors.length);\n            blockedSelectors = {} // Set() isn't used just in case somebody need older browser support\n            ;\n\n            forceShow(root);\n            // First create all elements that can be blocked. If the DOM steps below are done in a single cycle,\n            // browser will alternate tree modification and layout reading, that is very slow.\n            for (i = 0; i < selectors.length; ++i) {\n              element = selectorToElement(selectors[i]);\n              holder = d.createElement('div') // Protects from unwanted effects of `+` and `~` selectors of filters\n              ;\n\n              forceShow(holder);\n              holder.appendChild(element);\n              root.appendChild(holder);\n              elements[i] = element;\n            }\n            _b.label = 1;\n          case 1:\n            if (!!d.body) return [3 /*break*/, 3];\n            return [4 /*yield*/, wait(50)];\n          case 2:\n            _b.sent();\n            return [3 /*break*/, 1];\n          case 3:\n            d.body.appendChild(root);\n            try {\n              // Then check which of the elements are blocked\n              for (i = 0; i < selectors.length; ++i) {\n                if (!elements[i].offsetParent) {\n                  blockedSelectors[selectors[i]] = true;\n                }\n              }\n            } finally {\n              // Then remove the elements\n              (_a = root.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(root);\n            }\n            return [2 /*return*/, blockedSelectors];\n        }\n      });\n    });\n  }\n  function forceShow(element) {\n    element.style.setProperty('display', 'block', 'important');\n  }\n  function printDebug(blockedSelectors) {\n    var message = 'DOM blockers debug:\\n```';\n    for (var _i = 0, _a = Object.keys(filters); _i < _a.length; _i++) {\n      var filterName = _a[_i];\n      message += \"\\n\" + filterName + \":\";\n      for (var _b = 0, _c = filters[filterName]; _b < _c.length; _b++) {\n        var selector = _c[_b];\n        message += \"\\n  \" + selector + \" \" + (blockedSelectors[selector] ? '🚫' : '➡️');\n      }\n    }\n    // console.log is ok here because it's under a debug clause\n    // eslint-disable-next-line no-console\n    console.log(message + \"\\n```\");\n  }\n\n  /**\n   * @see https://developer.mozilla.org/en-US/docs/Web/CSS/@media/color-gamut\n   */\n  function getColorGamut() {\n    // rec2020 includes p3 and p3 includes srgb\n    for (var _i = 0, _a = ['rec2020', 'p3', 'srgb']; _i < _a.length; _i++) {\n      var gamut = _a[_i];\n      if (matchMedia(\"(color-gamut: \" + gamut + \")\").matches) {\n        return gamut;\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * @see https://developer.mozilla.org/en-US/docs/Web/CSS/@media/inverted-colors\n   */\n  function areColorsInverted() {\n    if (doesMatch('inverted')) {\n      return true;\n    }\n    if (doesMatch('none')) {\n      return false;\n    }\n    return undefined;\n  }\n  function doesMatch(value) {\n    return matchMedia(\"(inverted-colors: \" + value + \")\").matches;\n  }\n\n  /**\n   * @see https://developer.mozilla.org/en-US/docs/Web/CSS/@media/forced-colors\n   */\n  function areColorsForced() {\n    if (doesMatch$1('active')) {\n      return true;\n    }\n    if (doesMatch$1('none')) {\n      return false;\n    }\n    return undefined;\n  }\n  function doesMatch$1(value) {\n    return matchMedia(\"(forced-colors: \" + value + \")\").matches;\n  }\n  var maxValueToCheck = 100;\n  /**\n   * If the display is monochrome (e.g. black&white), the value will be ≥0 and will mean the number of bits per pixel.\n   * If the display is not monochrome, the returned value will be 0.\n   * If the browser doesn't support this feature, the returned value will be undefined.\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/CSS/@media/monochrome\n   */\n  function getMonochromeDepth() {\n    if (!matchMedia('(min-monochrome: 0)').matches) {\n      // The media feature isn't supported by the browser\n      return undefined;\n    }\n    // A variation of binary search algorithm can be used here.\n    // But since expected values are very small (≤10), there is no sense in adding the complexity.\n    for (var i = 0; i <= maxValueToCheck; ++i) {\n      if (matchMedia(\"(max-monochrome: \" + i + \")\").matches) {\n        return i;\n      }\n    }\n    throw new Error('Too high value');\n  }\n\n  /**\n   * @see https://www.w3.org/TR/mediaqueries-5/#prefers-contrast\n   * @see https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-contrast\n   */\n  function getContrastPreference() {\n    if (doesMatch$2('no-preference')) {\n      return 0 /* None */;\n    }\n    // The sources contradict on the keywords. Probably 'high' and 'low' will never be implemented.\n    // Need to check it when all browsers implement the feature.\n    if (doesMatch$2('high') || doesMatch$2('more')) {\n      return 1 /* More */;\n    }\n\n    if (doesMatch$2('low') || doesMatch$2('less')) {\n      return -1 /* Less */;\n    }\n\n    if (doesMatch$2('forced')) {\n      return 10 /* ForcedColors */;\n    }\n\n    return undefined;\n  }\n  function doesMatch$2(value) {\n    return matchMedia(\"(prefers-contrast: \" + value + \")\").matches;\n  }\n\n  /**\n   * @see https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion\n   */\n  function isMotionReduced() {\n    if (doesMatch$3('reduce')) {\n      return true;\n    }\n    if (doesMatch$3('no-preference')) {\n      return false;\n    }\n    return undefined;\n  }\n  function doesMatch$3(value) {\n    return matchMedia(\"(prefers-reduced-motion: \" + value + \")\").matches;\n  }\n\n  /**\n   * @see https://www.w3.org/TR/mediaqueries-5/#dynamic-range\n   */\n  function isHDR() {\n    if (doesMatch$4('high')) {\n      return true;\n    }\n    if (doesMatch$4('standard')) {\n      return false;\n    }\n    return undefined;\n  }\n  function doesMatch$4(value) {\n    return matchMedia(\"(dynamic-range: \" + value + \")\").matches;\n  }\n  var M = Math; // To reduce the minified code size\n  var fallbackFn = function () {\n    return 0;\n  };\n  /**\n   * @see https://gitlab.torproject.org/legacy/trac/-/issues/13018\n   * @see https://bugzilla.mozilla.org/show_bug.cgi?id=531915\n   */\n  function getMathFingerprint() {\n    // Native operations\n    var acos = M.acos || fallbackFn;\n    var acosh = M.acosh || fallbackFn;\n    var asin = M.asin || fallbackFn;\n    var asinh = M.asinh || fallbackFn;\n    var atanh = M.atanh || fallbackFn;\n    var atan = M.atan || fallbackFn;\n    var sin = M.sin || fallbackFn;\n    var sinh = M.sinh || fallbackFn;\n    var cos = M.cos || fallbackFn;\n    var cosh = M.cosh || fallbackFn;\n    var tan = M.tan || fallbackFn;\n    var tanh = M.tanh || fallbackFn;\n    var exp = M.exp || fallbackFn;\n    var expm1 = M.expm1 || fallbackFn;\n    var log1p = M.log1p || fallbackFn;\n    // Operation polyfills\n    var powPI = function (value) {\n      return M.pow(M.PI, value);\n    };\n    var acoshPf = function (value) {\n      return M.log(value + M.sqrt(value * value - 1));\n    };\n    var asinhPf = function (value) {\n      return M.log(value + M.sqrt(value * value + 1));\n    };\n    var atanhPf = function (value) {\n      return M.log((1 + value) / (1 - value)) / 2;\n    };\n    var sinhPf = function (value) {\n      return M.exp(value) - 1 / M.exp(value) / 2;\n    };\n    var coshPf = function (value) {\n      return (M.exp(value) + 1 / M.exp(value)) / 2;\n    };\n    var expm1Pf = function (value) {\n      return M.exp(value) - 1;\n    };\n    var tanhPf = function (value) {\n      return (M.exp(2 * value) - 1) / (M.exp(2 * value) + 1);\n    };\n    var log1pPf = function (value) {\n      return M.log(1 + value);\n    };\n    // Note: constant values are empirical\n    return {\n      acos: acos(0.123124234234234242),\n      acosh: acosh(1e308),\n      acoshPf: acoshPf(1e154),\n      asin: asin(0.123124234234234242),\n      asinh: asinh(1),\n      asinhPf: asinhPf(1),\n      atanh: atanh(0.5),\n      atanhPf: atanhPf(0.5),\n      atan: atan(0.5),\n      sin: sin(-1e300),\n      sinh: sinh(1),\n      sinhPf: sinhPf(1),\n      cos: cos(10.000000000123),\n      cosh: cosh(1),\n      coshPf: coshPf(1),\n      tan: tan(-1e300),\n      tanh: tanh(1),\n      tanhPf: tanhPf(1),\n      exp: exp(1),\n      expm1: expm1(1),\n      expm1Pf: expm1Pf(1),\n      log1p: log1p(10),\n      log1pPf: log1pPf(10),\n      powPI: powPI(-100)\n    };\n  }\n\n  /**\n   * We use m or w because these two characters take up the maximum width.\n   * Also there are a couple of ligatures.\n   */\n  var defaultText = 'mmMwWLliI0fiflO&1';\n  /**\n   * Settings of text blocks to measure. The keys are random but persistent words.\n   */\n  var presets = {\n    /**\n     * The default font. User can change it in desktop Chrome, desktop Firefox, IE 11,\n     * Android Chrome (but only when the size is ≥ than the default) and Android Firefox.\n     */\n    default: [],\n    /** OS font on macOS. User can change its size and weight. Applies after Safari restart. */\n    apple: [{\n      font: '-apple-system-body'\n    }],\n    /** User can change it in desktop Chrome and desktop Firefox. */\n    serif: [{\n      fontFamily: 'serif'\n    }],\n    /** User can change it in desktop Chrome and desktop Firefox. */\n    sans: [{\n      fontFamily: 'sans-serif'\n    }],\n    /** User can change it in desktop Chrome and desktop Firefox. */\n    mono: [{\n      fontFamily: 'monospace'\n    }],\n    /**\n     * Check the smallest allowed font size. User can change it in desktop Chrome, desktop Firefox and desktop Safari.\n     * The height can be 0 in Chrome on a retina display.\n     */\n    min: [{\n      fontSize: '1px'\n    }],\n    /** Tells one OS from another in desktop Chrome. */\n    system: [{\n      fontFamily: 'system-ui'\n    }]\n  };\n  /**\n   * The result is a dictionary of the width of the text samples.\n   * Heights aren't included because they give no extra entropy and are unstable.\n   *\n   * The result is very stable in IE 11, Edge 18 and Safari 14.\n   * The result changes when the OS pixel density changes in Chromium 87. The real pixel density is required to solve,\n   * but seems like it's impossible: https://stackoverflow.com/q/1713771/1118709.\n   * The \"min\" and the \"mono\" (only on Windows) value may change when the page is zoomed in Firefox 87.\n   */\n  function getFontPreferences() {\n    return withNaturalFonts(function (document, container) {\n      var elements = {};\n      var sizes = {};\n      // First create all elements to measure. If the DOM steps below are done in a single cycle,\n      // browser will alternate tree modification and layout reading, that is very slow.\n      for (var _i = 0, _a = Object.keys(presets); _i < _a.length; _i++) {\n        var key = _a[_i];\n        var _b = presets[key],\n          _c = _b[0],\n          style = _c === void 0 ? {} : _c,\n          _d = _b[1],\n          text = _d === void 0 ? defaultText : _d;\n        var element = document.createElement('span');\n        element.textContent = text;\n        element.style.whiteSpace = 'nowrap';\n        for (var _e = 0, _f = Object.keys(style); _e < _f.length; _e++) {\n          var name_1 = _f[_e];\n          var value = style[name_1];\n          if (value !== undefined) {\n            element.style[name_1] = value;\n          }\n        }\n        elements[key] = element;\n        container.appendChild(document.createElement('br'));\n        container.appendChild(element);\n      }\n      // Then measure the created elements\n      for (var _g = 0, _h = Object.keys(presets); _g < _h.length; _g++) {\n        var key = _h[_g];\n        sizes[key] = elements[key].getBoundingClientRect().width;\n      }\n      return sizes;\n    });\n  }\n  /**\n   * Creates a DOM environment that provides the most natural font available, including Android OS font.\n   * Measurements of the elements are zoom-independent.\n   * Don't put a content to measure inside an absolutely positioned element.\n   */\n  function withNaturalFonts(action, containerWidthPx) {\n    if (containerWidthPx === void 0) {\n      containerWidthPx = 4000;\n    }\n    /*\n     * Requirements for Android Chrome to apply the system font size to a text inside an iframe:\n     * - The iframe mustn't have a `display: none;` style;\n     * - The text mustn't be positioned absolutely;\n     * - The text block must be wide enough.\n     *   2560px on some devices in portrait orientation for the biggest font size option (32px);\n     * - There must be much enough text to form a few lines (I don't know the exact numbers);\n     * - The text must have the `text-size-adjust: none` style. Otherwise the text will scale in \"Desktop site\" mode;\n     *\n     * Requirements for Android Firefox to apply the system font size to a text inside an iframe:\n     * - The iframe document must have a header: `<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />`.\n     *   The only way to set it is to use the `srcdoc` attribute of the iframe;\n     * - The iframe content must get loaded before adding extra content with JavaScript;\n     *\n     * https://example.com as the iframe target always inherits Android font settings so it can be used as a reference.\n     *\n     * Observations on how page zoom affects the measurements:\n     * - macOS Safari 11.1, 12.1, 13.1, 14.0: zoom reset + offsetWidth = 100% reliable;\n     * - macOS Safari 11.1, 12.1, 13.1, 14.0: zoom reset + getBoundingClientRect = 100% reliable;\n     * - macOS Safari 14.0: offsetWidth = 5% fluctuation;\n     * - macOS Safari 14.0: getBoundingClientRect = 5% fluctuation;\n     * - iOS Safari 9, 10, 11.0, 12.0: haven't found a way to zoom a page (pinch doesn't change layout);\n     * - iOS Safari 13.1, 14.0: zoom reset + offsetWidth = 100% reliable;\n     * - iOS Safari 13.1, 14.0: zoom reset + getBoundingClientRect = 100% reliable;\n     * - iOS Safari 14.0: offsetWidth = 100% reliable;\n     * - iOS Safari 14.0: getBoundingClientRect = 100% reliable;\n     * - Chrome 42, 65, 80, 87: zoom 1/devicePixelRatio + offsetWidth = 1px fluctuation;\n     * - Chrome 42, 65, 80, 87: zoom 1/devicePixelRatio + getBoundingClientRect = 100% reliable;\n     * - Chrome 87: offsetWidth = 1px fluctuation;\n     * - Chrome 87: getBoundingClientRect = 0.7px fluctuation;\n     * - Firefox 48, 51: offsetWidth = 10% fluctuation;\n     * - Firefox 48, 51: getBoundingClientRect = 10% fluctuation;\n     * - Firefox 52, 53, 57, 62, 66, 67, 68, 71, 75, 80, 84: offsetWidth = width 100% reliable, height 10% fluctuation;\n     * - Firefox 52, 53, 57, 62, 66, 67, 68, 71, 75, 80, 84: getBoundingClientRect = width 100% reliable, height 10%\n     *   fluctuation;\n     * - Android Chrome 86: haven't found a way to zoom a page (pinch doesn't change layout);\n     * - Android Firefox 84: font size in accessibility settings changes all the CSS sizes, but offsetWidth and\n     *   getBoundingClientRect keep measuring with regular units, so the size reflects the font size setting and doesn't\n     *   fluctuate;\n     * - IE 11, Edge 18: zoom 1/devicePixelRatio + offsetWidth = 100% reliable;\n     * - IE 11, Edge 18: zoom 1/devicePixelRatio + getBoundingClientRect = reflects the zoom level;\n     * - IE 11, Edge 18: offsetWidth = 100% reliable;\n     * - IE 11, Edge 18: getBoundingClientRect = 100% reliable;\n     */\n    return withIframe(function (_, iframeWindow) {\n      var iframeDocument = iframeWindow.document;\n      var iframeBody = iframeDocument.body;\n      var bodyStyle = iframeBody.style;\n      bodyStyle.width = containerWidthPx + \"px\";\n      bodyStyle.webkitTextSizeAdjust = bodyStyle.textSizeAdjust = 'none';\n      // See the big comment above\n      if (isChromium()) {\n        iframeBody.style.zoom = \"\" + 1 / iframeWindow.devicePixelRatio;\n      } else if (isWebKit()) {\n        iframeBody.style.zoom = 'reset';\n      }\n      // See the big comment above\n      var linesOfText = iframeDocument.createElement('div');\n      linesOfText.textContent = __spreadArrays(Array(containerWidthPx / 20 << 0)).map(function () {\n        return 'word';\n      }).join(' ');\n      iframeBody.appendChild(linesOfText);\n      return action(iframeDocument, iframeBody);\n    }, '<!doctype html><html><head><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">');\n  }\n\n  /**\n   * The list of entropy sources used to make visitor identifiers.\n   *\n   * This value isn't restricted by Semantic Versioning, i.e. it may be changed without bumping minor or major version of\n   * this package.\n   */\n  var sources = {\n    // READ FIRST:\n    // See https://github.com/fingerprintjs/fingerprintjs/blob/master/contributing.md#how-to-make-an-entropy-source\n    // to learn how entropy source works and how to make your own.\n    // The sources run in this exact order.\n    // The asynchronous sources are at the start to run in parallel with other sources.\n    fonts: getFonts,\n    domBlockers: getDomBlockers,\n    fontPreferences: getFontPreferences,\n    audio: getAudioFingerprint,\n    screenFrame: getRoundedScreenFrame,\n    osCpu: getOsCpu,\n    languages: getLanguages,\n    colorDepth: getColorDepth,\n    deviceMemory: getDeviceMemory,\n    screenResolution: getScreenResolution,\n    hardwareConcurrency: getHardwareConcurrency,\n    timezone: getTimezone,\n    sessionStorage: getSessionStorage,\n    localStorage: getLocalStorage,\n    indexedDB: getIndexedDB,\n    openDatabase: getOpenDatabase,\n    cpuClass: getCpuClass,\n    platform: getPlatform,\n    plugins: getPlugins,\n    canvas: getCanvasFingerprint,\n    touchSupport: getTouchSupport,\n    vendor: getVendor,\n    vendorFlavors: getVendorFlavors,\n    cookiesEnabled: areCookiesEnabled,\n    colorGamut: getColorGamut,\n    invertedColors: areColorsInverted,\n    forcedColors: areColorsForced,\n    monochrome: getMonochromeDepth,\n    contrast: getContrastPreference,\n    reducedMotion: isMotionReduced,\n    hdr: isHDR,\n    math: getMathFingerprint\n  };\n  /**\n   * Loads the built-in entropy sources.\n   * Returns a function that collects the entropy components to make the visitor identifier.\n   */\n  function loadBuiltinSources(options) {\n    return loadSources(sources, options, []);\n  }\n  var commentTemplate = '$ if upgrade to Pro: https://fpjs.dev/pro';\n  function getConfidence(components) {\n    var openConfidenceScore = getOpenConfidenceScore(components);\n    var proConfidenceScore = deriveProConfidenceScore(openConfidenceScore);\n    return {\n      score: openConfidenceScore,\n      comment: commentTemplate.replace(/\\$/g, \"\" + proConfidenceScore)\n    };\n  }\n  function getOpenConfidenceScore(components) {\n    // In order to calculate the true probability of the visitor identifier being correct, we need to know the number of\n    // website visitors (the higher the number, the less the probability because the fingerprint entropy is limited).\n    // JS agent doesn't know the number of visitors, so we can only do an approximate assessment.\n    if (isAndroid()) {\n      return 0.4;\n    }\n    // Safari (mobile and desktop)\n    if (isWebKit()) {\n      return isDesktopSafari() ? 0.5 : 0.3;\n    }\n    var platform = components.platform.value || '';\n    // Windows\n    if (/^Win/.test(platform)) {\n      // The score is greater than on macOS because of the higher variety of devices running Windows.\n      // Chrome provides more entropy than Firefox according too\n      // https://netmarketshare.com/browser-market-share.aspx?options=%7B%22filter%22%3A%7B%22%24and%22%3A%5B%7B%22platform%22%3A%7B%22%24in%22%3A%5B%22Windows%22%5D%7D%7D%5D%7D%2C%22dateLabel%22%3A%22Trend%22%2C%22attributes%22%3A%22share%22%2C%22group%22%3A%22browser%22%2C%22sort%22%3A%7B%22share%22%3A-1%7D%2C%22id%22%3A%22browsersDesktop%22%2C%22dateInterval%22%3A%22Monthly%22%2C%22dateStart%22%3A%222019-11%22%2C%22dateEnd%22%3A%222020-10%22%2C%22segments%22%3A%22-1000%22%7D\n      // So we assign the same score to them.\n      return 0.6;\n    }\n    // macOS\n    if (/^Mac/.test(platform)) {\n      // Chrome provides more entropy than Safari and Safari provides more entropy than Firefox.\n      // Chrome is more popular than Safari and Safari is more popular than Firefox according to\n      // https://netmarketshare.com/browser-market-share.aspx?options=%7B%22filter%22%3A%7B%22%24and%22%3A%5B%7B%22platform%22%3A%7B%22%24in%22%3A%5B%22Mac%20OS%22%5D%7D%7D%5D%7D%2C%22dateLabel%22%3A%22Trend%22%2C%22attributes%22%3A%22share%22%2C%22group%22%3A%22browser%22%2C%22sort%22%3A%7B%22share%22%3A-1%7D%2C%22id%22%3A%22browsersDesktop%22%2C%22dateInterval%22%3A%22Monthly%22%2C%22dateStart%22%3A%222019-11%22%2C%22dateEnd%22%3A%222020-10%22%2C%22segments%22%3A%22-1000%22%7D\n      // So we assign the same score to them.\n      return 0.5;\n    }\n    // Another platform, e.g. a desktop Linux. It's rare, so it should be pretty unique.\n    return 0.7;\n  }\n  function deriveProConfidenceScore(openConfidenceScore) {\n    return round(0.99 + 0.01 * openConfidenceScore, 0.0001);\n  }\n  function componentsToCanonicalString(components) {\n    var result = '';\n    for (var _i = 0, _a = Object.keys(components).sort(); _i < _a.length; _i++) {\n      var componentKey = _a[_i];\n      var component = components[componentKey];\n      var value = component.error ? 'error' : JSON.stringify(component.value);\n      result += \"\" + (result ? '|' : '') + componentKey.replace(/([:|\\\\])/g, '\\\\$1') + \":\" + value;\n    }\n    return result;\n  }\n  function componentsToDebugString(components) {\n    return JSON.stringify(components, function (_key, value) {\n      if (value instanceof Error) {\n        return errorToObject(value);\n      }\n      return value;\n    }, 2);\n  }\n  function hashComponents(components) {\n    return x64hash128(componentsToCanonicalString(components));\n  }\n  /**\n   * Makes a GetResult implementation that calculates the visitor id hash on demand.\n   * Designed for optimisation.\n   */\n  function makeLazyGetResult(components) {\n    var visitorIdCache;\n    // This function runs very fast, so there is no need to make it lazy\n    var confidence = getConfidence(components);\n    // A plain class isn't used because its getters and setters aren't enumerable.\n    return {\n      get visitorId() {\n        if (visitorIdCache === undefined) {\n          visitorIdCache = hashComponents(this.components);\n        }\n        return visitorIdCache;\n      },\n      set visitorId(visitorId) {\n        visitorIdCache = visitorId;\n      },\n      confidence: confidence,\n      components: components,\n      version: version\n    };\n  }\n  /**\n   * A delay is required to ensure consistent entropy components.\n   * See https://github.com/fingerprintjs/fingerprintjs/issues/254\n   * and https://github.com/fingerprintjs/fingerprintjs/issues/307\n   * and https://github.com/fingerprintjs/fingerprintjs/commit/945633e7c5f67ae38eb0fea37349712f0e669b18\n   */\n  function prepareForSources(delayFallback) {\n    if (delayFallback === void 0) {\n      delayFallback = 50;\n    }\n    // A proper deadline is unknown. Let it be twice the fallback timeout so that both cases have the same average time.\n    return requestIdleCallbackIfAvailable(delayFallback, delayFallback * 2);\n  }\n  /**\n   * The function isn't exported from the index file to not allow to call it without `load()`.\n   * The hiding gives more freedom for future non-breaking updates.\n   *\n   * A factory function is used instead of a class to shorten the attribute names in the minified code.\n   * Native private class fields could've been used, but TypeScript doesn't allow them with `\"target\": \"es5\"`.\n   */\n  function makeAgent(getComponents, debug) {\n    var creationTime = Date.now();\n    return {\n      get: function (options) {\n        return __awaiter(this, void 0, void 0, function () {\n          var startTime, components, result;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                startTime = Date.now();\n                return [4 /*yield*/, getComponents()];\n              case 1:\n                components = _a.sent();\n                result = makeLazyGetResult(components);\n                if (debug || (options === null || options === void 0 ? void 0 : options.debug)) {\n                  // console.log is ok here because it's under a debug clause\n                  // eslint-disable-next-line no-console\n                  console.log(\"Copy the text below to get the debug data:\\n\\n```\\nversion: \" + result.version + \"\\nuserAgent: \" + navigator.userAgent + \"\\ntimeBetweenLoadAndGet: \" + (startTime - creationTime) + \"\\nvisitorId: \" + result.visitorId + \"\\ncomponents: \" + componentsToDebugString(components) + \"\\n```\");\n                }\n                return [2 /*return*/, result];\n            }\n          });\n        });\n      }\n    };\n  }\n  /**\n   * Sends an unpersonalized AJAX request to collect installation statistics\n   */\n  function monitor() {\n    // The FingerprintJS CDN (https://github.com/fingerprintjs/cdn) replaces `window.__fpjs_d_m` with `true`\n    if (window.__fpjs_d_m || Math.random() >= 0.001) {\n      return;\n    }\n    try {\n      var request = new XMLHttpRequest();\n      request.open('get', \"https://m1.openfpcdn.io/fingerprintjs/v\" + version + \"/npm-monitoring\", true);\n      request.send();\n    } catch (error) {\n      // console.error is ok here because it's an unexpected error handler\n      // eslint-disable-next-line no-console\n      console.error(error);\n    }\n  }\n  /**\n   * Builds an instance of Agent and waits a delay required for a proper operation.\n   */\n  function load(_a) {\n    var _b = _a === void 0 ? {} : _a,\n      delayFallback = _b.delayFallback,\n      debug = _b.debug,\n      _c = _b.monitoring,\n      monitoring = _c === void 0 ? true : _c;\n    return __awaiter(this, void 0, void 0, function () {\n      var getComponents;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            if (monitoring) {\n              monitor();\n            }\n            return [4 /*yield*/, prepareForSources(delayFallback)];\n          case 1:\n            _d.sent();\n            getComponents = loadBuiltinSources({\n              debug: debug\n            });\n            return [2 /*return*/, makeAgent(getComponents, debug)];\n        }\n      });\n    });\n  }\n\n  // The default export is a syntax sugar (`import * as FP from '...' → import FP from '...'`).\n  // It should contain all the public exported values.\n  var index = {\n    load: load,\n    hashComponents: hashComponents,\n    componentsToDebugString: componentsToDebugString\n  };\n  var FingerprintJS = index;\n\n  var coreTools = {\n    /**\r\n     * Получение паравметров из хэша\r\n     * @param url\r\n     * @returns {{module: string, action: string, params: string}}\r\n     */\n    getParams: function getParams(url) {\n      if (typeof url === 'undefined') {\n        url = '/mod' + location.hash.substring(1);\n      }\n      var params = url.match(/^\\/mod\\/([a-z0-9_]*)(?:\\/|)([a-z0-9_]*)(?:(\\?[^?]*)|)/);\n      var result = {\n        module: params !== null && typeof params[1] === 'string' ? params[1] : '',\n        section: params !== null && typeof params[2] === 'string' ? params[2] : '',\n        query: params !== null && typeof params[3] === 'string' ? params[3] : ''\n      };\n      result.query = coreTools.parseQuery(result.query);\n      return result;\n    },\n    /**\r\n     * @param {String} query\r\n     * @returns {{}}\r\n     */\n    parseQuery: function parseQuery(query) {\n      query = typeof query === 'string' ? query.replace(/^\\?/, '') : '';\n      var vars = query.split(\"&\");\n      var query_string = {};\n      for (var i = 0; i < vars.length; i++) {\n        var pair = vars[i].split(\"=\");\n        var key = decodeURIComponent(pair[0]);\n        var value = decodeURIComponent(pair[1]);\n        if (typeof query_string[key] === \"undefined\") {\n          query_string[key] = decodeURIComponent(value);\n        } else if (typeof query_string[key] === \"string\") {\n          query_string[key] = [query_string[key], decodeURIComponent(value)];\n        } else {\n          query_string[key].push(decodeURIComponent(value));\n        }\n      }\n      return query_string;\n    },\n    /**\r\n     *\r\n     */\n    toggleFullscreen: function toggleFullscreen() {\n      if (!document.fullscreenElement) {\n        document.documentElement.requestFullscreen();\n      } else {\n        if (document.exitFullscreen) {\n          document.exitFullscreen();\n        }\n      }\n    },\n    /**\r\n     * Форматирование числа\r\n     * @param   {number|string} numb\r\n     * @returns {string}\r\n     * @private\r\n     */\n    formatNumber: function formatNumber(numb) {\n      numb = numb.toString();\n      return numb.replace(/(\\d)(?=(\\d\\d\\d)+([^\\d]|$))/g, '$1 ');\n    },\n    /**\r\n     * Форматирование числа\r\n     * @param   {number|string} numb\r\n     * @param   {string}       divider\r\n     * @returns {string}\r\n     * @private\r\n     */\n    formatMoney: function formatMoney(numb, divider) {\n      if (isNaN(numb)) {\n        return this.formatNumber(numb);\n      } else {\n        divider = divider || ' ';\n        numb = Number(numb).toFixed(2).toString();\n        return numb.replace(/(\\d)(?=(\\d\\d\\d)+([^\\d]|$))/g, '$1' + divider);\n      }\n    },\n    /**\r\n     * Копирование\r\n     * @param text\r\n     * @returns {Promise<unknown>|Promise<void>}\r\n     */\n    clipboardText: function clipboardText(text) {\n      /**\r\n       * Старый вариант копирования\r\n       * @param text\r\n       */\n      function fallbackCopyTextToClipboard(text) {\n        return new Promise(function (resolve, reject) {\n          var textArea = document.createElement(\"textarea\");\n          textArea.value = text;\n\n          // Avoid scrolling to bottom\n          textArea.style.top = \"0\";\n          textArea.style.left = \"0\";\n          textArea.style.position = \"fixed\";\n          document.body.appendChild(textArea);\n          textArea.focus();\n          textArea.select();\n          try {\n            var successful = document.execCommand('copy');\n            document.body.removeChild(textArea);\n            if (successful) {\n              resolve();\n            } else {\n              reject();\n            }\n          } catch (err) {\n            document.body.removeChild(textArea);\n            reject();\n          }\n        });\n      }\n\n      /**\r\n       * @param text\r\n       * @returns {Promise<void>|Promise<unknown>}\r\n       */\n      function copyTextToClipboard(text) {\n        if (!navigator.clipboard) {\n          return fallbackCopyTextToClipboard(text);\n        }\n        return navigator.clipboard.writeText(text);\n      }\n      return copyTextToClipboard(text);\n    },\n    /**\r\n     * @returns {number}\r\n     * @private\r\n     */\n    hashCode: function hashCode() {\n      var string = 'A' + new Date().getTime();\n      for (var h = 0, i = 0; i < string.length; h &= h) {\n        h = 31 * h + string.charCodeAt(i++);\n      }\n      return Math.abs(h);\n    },\n    /**\r\n     * @returns Promise\r\n     */\n    getFingerprint: function getFingerprint() {\n      return FingerprintJS.load().then(function (fp) {\n        return fp.get();\n      }).then(function (result) {\n        return result.visitorId;\n      });\n    },\n    /**\r\n     * @param token\r\n     * @returns {*}\r\n     */\n    jwtDecode: function jwtDecode(token) {\n      return o(token);\n    }\n  };\n\n  var coreTokens = {\n    _refreshInterval: 0,\n    /**\r\n     *\r\n     */\n    initRefresh: function initRefresh() {\n      this.deinitRefresh();\n      this._refreshInterval = setInterval(this.refreshToken, 300000); // 5 минут\n    },\n    /**\r\n     * s\r\n     */\n    deinitRefresh: function deinitRefresh() {\n      if (this._refreshInterval) {\n        clearInterval(this._refreshInterval);\n      }\n    },\n    /**\r\n     * @param success\r\n     * @param fail\r\n     * @returns {Promise<void>}\r\n     */\n    refreshToken: function () {\n      var _refreshToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(success, fail) {\n        var refreshToken, tokenData;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              refreshToken = coreTokens.getRefreshToken();\n              tokenData = coreTools.jwtDecode(refreshToken);\n              if (!(new Date(tokenData.exp * 1000) <= new Date())) {\n                _context.next = 6;\n                break;\n              }\n              coreTokens.clearRefreshToken();\n              if (typeof fail === 'function') {\n                fail();\n              }\n              return _context.abrupt(\"return\");\n            case 6:\n              _context.t0 = $;\n              _context.t1 = coreMain.options.basePath + \"/auth/refresh\";\n              _context.t2 = JSON;\n              _context.t3 = refreshToken;\n              _context.next = 12;\n              return coreTools.getFingerprint();\n            case 12:\n              _context.t4 = _context.sent;\n              _context.t5 = {\n                refresh_token: _context.t3,\n                fp: _context.t4\n              };\n              _context.t6 = _context.t2.stringify.call(_context.t2, _context.t5);\n              _context.t7 = {\n                url: _context.t1,\n                method: \"POST\",\n                dataType: \"json\",\n                contentType: \"application/json; charset=utf-8\",\n                data: _context.t6\n              };\n              _context.t0.ajax.call(_context.t0, _context.t7).done(function (response) {\n                if (typeof response.access_token !== 'string' || typeof response.refresh_token !== 'string' || !response.access_token || !response.refresh_token) {\n                  var errorMessage = response.error_message || \"Ошибка. Попробуйте позже, либо обратитесь к администратору\";\n                  CoreUI.notice.danger(errorMessage);\n                  if (typeof fail === 'function') {\n                    fail();\n                  }\n                } else {\n                  coreTokens.setAccessToken(response.access_token);\n                  coreTokens.setRefreshToken(response.refresh_token);\n                  if (typeof success === 'function') {\n                    success();\n                  }\n                }\n              }).fail(function (response) {\n                var errorMessage = '';\n                if (response.responseJSON && response.responseJSON.error_message) {\n                  errorMessage = response.responseJSON.error_message;\n                } else {\n                  errorMessage = $(\"<div>\" + response.responseText + \"</div>\").text();\n                }\n                errorMessage = errorMessage || 'Ошибка. Попробуйте позже, либо обратитесь к администратору';\n                CoreUI.notice.danger(errorMessage);\n                if (typeof fail === 'function') {\n                  fail();\n                }\n              });\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      function refreshToken(_x, _x2) {\n        return _refreshToken.apply(this, arguments);\n      }\n      return refreshToken;\n    }(),\n    /**\r\n     * Получение аутентификации\r\n     * @param accessToken\r\n     * @returns {boolean}\r\n     */\n    setAccessToken: function setAccessToken(accessToken) {\n      localStorage.setItem('core3_access_token', accessToken);\n      var tokenData = coreTools.jwtDecode(coreTokens.getAccessToken());\n      var dateExpired = new Date(tokenData.exp * 1000);\n      if (dateExpired > new Date()) {\n        var expires = \"; expires=\" + dateExpired.toUTCString();\n        document.cookie = \"Core-Access-Token=\" + accessToken + expires + \"; path=/\" + coreMain.options.basePath;\n      }\n    },\n    /**\r\n     * Получение аутентификации\r\n     * @param refreshToken\r\n     * @returns {boolean}\r\n     */\n    setRefreshToken: function setRefreshToken(refreshToken) {\n      localStorage.setItem('core3_refresh_token', refreshToken);\n    },\n    /**\r\n     * Получение аутентификации\r\n     * @returns {String|boolean}\r\n     */\n    getAccessToken: function getAccessToken() {\n      var authToken = localStorage.getItem('core3_access_token');\n      if (!authToken) {\n        coreTokens.clearAccessToken();\n        authToken = false;\n      }\n      return authToken;\n    },\n    /**\r\n     * Получение аутентификации\r\n     * @returns {String|boolean}\r\n     */\n    getRefreshToken: function getRefreshToken() {\n      var refreshToken = localStorage.getItem('core3_refresh_token');\n      if (!refreshToken) {\n        coreTokens.clearRefreshToken();\n        refreshToken = false;\n      }\n      return refreshToken;\n    },\n    /**\r\n     * Очистка аутентификации\r\n     */\n    clearAccessToken: function clearAccessToken() {\n      localStorage.removeItem('core3_access_token');\n      document.cookie = 'Core-Access-Token=; Path=/' + coreMain.options.basePath + '; Expires=Thu, 01 Jan 1970 00:00:01 GMT;';\n    },\n    /**\r\n     * Очистка аутентификации\r\n     */\n    clearRefreshToken: function clearRefreshToken() {\n      localStorage.removeItem('core3_refresh_token');\n    }\n  };\n\n  var tpl = Object.create(null);\n  tpl['auth/main.html'] = '<div class=\"container container-login\" style=\"display: none\"> <div class=\"mdc-card\"> <div class=\"mdc-card__content\"> <img src=\"\" alt=\"logo\" class=\"logo\" style=\"display: none\"> <form class=\"mb-5\" novalidate> <span class=\"text-danger\"></span> <div class=\"form-controls mb-5\"> <div class=\"mb-3 text-start\"> <label class=\"form-label\" for=\"auth-login\">Логин или Email</label> <div class=\"control-icon position-relative\"> <input type=\"text\" name=\"login\" class=\"form-control\" id=\"auth-login\" required> <i class=\"bi bi-person-fill\"></i> </div> </div> <div class=\"mb-5 text-start\"> <label class=\"form-label\" for=\"auth-password\">Пароль</label> <div class=\"control-icon position-relative\"> <input type=\"password\" name=\"password\" class=\"form-control\" id=\"auth-password\" required> <i class=\"bi bi-shield-lock\"></i> </div> </div> <button class=\"btn btn-primary w-100 py-2\" type=\"submit\">Войти</button> </div> </form> <div class=\"links-container\"> <a class=\"install-button\" style=\"display: none\">Установить</a> <a href=\"#/registration\" class=\"reg-button\">Регистрация</a> </div> </div> </div> </div> <div class=\"container container-registration\" style=\"display: none\"> <div class=\"mdc-card\"> <div class=\"mdc-card__content\"> <img src=\"\" alt=\"logo\" class=\"logo\" style=\"display: none\"> <p class=\"mdc-typography--headline5\">Регистрация</p> <div class=\"text-danger mdc-typography--subtitle2\"></div> <div class=\"text-success mdc-typography--subtitle2\"></div> <form class=\"mb-5\" novalidate> <div class=\"form-controls mb-5\"> <div class=\"mb-3 text-start\"> <label class=\"form-label\" for=\"registration-name\">Имя</label> <input type=\"text\" name=\"name\" class=\"form-control\" id=\"registration-name\" required> </div> <div class=\"mb-3 text-start\"> <label class=\"form-label\" for=\"registration-email\">Email</label> <input type=\"email\" name=\"email\" class=\"form-control\" id=\"registration-email\" required> </div> <div class=\"mb-3 text-start\"> <label class=\"form-label\" for=\"registration-pass\">Пароль</label> <input type=\"password\" name=\"password\" class=\"form-control\" id=\"registration-pass\" required> </div> <div class=\"mb-5 text-start\"> <label class=\"form-label\" for=\"registration-pass2\">Пароль еще раз</label> <input type=\"password\" class=\"form-control\" id=\"registration-pass2\" required> </div> <button class=\"btn btn-primary w-100 py-2\" type=\"submit\">Зарегистрироваться</button> </div> </form> <div class=\"links-container\"> <a class=\"install-button\" style=\"display: none\">Установить</a> <a href=\"#\" class=\"login-button\">Войти</a> </div> </div> </div> </div>';\n  tpl['menu/loader.html'] = '<div id=\"loader\"> <div role=\"progressbar\" class=\"mdc-linear-progress loader-progress\" aria-label=\"Example Progress Bar\" aria-valuemin=\"0\" aria-valuemax=\"1\" aria-valuenow=\"0\"> <div class=\"mdc-linear-progress__buffer\"> <div class=\"mdc-linear-progress__buffer-bar\"></div> <div class=\"mdc-linear-progress__buffer-dots\"></div> </div> <div class=\"mdc-linear-progress__bar mdc-linear-progress__primary-bar\"> <span class=\"mdc-linear-progress__bar-inner\"></span> </div> <div class=\"mdc-linear-progress__bar mdc-linear-progress__secondary-bar\"> <span class=\"mdc-linear-progress__bar-inner\"></span> </div> </div> <div class=\"loader-block\"></div> </div>';\n  tpl['menu/main.html'] = '<header class=\"mdc-top-app-bar mdc-top-app-bar--fixed app-bar\"> <div class=\"mdc-top-app-bar__row\"> <section class=\"mdc-top-app-bar__section mdc-top-app-bar__section--align-start\"> <button class=\"mdc-ripple-surface open-menu\"><i class=\"fa-solid fa-bars\"></i></button> <div class=\"header-title-container\"> <span class=\"mdc-top-app-bar__title\"></span> <span class=\"mdc-top-app-bar__subtitle\"></span> </div> </section> <section class=\"mdc-top-app-bar__section mdc-top-app-bar__section--align-end\" role=\"toolbar\"></section> </div> </header> <aside class=\"menu-drawer\"> <div class=\"menu-drawer__content\"> <div class=\"menu-drawer__header\"> <a class=\"module-home\" href=\"#/\"> <span class=\"fa-solid fa-house\"></span> <h3 class=\"system-title\"></h3> </a> </div> <ul class=\"menu-list level-1\"></ul> </div> </aside> <div class=\"menu-drawer-scrim\"></div> <div class=\"menu-drawer-swipe\"></div> <div class=\"menu-drawer-app\"> <main class=\"main-content\"> <div class=\"main-wrapper\"></div> </main> </div>';\n  tpl['menu/module.html'] = '<li class=\"menu-list-item core-module core-module-<%= module.name %> <% if (module.sections && module.sections.length > 0) { %>menu-item-nested<% } %>\"> <div class=\"item-control\"> <a href=\"#/<%= module.name %>/<%= module.index %>\" class=\"mdc-ripple-surface\" data-module=\"<%= module.name %>\" data-section=\"<%= module.index %>\"> <% if (module.icon) { %> <i class=\"<%= module.icon %>\"></i> <% } else { %> <span class=\"module-icon-letter\"><%= module.title.trim().substring(0, 1) %></span> <% } %> <span class=\"menu-list-item__text\"><%= module.title %></span> </a> <% if (module.sections && module.sections.length > 0) { %> <button class=\"menu-icon-button mdc-ripple-surface\"><i class=\"fa-solid fa-sort-down\"></i></button> <% } %> </div> <ul class=\"menu-list level-2\"> <li class=\"menu-list-item core-module-section-index\"> <a href=\"#/<%= module.name %>/<%= module.index %>\" class=\"mdc-ripple-surface\" data-module=\"<%= module.name %>\" data-section=\"<%= module.index %>\"> <%= module.title %> </a> </li> <% if (module.sections && module.sections.length > 0) { %> <% module.sections.forEach(function(section) { %> <li class=\"menu-list-item core-module-section core-module-<%= module.name %>-<%= section.name %>\"> <a href=\"#/<%= module.name %>/<%= section.name %>\" class=\"mdc-ripple-surface\" data-module=\"<%= module.name %>\" data-section=\"<%= section.name %>\"> <span class=\"menu-list-item__text\"><%= section.title %></span> </a> </li> <% }); %> <% } %> </ul> </li>';\n  tpl['menu/navbar.html'] = '<ul class=\"navbar-nav\"> <li class=\"nav-item dropdown cabinet-user\"> <button class=\"btn btn-link text-dark dropdown-toggle d-flex align-items-center\" type=\"button\" data-bs-toggle=\"dropdown\"> <% if (user.avatar) { %> <img src=\"<%= user.avatar %>\" alt=\"avatar\" class=\"rounded-circle border\" loading=\"lazy\"/> <% } else { %> <i class=\"fa-solid fa-circle-user\"></i> <% } %> </button> <ul class=\"dropdown-menu shadow\"> <li class=\"cabinet-user-info\"> <b class=\"cabinet-user-name\"><%= user.name %></b><br> <span class=\"cabinet-user-login\"><%= user.login %></span> </li> <li> <hr class=\"dropdown-divider\"/> </li> <li> <a class=\"dropdown-item menu-logout\" href=\"#\"> <i class=\"fa-solid fa-arrow-right-from-bracket\"></i> Выйти </a> </li> </ul> </li> </ul>';\n  tpl['menu/preloader.html'] = '<div id=\"preloader\"> <div class=\"loading-lock\"></div> <div class=\"loading-block\"> <div class=\"spinner-border text-secondary\"> <span class=\"visually-hidden\"></span> </div> <div class=\"loading-text\"><%= text %></div> </div> </div>';\n\n  function commonjsRequire(path) {\n  \tthrow new Error('Could not dynamically require \"' + path + '\". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');\n  }\n\n  var ejs_min = {exports: {}};\n\n  ejs_min.exports;\n  (function (module, exports) {\n    (function (f) {\n      {\n        module.exports = f();\n      }\n    })(function () {\n      return function () {\n        function r(e, n, t) {\n          function o(i, f) {\n            if (!n[i]) {\n              if (!e[i]) {\n                var c = \"function\" == typeof commonjsRequire && commonjsRequire;\n                if (!f && c) return c(i, !0);\n                if (u) return u(i, !0);\n                var a = new Error(\"Cannot find module '\" + i + \"'\");\n                throw a.code = \"MODULE_NOT_FOUND\", a;\n              }\n              var p = n[i] = {\n                exports: {}\n              };\n              e[i][0].call(p.exports, function (r) {\n                var n = e[i][1][r];\n                return o(n || r);\n              }, p, p.exports, r, e, n, t);\n            }\n            return n[i].exports;\n          }\n          for (var u = \"function\" == typeof commonjsRequire && commonjsRequire, i = 0; i < t.length; i++) o(t[i]);\n          return o;\n        }\n        return r;\n      }()({\n        1: [function (require, module, exports) {\n\n          var fs = require(\"fs\");\n          var path = require(\"path\");\n          var utils = require(\"./utils\");\n          var scopeOptionWarned = false;\n          var _VERSION_STRING = require(\"../package.json\").version;\n          var _DEFAULT_OPEN_DELIMITER = \"<\";\n          var _DEFAULT_CLOSE_DELIMITER = \">\";\n          var _DEFAULT_DELIMITER = \"%\";\n          var _DEFAULT_LOCALS_NAME = \"locals\";\n          var _NAME = \"ejs\";\n          var _REGEX_STRING = \"(<%%|%%>|<%=|<%-|<%_|<%#|<%|%>|-%>|_%>)\";\n          var _OPTS_PASSABLE_WITH_DATA = [\"delimiter\", \"scope\", \"context\", \"debug\", \"compileDebug\", \"client\", \"_with\", \"rmWhitespace\", \"strict\", \"filename\", \"async\"];\n          var _OPTS_PASSABLE_WITH_DATA_EXPRESS = _OPTS_PASSABLE_WITH_DATA.concat(\"cache\");\n          var _BOM = /^\\uFEFF/;\n          var _JS_IDENTIFIER = /^[a-zA-Z_$][0-9a-zA-Z_$]*$/;\n          exports.cache = utils.cache;\n          exports.fileLoader = fs.readFileSync;\n          exports.localsName = _DEFAULT_LOCALS_NAME;\n          exports.promiseImpl = new Function(\"return this;\")().Promise;\n          exports.resolveInclude = function (name, filename, isDir) {\n            var dirname = path.dirname;\n            var extname = path.extname;\n            var resolve = path.resolve;\n            var includePath = resolve(isDir ? filename : dirname(filename), name);\n            var ext = extname(name);\n            if (!ext) {\n              includePath += \".ejs\";\n            }\n            return includePath;\n          };\n          function resolvePaths(name, paths) {\n            var filePath;\n            if (paths.some(function (v) {\n              filePath = exports.resolveInclude(name, v, true);\n              return fs.existsSync(filePath);\n            })) {\n              return filePath;\n            }\n          }\n          function getIncludePath(path, options) {\n            var includePath;\n            var filePath;\n            var views = options.views;\n            var match = /^[A-Za-z]+:\\\\|^\\//.exec(path);\n            if (match && match.length) {\n              path = path.replace(/^\\/*/, \"\");\n              if (Array.isArray(options.root)) {\n                includePath = resolvePaths(path, options.root);\n              } else {\n                includePath = exports.resolveInclude(path, options.root || \"/\", true);\n              }\n            } else {\n              if (options.filename) {\n                filePath = exports.resolveInclude(path, options.filename);\n                if (fs.existsSync(filePath)) {\n                  includePath = filePath;\n                }\n              }\n              if (!includePath && Array.isArray(views)) {\n                includePath = resolvePaths(path, views);\n              }\n              if (!includePath && typeof options.includer !== \"function\") {\n                throw new Error('Could not find the include file \"' + options.escapeFunction(path) + '\"');\n              }\n            }\n            return includePath;\n          }\n          function handleCache(options, template) {\n            var func;\n            var filename = options.filename;\n            var hasTemplate = arguments.length > 1;\n            if (options.cache) {\n              if (!filename) {\n                throw new Error(\"cache option requires a filename\");\n              }\n              func = exports.cache.get(filename);\n              if (func) {\n                return func;\n              }\n              if (!hasTemplate) {\n                template = fileLoader(filename).toString().replace(_BOM, \"\");\n              }\n            } else if (!hasTemplate) {\n              if (!filename) {\n                throw new Error(\"Internal EJS error: no file name or template \" + \"provided\");\n              }\n              template = fileLoader(filename).toString().replace(_BOM, \"\");\n            }\n            func = exports.compile(template, options);\n            if (options.cache) {\n              exports.cache.set(filename, func);\n            }\n            return func;\n          }\n          function tryHandleCache(options, data, cb) {\n            var result;\n            if (!cb) {\n              if (typeof exports.promiseImpl == \"function\") {\n                return new exports.promiseImpl(function (resolve, reject) {\n                  try {\n                    result = handleCache(options)(data);\n                    resolve(result);\n                  } catch (err) {\n                    reject(err);\n                  }\n                });\n              } else {\n                throw new Error(\"Please provide a callback function\");\n              }\n            } else {\n              try {\n                result = handleCache(options)(data);\n              } catch (err) {\n                return cb(err);\n              }\n              cb(null, result);\n            }\n          }\n          function fileLoader(filePath) {\n            return exports.fileLoader(filePath);\n          }\n          function includeFile(path, options) {\n            var opts = utils.shallowCopy(utils.createNullProtoObjWherePossible(), options);\n            opts.filename = getIncludePath(path, opts);\n            if (typeof options.includer === \"function\") {\n              var includerResult = options.includer(path, opts.filename);\n              if (includerResult) {\n                if (includerResult.filename) {\n                  opts.filename = includerResult.filename;\n                }\n                if (includerResult.template) {\n                  return handleCache(opts, includerResult.template);\n                }\n              }\n            }\n            return handleCache(opts);\n          }\n          function rethrow(err, str, flnm, lineno, esc) {\n            var lines = str.split(\"\\n\");\n            var start = Math.max(lineno - 3, 0);\n            var end = Math.min(lines.length, lineno + 3);\n            var filename = esc(flnm);\n            var context = lines.slice(start, end).map(function (line, i) {\n              var curr = i + start + 1;\n              return (curr == lineno ? \" >> \" : \"    \") + curr + \"| \" + line;\n            }).join(\"\\n\");\n            err.path = filename;\n            err.message = (filename || \"ejs\") + \":\" + lineno + \"\\n\" + context + \"\\n\\n\" + err.message;\n            throw err;\n          }\n          function stripSemi(str) {\n            return str.replace(/;(\\s*$)/, \"$1\");\n          }\n          exports.compile = function compile(template, opts) {\n            var templ;\n            if (opts && opts.scope) {\n              if (!scopeOptionWarned) {\n                console.warn(\"`scope` option is deprecated and will be removed in EJS 3\");\n                scopeOptionWarned = true;\n              }\n              if (!opts.context) {\n                opts.context = opts.scope;\n              }\n              delete opts.scope;\n            }\n            templ = new Template(template, opts);\n            return templ.compile();\n          };\n          exports.render = function (template, d, o) {\n            var data = d || utils.createNullProtoObjWherePossible();\n            var opts = o || utils.createNullProtoObjWherePossible();\n            if (arguments.length == 2) {\n              utils.shallowCopyFromList(opts, data, _OPTS_PASSABLE_WITH_DATA);\n            }\n            return handleCache(opts, template)(data);\n          };\n          exports.renderFile = function () {\n            var args = Array.prototype.slice.call(arguments);\n            var filename = args.shift();\n            var cb;\n            var opts = {\n              filename: filename\n            };\n            var data;\n            var viewOpts;\n            if (typeof arguments[arguments.length - 1] == \"function\") {\n              cb = args.pop();\n            }\n            if (args.length) {\n              data = args.shift();\n              if (args.length) {\n                utils.shallowCopy(opts, args.pop());\n              } else {\n                if (data.settings) {\n                  if (data.settings.views) {\n                    opts.views = data.settings.views;\n                  }\n                  if (data.settings[\"view cache\"]) {\n                    opts.cache = true;\n                  }\n                  viewOpts = data.settings[\"view options\"];\n                  if (viewOpts) {\n                    utils.shallowCopy(opts, viewOpts);\n                  }\n                }\n                utils.shallowCopyFromList(opts, data, _OPTS_PASSABLE_WITH_DATA_EXPRESS);\n              }\n              opts.filename = filename;\n            } else {\n              data = utils.createNullProtoObjWherePossible();\n            }\n            return tryHandleCache(opts, data, cb);\n          };\n          exports.Template = Template;\n          exports.clearCache = function () {\n            exports.cache.reset();\n          };\n          function Template(text, optsParam) {\n            var opts = utils.hasOwnOnlyObject(optsParam);\n            var options = utils.createNullProtoObjWherePossible();\n            this.templateText = text;\n            this.mode = null;\n            this.truncate = false;\n            this.currentLine = 1;\n            this.source = \"\";\n            options.client = opts.client || false;\n            options.escapeFunction = opts.escape || opts.escapeFunction || utils.escapeXML;\n            options.compileDebug = opts.compileDebug !== false;\n            options.debug = !!opts.debug;\n            options.filename = opts.filename;\n            options.openDelimiter = opts.openDelimiter || exports.openDelimiter || _DEFAULT_OPEN_DELIMITER;\n            options.closeDelimiter = opts.closeDelimiter || exports.closeDelimiter || _DEFAULT_CLOSE_DELIMITER;\n            options.delimiter = opts.delimiter || exports.delimiter || _DEFAULT_DELIMITER;\n            options.strict = opts.strict || false;\n            options.context = opts.context;\n            options.cache = opts.cache || false;\n            options.rmWhitespace = opts.rmWhitespace;\n            options.root = opts.root;\n            options.includer = opts.includer;\n            options.outputFunctionName = opts.outputFunctionName;\n            options.localsName = opts.localsName || exports.localsName || _DEFAULT_LOCALS_NAME;\n            options.views = opts.views;\n            options.async = opts.async;\n            options.destructuredLocals = opts.destructuredLocals;\n            options.legacyInclude = typeof opts.legacyInclude != \"undefined\" ? !!opts.legacyInclude : true;\n            if (options.strict) {\n              options._with = false;\n            } else {\n              options._with = typeof opts._with != \"undefined\" ? opts._with : true;\n            }\n            this.opts = options;\n            this.regex = this.createRegex();\n          }\n          Template.modes = {\n            EVAL: \"eval\",\n            ESCAPED: \"escaped\",\n            RAW: \"raw\",\n            COMMENT: \"comment\",\n            LITERAL: \"literal\"\n          };\n          Template.prototype = {\n            createRegex: function () {\n              var str = _REGEX_STRING;\n              var delim = utils.escapeRegExpChars(this.opts.delimiter);\n              var open = utils.escapeRegExpChars(this.opts.openDelimiter);\n              var close = utils.escapeRegExpChars(this.opts.closeDelimiter);\n              str = str.replace(/%/g, delim).replace(/</g, open).replace(/>/g, close);\n              return new RegExp(str);\n            },\n            compile: function () {\n              var src;\n              var fn;\n              var opts = this.opts;\n              var prepended = \"\";\n              var appended = \"\";\n              var escapeFn = opts.escapeFunction;\n              var ctor;\n              var sanitizedFilename = opts.filename ? JSON.stringify(opts.filename) : \"undefined\";\n              if (!this.source) {\n                this.generateSource();\n                prepended += '  var __output = \"\";\\n' + \"  function __append(s) { if (s !== undefined && s !== null) __output += s }\\n\";\n                if (opts.outputFunctionName) {\n                  if (!_JS_IDENTIFIER.test(opts.outputFunctionName)) {\n                    throw new Error(\"outputFunctionName is not a valid JS identifier.\");\n                  }\n                  prepended += \"  var \" + opts.outputFunctionName + \" = __append;\" + \"\\n\";\n                }\n                if (opts.localsName && !_JS_IDENTIFIER.test(opts.localsName)) {\n                  throw new Error(\"localsName is not a valid JS identifier.\");\n                }\n                if (opts.destructuredLocals && opts.destructuredLocals.length) {\n                  var destructuring = \"  var __locals = (\" + opts.localsName + \" || {}),\\n\";\n                  for (var i = 0; i < opts.destructuredLocals.length; i++) {\n                    var name = opts.destructuredLocals[i];\n                    if (!_JS_IDENTIFIER.test(name)) {\n                      throw new Error(\"destructuredLocals[\" + i + \"] is not a valid JS identifier.\");\n                    }\n                    if (i > 0) {\n                      destructuring += \",\\n  \";\n                    }\n                    destructuring += name + \" = __locals.\" + name;\n                  }\n                  prepended += destructuring + \";\\n\";\n                }\n                if (opts._with !== false) {\n                  prepended += \"  with (\" + opts.localsName + \" || {}) {\" + \"\\n\";\n                  appended += \"  }\" + \"\\n\";\n                }\n                appended += \"  return __output;\" + \"\\n\";\n                this.source = prepended + this.source + appended;\n              }\n              if (opts.compileDebug) {\n                src = \"var __line = 1\" + \"\\n\" + \"  , __lines = \" + JSON.stringify(this.templateText) + \"\\n\" + \"  , __filename = \" + sanitizedFilename + \";\" + \"\\n\" + \"try {\" + \"\\n\" + this.source + \"} catch (e) {\" + \"\\n\" + \"  rethrow(e, __lines, __filename, __line, escapeFn);\" + \"\\n\" + \"}\" + \"\\n\";\n              } else {\n                src = this.source;\n              }\n              if (opts.client) {\n                src = \"escapeFn = escapeFn || \" + escapeFn.toString() + \";\" + \"\\n\" + src;\n                if (opts.compileDebug) {\n                  src = \"rethrow = rethrow || \" + rethrow.toString() + \";\" + \"\\n\" + src;\n                }\n              }\n              if (opts.strict) {\n                src = '\"use strict\";\\n' + src;\n              }\n              if (opts.debug) {\n                console.log(src);\n              }\n              if (opts.compileDebug && opts.filename) {\n                src = src + \"\\n\" + \"//# sourceURL=\" + sanitizedFilename + \"\\n\";\n              }\n              try {\n                if (opts.async) {\n                  try {\n                    ctor = new Function(\"return (async function(){}).constructor;\")();\n                  } catch (e) {\n                    if (e instanceof SyntaxError) {\n                      throw new Error(\"This environment does not support async/await\");\n                    } else {\n                      throw e;\n                    }\n                  }\n                } else {\n                  ctor = Function;\n                }\n                fn = new ctor(opts.localsName + \", escapeFn, include, rethrow\", src);\n              } catch (e) {\n                if (e instanceof SyntaxError) {\n                  if (opts.filename) {\n                    e.message += \" in \" + opts.filename;\n                  }\n                  e.message += \" while compiling ejs\\n\\n\";\n                  e.message += \"If the above error is not helpful, you may want to try EJS-Lint:\\n\";\n                  e.message += \"https://github.com/RyanZim/EJS-Lint\";\n                  if (!opts.async) {\n                    e.message += \"\\n\";\n                    e.message += \"Or, if you meant to create an async function, pass `async: true` as an option.\";\n                  }\n                }\n                throw e;\n              }\n              var returnedFn = opts.client ? fn : function anonymous(data) {\n                var include = function (path, includeData) {\n                  var d = utils.shallowCopy(utils.createNullProtoObjWherePossible(), data);\n                  if (includeData) {\n                    d = utils.shallowCopy(d, includeData);\n                  }\n                  return includeFile(path, opts)(d);\n                };\n                return fn.apply(opts.context, [data || utils.createNullProtoObjWherePossible(), escapeFn, include, rethrow]);\n              };\n              if (opts.filename && typeof Object.defineProperty === \"function\") {\n                var filename = opts.filename;\n                var basename = path.basename(filename, path.extname(filename));\n                try {\n                  Object.defineProperty(returnedFn, \"name\", {\n                    value: basename,\n                    writable: false,\n                    enumerable: false,\n                    configurable: true\n                  });\n                } catch (e) {}\n              }\n              return returnedFn;\n            },\n            generateSource: function () {\n              var opts = this.opts;\n              if (opts.rmWhitespace) {\n                this.templateText = this.templateText.replace(/[\\r\\n]+/g, \"\\n\").replace(/^\\s+|\\s+$/gm, \"\");\n              }\n              this.templateText = this.templateText.replace(/[ \\t]*<%_/gm, \"<%_\").replace(/_%>[ \\t]*/gm, \"_%>\");\n              var self = this;\n              var matches = this.parseTemplateText();\n              var d = this.opts.delimiter;\n              var o = this.opts.openDelimiter;\n              var c = this.opts.closeDelimiter;\n              if (matches && matches.length) {\n                matches.forEach(function (line, index) {\n                  var closing;\n                  if (line.indexOf(o + d) === 0 && line.indexOf(o + d + d) !== 0) {\n                    closing = matches[index + 2];\n                    if (!(closing == d + c || closing == \"-\" + d + c || closing == \"_\" + d + c)) {\n                      throw new Error('Could not find matching close tag for \"' + line + '\".');\n                    }\n                  }\n                  self.scanLine(line);\n                });\n              }\n            },\n            parseTemplateText: function () {\n              var str = this.templateText;\n              var pat = this.regex;\n              var result = pat.exec(str);\n              var arr = [];\n              var firstPos;\n              while (result) {\n                firstPos = result.index;\n                if (firstPos !== 0) {\n                  arr.push(str.substring(0, firstPos));\n                  str = str.slice(firstPos);\n                }\n                arr.push(result[0]);\n                str = str.slice(result[0].length);\n                result = pat.exec(str);\n              }\n              if (str) {\n                arr.push(str);\n              }\n              return arr;\n            },\n            _addOutput: function (line) {\n              if (this.truncate) {\n                line = line.replace(/^(?:\\r\\n|\\r|\\n)/, \"\");\n                this.truncate = false;\n              }\n              if (!line) {\n                return line;\n              }\n              line = line.replace(/\\\\/g, \"\\\\\\\\\");\n              line = line.replace(/\\n/g, \"\\\\n\");\n              line = line.replace(/\\r/g, \"\\\\r\");\n              line = line.replace(/\"/g, '\\\\\"');\n              this.source += '    ; __append(\"' + line + '\")' + \"\\n\";\n            },\n            scanLine: function (line) {\n              var self = this;\n              var d = this.opts.delimiter;\n              var o = this.opts.openDelimiter;\n              var c = this.opts.closeDelimiter;\n              var newLineCount = 0;\n              newLineCount = line.split(\"\\n\").length - 1;\n              switch (line) {\n                case o + d:\n                case o + d + \"_\":\n                  this.mode = Template.modes.EVAL;\n                  break;\n                case o + d + \"=\":\n                  this.mode = Template.modes.ESCAPED;\n                  break;\n                case o + d + \"-\":\n                  this.mode = Template.modes.RAW;\n                  break;\n                case o + d + \"#\":\n                  this.mode = Template.modes.COMMENT;\n                  break;\n                case o + d + d:\n                  this.mode = Template.modes.LITERAL;\n                  this.source += '    ; __append(\"' + line.replace(o + d + d, o + d) + '\")' + \"\\n\";\n                  break;\n                case d + d + c:\n                  this.mode = Template.modes.LITERAL;\n                  this.source += '    ; __append(\"' + line.replace(d + d + c, d + c) + '\")' + \"\\n\";\n                  break;\n                case d + c:\n                case \"-\" + d + c:\n                case \"_\" + d + c:\n                  if (this.mode == Template.modes.LITERAL) {\n                    this._addOutput(line);\n                  }\n                  this.mode = null;\n                  this.truncate = line.indexOf(\"-\") === 0 || line.indexOf(\"_\") === 0;\n                  break;\n                default:\n                  if (this.mode) {\n                    switch (this.mode) {\n                      case Template.modes.EVAL:\n                      case Template.modes.ESCAPED:\n                      case Template.modes.RAW:\n                        if (line.lastIndexOf(\"//\") > line.lastIndexOf(\"\\n\")) {\n                          line += \"\\n\";\n                        }\n                    }\n                    switch (this.mode) {\n                      case Template.modes.EVAL:\n                        this.source += \"    ; \" + line + \"\\n\";\n                        break;\n                      case Template.modes.ESCAPED:\n                        this.source += \"    ; __append(escapeFn(\" + stripSemi(line) + \"))\" + \"\\n\";\n                        break;\n                      case Template.modes.RAW:\n                        this.source += \"    ; __append(\" + stripSemi(line) + \")\" + \"\\n\";\n                        break;\n                      case Template.modes.COMMENT:\n                        break;\n                      case Template.modes.LITERAL:\n                        this._addOutput(line);\n                        break;\n                    }\n                  } else {\n                    this._addOutput(line);\n                  }\n              }\n              if (self.opts.compileDebug && newLineCount) {\n                this.currentLine += newLineCount;\n                this.source += \"    ; __line = \" + this.currentLine + \"\\n\";\n              }\n            }\n          };\n          exports.escapeXML = utils.escapeXML;\n          exports.__express = exports.renderFile;\n          exports.VERSION = _VERSION_STRING;\n          exports.name = _NAME;\n          if (typeof window != \"undefined\") {\n            window.ejs = exports;\n          }\n        }, {\n          \"../package.json\": 6,\n          \"./utils\": 2,\n          fs: 3,\n          path: 4\n        }],\n        2: [function (require, module, exports) {\n\n          var regExpChars = /[|\\\\{}()[\\]^$+*?.]/g;\n          var hasOwnProperty = Object.prototype.hasOwnProperty;\n          var hasOwn = function (obj, key) {\n            return hasOwnProperty.apply(obj, [key]);\n          };\n          exports.escapeRegExpChars = function (string) {\n            if (!string) {\n              return \"\";\n            }\n            return String(string).replace(regExpChars, \"\\\\$&\");\n          };\n          var _ENCODE_HTML_RULES = {\n            \"&\": \"&amp;\",\n            \"<\": \"&lt;\",\n            \">\": \"&gt;\",\n            '\"': \"&#34;\",\n            \"'\": \"&#39;\"\n          };\n          var _MATCH_HTML = /[&<>'\"]/g;\n          function encode_char(c) {\n            return _ENCODE_HTML_RULES[c] || c;\n          }\n          var escapeFuncStr = \"var _ENCODE_HTML_RULES = {\\n\" + '      \"&\": \"&amp;\"\\n' + '    , \"<\": \"&lt;\"\\n' + '    , \">\": \"&gt;\"\\n' + '    , \\'\"\\': \"&#34;\"\\n' + '    , \"\\'\": \"&#39;\"\\n' + \"    }\\n\" + \"  , _MATCH_HTML = /[&<>'\\\"]/g;\\n\" + \"function encode_char(c) {\\n\" + \"  return _ENCODE_HTML_RULES[c] || c;\\n\" + \"};\\n\";\n          exports.escapeXML = function (markup) {\n            return markup == undefined ? \"\" : String(markup).replace(_MATCH_HTML, encode_char);\n          };\n          function escapeXMLToString() {\n            return Function.prototype.toString.call(this) + \";\\n\" + escapeFuncStr;\n          }\n          try {\n            if (typeof Object.defineProperty === \"function\") {\n              Object.defineProperty(exports.escapeXML, \"toString\", {\n                value: escapeXMLToString\n              });\n            } else {\n              exports.escapeXML.toString = escapeXMLToString;\n            }\n          } catch (err) {\n            console.warn(\"Unable to set escapeXML.toString (is the Function prototype frozen?)\");\n          }\n          exports.shallowCopy = function (to, from) {\n            from = from || {};\n            if (to !== null && to !== undefined) {\n              for (var p in from) {\n                if (!hasOwn(from, p)) {\n                  continue;\n                }\n                if (p === \"__proto__\" || p === \"constructor\") {\n                  continue;\n                }\n                to[p] = from[p];\n              }\n            }\n            return to;\n          };\n          exports.shallowCopyFromList = function (to, from, list) {\n            list = list || [];\n            from = from || {};\n            if (to !== null && to !== undefined) {\n              for (var i = 0; i < list.length; i++) {\n                var p = list[i];\n                if (typeof from[p] != \"undefined\") {\n                  if (!hasOwn(from, p)) {\n                    continue;\n                  }\n                  if (p === \"__proto__\" || p === \"constructor\") {\n                    continue;\n                  }\n                  to[p] = from[p];\n                }\n              }\n            }\n            return to;\n          };\n          exports.cache = {\n            _data: {},\n            set: function (key, val) {\n              this._data[key] = val;\n            },\n            get: function (key) {\n              return this._data[key];\n            },\n            remove: function (key) {\n              delete this._data[key];\n            },\n            reset: function () {\n              this._data = {};\n            }\n          };\n          exports.hyphenToCamel = function (str) {\n            return str.replace(/-[a-z]/g, function (match) {\n              return match[1].toUpperCase();\n            });\n          };\n          exports.createNullProtoObjWherePossible = function () {\n            if (typeof Object.create == \"function\") {\n              return function () {\n                return Object.create(null);\n              };\n            }\n            if (!({\n              __proto__: null\n            } instanceof Object)) {\n              return function () {\n                return {\n                  __proto__: null\n                };\n              };\n            }\n            return function () {\n              return {};\n            };\n          }();\n          exports.hasOwnOnlyObject = function (obj) {\n            var o = exports.createNullProtoObjWherePossible();\n            for (var p in obj) {\n              if (hasOwn(obj, p)) {\n                o[p] = obj[p];\n              }\n            }\n            return o;\n          };\n        }, {}],\n        3: [function (require, module, exports) {}, {}],\n        4: [function (require, module, exports) {\n          (function (process) {\n            function normalizeArray(parts, allowAboveRoot) {\n              var up = 0;\n              for (var i = parts.length - 1; i >= 0; i--) {\n                var last = parts[i];\n                if (last === \".\") {\n                  parts.splice(i, 1);\n                } else if (last === \"..\") {\n                  parts.splice(i, 1);\n                  up++;\n                } else if (up) {\n                  parts.splice(i, 1);\n                  up--;\n                }\n              }\n              if (allowAboveRoot) {\n                for (; up--; up) {\n                  parts.unshift(\"..\");\n                }\n              }\n              return parts;\n            }\n            exports.resolve = function () {\n              var resolvedPath = \"\",\n                resolvedAbsolute = false;\n              for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n                var path = i >= 0 ? arguments[i] : process.cwd();\n                if (typeof path !== \"string\") {\n                  throw new TypeError(\"Arguments to path.resolve must be strings\");\n                } else if (!path) {\n                  continue;\n                }\n                resolvedPath = path + \"/\" + resolvedPath;\n                resolvedAbsolute = path.charAt(0) === \"/\";\n              }\n              resolvedPath = normalizeArray(filter(resolvedPath.split(\"/\"), function (p) {\n                return !!p;\n              }), !resolvedAbsolute).join(\"/\");\n              return (resolvedAbsolute ? \"/\" : \"\") + resolvedPath || \".\";\n            };\n            exports.normalize = function (path) {\n              var isAbsolute = exports.isAbsolute(path),\n                trailingSlash = substr(path, -1) === \"/\";\n              path = normalizeArray(filter(path.split(\"/\"), function (p) {\n                return !!p;\n              }), !isAbsolute).join(\"/\");\n              if (!path && !isAbsolute) {\n                path = \".\";\n              }\n              if (path && trailingSlash) {\n                path += \"/\";\n              }\n              return (isAbsolute ? \"/\" : \"\") + path;\n            };\n            exports.isAbsolute = function (path) {\n              return path.charAt(0) === \"/\";\n            };\n            exports.join = function () {\n              var paths = Array.prototype.slice.call(arguments, 0);\n              return exports.normalize(filter(paths, function (p, index) {\n                if (typeof p !== \"string\") {\n                  throw new TypeError(\"Arguments to path.join must be strings\");\n                }\n                return p;\n              }).join(\"/\"));\n            };\n            exports.relative = function (from, to) {\n              from = exports.resolve(from).substr(1);\n              to = exports.resolve(to).substr(1);\n              function trim(arr) {\n                var start = 0;\n                for (; start < arr.length; start++) {\n                  if (arr[start] !== \"\") break;\n                }\n                var end = arr.length - 1;\n                for (; end >= 0; end--) {\n                  if (arr[end] !== \"\") break;\n                }\n                if (start > end) return [];\n                return arr.slice(start, end - start + 1);\n              }\n              var fromParts = trim(from.split(\"/\"));\n              var toParts = trim(to.split(\"/\"));\n              var length = Math.min(fromParts.length, toParts.length);\n              var samePartsLength = length;\n              for (var i = 0; i < length; i++) {\n                if (fromParts[i] !== toParts[i]) {\n                  samePartsLength = i;\n                  break;\n                }\n              }\n              var outputParts = [];\n              for (var i = samePartsLength; i < fromParts.length; i++) {\n                outputParts.push(\"..\");\n              }\n              outputParts = outputParts.concat(toParts.slice(samePartsLength));\n              return outputParts.join(\"/\");\n            };\n            exports.sep = \"/\";\n            exports.delimiter = \":\";\n            exports.dirname = function (path) {\n              if (typeof path !== \"string\") path = path + \"\";\n              if (path.length === 0) return \".\";\n              var code = path.charCodeAt(0);\n              var hasRoot = code === 47;\n              var end = -1;\n              var matchedSlash = true;\n              for (var i = path.length - 1; i >= 1; --i) {\n                code = path.charCodeAt(i);\n                if (code === 47) {\n                  if (!matchedSlash) {\n                    end = i;\n                    break;\n                  }\n                } else {\n                  matchedSlash = false;\n                }\n              }\n              if (end === -1) return hasRoot ? \"/\" : \".\";\n              if (hasRoot && end === 1) {\n                return \"/\";\n              }\n              return path.slice(0, end);\n            };\n            function basename(path) {\n              if (typeof path !== \"string\") path = path + \"\";\n              var start = 0;\n              var end = -1;\n              var matchedSlash = true;\n              var i;\n              for (i = path.length - 1; i >= 0; --i) {\n                if (path.charCodeAt(i) === 47) {\n                  if (!matchedSlash) {\n                    start = i + 1;\n                    break;\n                  }\n                } else if (end === -1) {\n                  matchedSlash = false;\n                  end = i + 1;\n                }\n              }\n              if (end === -1) return \"\";\n              return path.slice(start, end);\n            }\n            exports.basename = function (path, ext) {\n              var f = basename(path);\n              if (ext && f.substr(-1 * ext.length) === ext) {\n                f = f.substr(0, f.length - ext.length);\n              }\n              return f;\n            };\n            exports.extname = function (path) {\n              if (typeof path !== \"string\") path = path + \"\";\n              var startDot = -1;\n              var startPart = 0;\n              var end = -1;\n              var matchedSlash = true;\n              var preDotState = 0;\n              for (var i = path.length - 1; i >= 0; --i) {\n                var code = path.charCodeAt(i);\n                if (code === 47) {\n                  if (!matchedSlash) {\n                    startPart = i + 1;\n                    break;\n                  }\n                  continue;\n                }\n                if (end === -1) {\n                  matchedSlash = false;\n                  end = i + 1;\n                }\n                if (code === 46) {\n                  if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n                } else if (startDot !== -1) {\n                  preDotState = -1;\n                }\n              }\n              if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n                return \"\";\n              }\n              return path.slice(startDot, end);\n            };\n            function filter(xs, f) {\n              if (xs.filter) return xs.filter(f);\n              var res = [];\n              for (var i = 0; i < xs.length; i++) {\n                if (f(xs[i], i, xs)) res.push(xs[i]);\n              }\n              return res;\n            }\n            var substr = \"ab\".substr(-1) === \"b\" ? function (str, start, len) {\n              return str.substr(start, len);\n            } : function (str, start, len) {\n              if (start < 0) start = str.length + start;\n              return str.substr(start, len);\n            };\n          }).call(this, require(\"_process\"));\n        }, {\n          _process: 5\n        }],\n        5: [function (require, module, exports) {\n          var process = module.exports = {};\n          var cachedSetTimeout;\n          var cachedClearTimeout;\n          function defaultSetTimout() {\n            throw new Error(\"setTimeout has not been defined\");\n          }\n          function defaultClearTimeout() {\n            throw new Error(\"clearTimeout has not been defined\");\n          }\n          (function () {\n            try {\n              if (typeof setTimeout === \"function\") {\n                cachedSetTimeout = setTimeout;\n              } else {\n                cachedSetTimeout = defaultSetTimout;\n              }\n            } catch (e) {\n              cachedSetTimeout = defaultSetTimout;\n            }\n            try {\n              if (typeof clearTimeout === \"function\") {\n                cachedClearTimeout = clearTimeout;\n              } else {\n                cachedClearTimeout = defaultClearTimeout;\n              }\n            } catch (e) {\n              cachedClearTimeout = defaultClearTimeout;\n            }\n          })();\n          function runTimeout(fun) {\n            if (cachedSetTimeout === setTimeout) {\n              return setTimeout(fun, 0);\n            }\n            if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n              cachedSetTimeout = setTimeout;\n              return setTimeout(fun, 0);\n            }\n            try {\n              return cachedSetTimeout(fun, 0);\n            } catch (e) {\n              try {\n                return cachedSetTimeout.call(null, fun, 0);\n              } catch (e) {\n                return cachedSetTimeout.call(this, fun, 0);\n              }\n            }\n          }\n          function runClearTimeout(marker) {\n            if (cachedClearTimeout === clearTimeout) {\n              return clearTimeout(marker);\n            }\n            if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n              cachedClearTimeout = clearTimeout;\n              return clearTimeout(marker);\n            }\n            try {\n              return cachedClearTimeout(marker);\n            } catch (e) {\n              try {\n                return cachedClearTimeout.call(null, marker);\n              } catch (e) {\n                return cachedClearTimeout.call(this, marker);\n              }\n            }\n          }\n          var queue = [];\n          var draining = false;\n          var currentQueue;\n          var queueIndex = -1;\n          function cleanUpNextTick() {\n            if (!draining || !currentQueue) {\n              return;\n            }\n            draining = false;\n            if (currentQueue.length) {\n              queue = currentQueue.concat(queue);\n            } else {\n              queueIndex = -1;\n            }\n            if (queue.length) {\n              drainQueue();\n            }\n          }\n          function drainQueue() {\n            if (draining) {\n              return;\n            }\n            var timeout = runTimeout(cleanUpNextTick);\n            draining = true;\n            var len = queue.length;\n            while (len) {\n              currentQueue = queue;\n              queue = [];\n              while (++queueIndex < len) {\n                if (currentQueue) {\n                  currentQueue[queueIndex].run();\n                }\n              }\n              queueIndex = -1;\n              len = queue.length;\n            }\n            currentQueue = null;\n            draining = false;\n            runClearTimeout(timeout);\n          }\n          process.nextTick = function (fun) {\n            var args = new Array(arguments.length - 1);\n            if (arguments.length > 1) {\n              for (var i = 1; i < arguments.length; i++) {\n                args[i - 1] = arguments[i];\n              }\n            }\n            queue.push(new Item(fun, args));\n            if (queue.length === 1 && !draining) {\n              runTimeout(drainQueue);\n            }\n          };\n          function Item(fun, array) {\n            this.fun = fun;\n            this.array = array;\n          }\n          Item.prototype.run = function () {\n            this.fun.apply(null, this.array);\n          };\n          process.title = \"browser\";\n          process.browser = true;\n          process.env = {};\n          process.argv = [];\n          process.version = \"\";\n          process.versions = {};\n          function noop() {}\n          process.on = noop;\n          process.addListener = noop;\n          process.once = noop;\n          process.off = noop;\n          process.removeListener = noop;\n          process.removeAllListeners = noop;\n          process.emit = noop;\n          process.prependListener = noop;\n          process.prependOnceListener = noop;\n          process.listeners = function (name) {\n            return [];\n          };\n          process.binding = function (name) {\n            throw new Error(\"process.binding is not supported\");\n          };\n          process.cwd = function () {\n            return \"/\";\n          };\n          process.chdir = function (dir) {\n            throw new Error(\"process.chdir is not supported\");\n          };\n          process.umask = function () {\n            return 0;\n          };\n        }, {}],\n        6: [function (require, module, exports) {\n          module.exports = {\n            name: \"ejs\",\n            description: \"Embedded JavaScript templates\",\n            keywords: [\"template\", \"engine\", \"ejs\"],\n            version: \"3.1.9\",\n            author: \"Matthew Eernisse <mde@fleegix.org> (http://fleegix.org)\",\n            license: \"Apache-2.0\",\n            bin: {\n              ejs: \"./bin/cli.js\"\n            },\n            main: \"./lib/ejs.js\",\n            jsdelivr: \"ejs.min.js\",\n            unpkg: \"ejs.min.js\",\n            repository: {\n              type: \"git\",\n              url: \"git://github.com/mde/ejs.git\"\n            },\n            bugs: \"https://github.com/mde/ejs/issues\",\n            homepage: \"https://github.com/mde/ejs\",\n            dependencies: {\n              jake: \"^10.8.5\"\n            },\n            devDependencies: {\n              browserify: \"^16.5.1\",\n              eslint: \"^6.8.0\",\n              \"git-directory-deploy\": \"^1.5.1\",\n              jsdoc: \"^4.0.2\",\n              \"lru-cache\": \"^4.0.1\",\n              mocha: \"^10.2.0\",\n              \"uglify-js\": \"^3.3.16\"\n            },\n            engines: {\n              node: \">=0.10.0\"\n            },\n            scripts: {\n              test: \"npx jake test\"\n            }\n          };\n        }, {}]\n      }, {}, [1])(1);\n    });\n  })(ejs_min, ejs_min.exports);\n  ejs_min.exports;\n\n  /**\n   * Stores result from supportsCssVariables to avoid redundant processing to\n   * detect CSS custom variable support.\n   */\n  var supportsCssVariables_;\n  function supportsCssVariables(windowObj, forceRefresh) {\n    if (forceRefresh === void 0) {\n      forceRefresh = false;\n    }\n    var CSS = windowObj.CSS;\n    var supportsCssVars = supportsCssVariables_;\n    if (typeof supportsCssVariables_ === 'boolean' && !forceRefresh) {\n      return supportsCssVariables_;\n    }\n    var supportsFunctionPresent = CSS && typeof CSS.supports === 'function';\n    if (!supportsFunctionPresent) {\n      return false;\n    }\n    var explicitlySupportsCssVars = CSS.supports('--css-vars', 'yes');\n    // See: https://bugs.webkit.org/show_bug.cgi?id=154669\n    // See: README section on Safari\n    var weAreFeatureDetectingSafari10plus = CSS.supports('(--css-vars: yes)') && CSS.supports('color', '#00000000');\n    supportsCssVars = explicitlySupportsCssVars || weAreFeatureDetectingSafari10plus;\n    if (!forceRefresh) {\n      supportsCssVariables_ = supportsCssVars;\n    }\n    return supportsCssVars;\n  }\n  function getNormalizedEventCoords(evt, pageOffset, clientRect) {\n    if (!evt) {\n      return {\n        x: 0,\n        y: 0\n      };\n    }\n    var x = pageOffset.x,\n      y = pageOffset.y;\n    var documentX = x + clientRect.left;\n    var documentY = y + clientRect.top;\n    var normalizedX;\n    var normalizedY;\n    // Determine touch point relative to the ripple container.\n    if (evt.type === 'touchstart') {\n      var touchEvent = evt;\n      normalizedX = touchEvent.changedTouches[0].pageX - documentX;\n      normalizedY = touchEvent.changedTouches[0].pageY - documentY;\n    } else {\n      var mouseEvent = evt;\n      normalizedX = mouseEvent.pageX - documentX;\n      normalizedY = mouseEvent.pageY - documentY;\n    }\n    return {\n      x: normalizedX,\n      y: normalizedY\n    };\n  }\n\n  /**\n   * @license\n   * Copyright 2016 Google Inc.\n   *\n   * Permission is hereby granted, free of charge, to any person obtaining a copy\n   * of this software and associated documentation files (the \"Software\"), to deal\n   * in the Software without restriction, including without limitation the rights\n   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   * copies of the Software, and to permit persons to whom the Software is\n   * furnished to do so, subject to the following conditions:\n   *\n   * The above copyright notice and this permission notice shall be included in\n   * all copies or substantial portions of the Software.\n   *\n   * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n   * THE SOFTWARE.\n   */\n  var MDCFoundation = /** @class */function () {\n    function MDCFoundation(adapter) {\n      if (adapter === void 0) {\n        adapter = {};\n      }\n      this.adapter = adapter;\n    }\n    Object.defineProperty(MDCFoundation, \"cssClasses\", {\n      get: function () {\n        // Classes extending MDCFoundation should implement this method to return an object which exports every\n        // CSS class the foundation class needs as a property. e.g. {ACTIVE: 'mdc-component--active'}\n        return {};\n      },\n      enumerable: false,\n      configurable: true\n    });\n    Object.defineProperty(MDCFoundation, \"strings\", {\n      get: function () {\n        // Classes extending MDCFoundation should implement this method to return an object which exports all\n        // semantic strings as constants. e.g. {ARIA_ROLE: 'tablist'}\n        return {};\n      },\n      enumerable: false,\n      configurable: true\n    });\n    Object.defineProperty(MDCFoundation, \"numbers\", {\n      get: function () {\n        // Classes extending MDCFoundation should implement this method to return an object which exports all\n        // of its semantic numbers as constants. e.g. {ANIMATION_DELAY_MS: 350}\n        return {};\n      },\n      enumerable: false,\n      configurable: true\n    });\n    Object.defineProperty(MDCFoundation, \"defaultAdapter\", {\n      get: function () {\n        // Classes extending MDCFoundation may choose to implement this getter in order to provide a convenient\n        // way of viewing the necessary methods of an adapter. In the future, this could also be used for adapter\n        // validation.\n        return {};\n      },\n      enumerable: false,\n      configurable: true\n    });\n    MDCFoundation.prototype.init = function () {\n      // Subclasses should override this method to perform initialization routines (registering events, etc.)\n    };\n    MDCFoundation.prototype.destroy = function () {\n      // Subclasses should override this method to perform de-initialization routines (de-registering events, etc.)\n    };\n    return MDCFoundation;\n  }();\n\n  /**\n   * @license\n   * Copyright 2016 Google Inc.\n   *\n   * Permission is hereby granted, free of charge, to any person obtaining a copy\n   * of this software and associated documentation files (the \"Software\"), to deal\n   * in the Software without restriction, including without limitation the rights\n   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   * copies of the Software, and to permit persons to whom the Software is\n   * furnished to do so, subject to the following conditions:\n   *\n   * The above copyright notice and this permission notice shall be included in\n   * all copies or substantial portions of the Software.\n   *\n   * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n   * THE SOFTWARE.\n   */\n  var MDCComponent = /** @class */function () {\n    function MDCComponent(root, foundation) {\n      var args = [];\n      for (var _i = 2; _i < arguments.length; _i++) {\n        args[_i - 2] = arguments[_i];\n      }\n      this.root = root;\n      this.initialize.apply(this, __spreadArray([], __read(args)));\n      // Note that we initialize foundation here and not within the constructor's\n      // default param so that this.root is defined and can be used within the\n      // foundation class.\n      this.foundation = foundation === undefined ? this.getDefaultFoundation() : foundation;\n      this.foundation.init();\n      this.initialSyncWithDOM();\n    }\n    MDCComponent.attachTo = function (root) {\n      // Subclasses which extend MDCBase should provide an attachTo() method that takes a root element and\n      // returns an instantiated component with its root set to that element. Also note that in the cases of\n      // subclasses, an explicit foundation class will not have to be passed in; it will simply be initialized\n      // from getDefaultFoundation().\n      return new MDCComponent(root, new MDCFoundation({}));\n    };\n    /* istanbul ignore next: method param only exists for typing purposes; it does not need to be unit tested */\n    MDCComponent.prototype.initialize = function () {\n      // Subclasses can override this to do any additional setup work that would be considered part of a\n      // \"constructor\". Essentially, it is a hook into the parent constructor before the foundation is\n      // initialized. Any additional arguments besides root and foundation will be passed in here.\n    };\n\n    MDCComponent.prototype.getDefaultFoundation = function () {\n      // Subclasses must override this method to return a properly configured foundation class for the\n      // component.\n      throw new Error('Subclasses must override getDefaultFoundation to return a properly configured ' + 'foundation class');\n    };\n    MDCComponent.prototype.initialSyncWithDOM = function () {\n      // Subclasses should override this method if they need to perform work to synchronize with a host DOM\n      // object. An example of this would be a form control wrapper that needs to synchronize its internal state\n      // to some property or attribute of the host DOM. Please note: this is *not* the place to perform DOM\n      // reads/writes that would cause layout / paint, as this is called synchronously from within the constructor.\n    };\n    MDCComponent.prototype.destroy = function () {\n      // Subclasses may implement this method to release any resources / deregister any listeners they have\n      // attached. An example of this might be deregistering a resize event from the window object.\n      this.foundation.destroy();\n    };\n    MDCComponent.prototype.listen = function (evtType, handler, options) {\n      this.root.addEventListener(evtType, handler, options);\n    };\n    MDCComponent.prototype.unlisten = function (evtType, handler, options) {\n      this.root.removeEventListener(evtType, handler, options);\n    };\n    /**\n     * Fires a cross-browser-compatible custom event from the component root of the given type, with the given data.\n     */\n    MDCComponent.prototype.emit = function (evtType, evtData, shouldBubble) {\n      if (shouldBubble === void 0) {\n        shouldBubble = false;\n      }\n      var evt;\n      if (typeof CustomEvent === 'function') {\n        evt = new CustomEvent(evtType, {\n          bubbles: shouldBubble,\n          detail: evtData\n        });\n      } else {\n        evt = document.createEvent('CustomEvent');\n        evt.initCustomEvent(evtType, shouldBubble, false, evtData);\n      }\n      this.root.dispatchEvent(evt);\n    };\n    return MDCComponent;\n  }();\n\n  /**\n   * @license\n   * Copyright 2019 Google Inc.\n   *\n   * Permission is hereby granted, free of charge, to any person obtaining a copy\n   * of this software and associated documentation files (the \"Software\"), to deal\n   * in the Software without restriction, including without limitation the rights\n   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   * copies of the Software, and to permit persons to whom the Software is\n   * furnished to do so, subject to the following conditions:\n   *\n   * The above copyright notice and this permission notice shall be included in\n   * all copies or substantial portions of the Software.\n   *\n   * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n   * THE SOFTWARE.\n   */\n  /**\n   * Determine whether the current browser supports passive event listeners, and\n   * if so, use them.\n   */\n  function applyPassive(globalObj) {\n    if (globalObj === void 0) {\n      globalObj = window;\n    }\n    return supportsPassiveOption(globalObj) ? {\n      passive: true\n    } : false;\n  }\n  function supportsPassiveOption(globalObj) {\n    if (globalObj === void 0) {\n      globalObj = window;\n    }\n    // See\n    // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener\n    var passiveSupported = false;\n    try {\n      var options = {\n        // This function will be called when the browser\n        // attempts to access the passive property.\n        get passive() {\n          passiveSupported = true;\n          return false;\n        }\n      };\n      var handler = function () {};\n      globalObj.document.addEventListener('test', handler, options);\n      globalObj.document.removeEventListener('test', handler, options);\n    } catch (err) {\n      passiveSupported = false;\n    }\n    return passiveSupported;\n  }\n\n  /**\n   * @license\n   * Copyright 2018 Google Inc.\n   *\n   * Permission is hereby granted, free of charge, to any person obtaining a copy\n   * of this software and associated documentation files (the \"Software\"), to deal\n   * in the Software without restriction, including without limitation the rights\n   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   * copies of the Software, and to permit persons to whom the Software is\n   * furnished to do so, subject to the following conditions:\n   *\n   * The above copyright notice and this permission notice shall be included in\n   * all copies or substantial portions of the Software.\n   *\n   * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n   * THE SOFTWARE.\n   */\n  function matches(element, selector) {\n    var nativeMatches = element.matches || element.webkitMatchesSelector || element.msMatchesSelector;\n    return nativeMatches.call(element, selector);\n  }\n\n  /**\n   * @license\n   * Copyright 2016 Google Inc.\n   *\n   * Permission is hereby granted, free of charge, to any person obtaining a copy\n   * of this software and associated documentation files (the \"Software\"), to deal\n   * in the Software without restriction, including without limitation the rights\n   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   * copies of the Software, and to permit persons to whom the Software is\n   * furnished to do so, subject to the following conditions:\n   *\n   * The above copyright notice and this permission notice shall be included in\n   * all copies or substantial portions of the Software.\n   *\n   * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n   * THE SOFTWARE.\n   */\n  var cssClasses$1 = {\n    // Ripple is a special case where the \"root\" component is really a \"mixin\" of sorts,\n    // given that it's an 'upgrade' to an existing component. That being said it is the root\n    // CSS class that all other CSS classes derive from.\n    BG_FOCUSED: 'mdc-ripple-upgraded--background-focused',\n    FG_ACTIVATION: 'mdc-ripple-upgraded--foreground-activation',\n    FG_DEACTIVATION: 'mdc-ripple-upgraded--foreground-deactivation',\n    ROOT: 'mdc-ripple-upgraded',\n    UNBOUNDED: 'mdc-ripple-upgraded--unbounded'\n  };\n  var strings$1 = {\n    VAR_FG_SCALE: '--mdc-ripple-fg-scale',\n    VAR_FG_SIZE: '--mdc-ripple-fg-size',\n    VAR_FG_TRANSLATE_END: '--mdc-ripple-fg-translate-end',\n    VAR_FG_TRANSLATE_START: '--mdc-ripple-fg-translate-start',\n    VAR_LEFT: '--mdc-ripple-left',\n    VAR_TOP: '--mdc-ripple-top'\n  };\n  var numbers = {\n    DEACTIVATION_TIMEOUT_MS: 225,\n    FG_DEACTIVATION_MS: 150,\n    INITIAL_ORIGIN_SCALE: 0.6,\n    PADDING: 10,\n    TAP_DELAY_MS: 300 // Delay between touch and simulated mouse events on touch devices\n  };\n\n  /**\n   * @license\n   * Copyright 2016 Google Inc.\n   *\n   * Permission is hereby granted, free of charge, to any person obtaining a copy\n   * of this software and associated documentation files (the \"Software\"), to deal\n   * in the Software without restriction, including without limitation the rights\n   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   * copies of the Software, and to permit persons to whom the Software is\n   * furnished to do so, subject to the following conditions:\n   *\n   * The above copyright notice and this permission notice shall be included in\n   * all copies or substantial portions of the Software.\n   *\n   * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n   * THE SOFTWARE.\n   */\n  // Activation events registered on the root element of each instance for activation\n  var ACTIVATION_EVENT_TYPES = ['touchstart', 'pointerdown', 'mousedown', 'keydown'];\n  // Deactivation events registered on documentElement when a pointer-related down event occurs\n  var POINTER_DEACTIVATION_EVENT_TYPES = ['touchend', 'pointerup', 'mouseup', 'contextmenu'];\n  // simultaneous nested activations\n  var activatedTargets = [];\n  var MDCRippleFoundation = /** @class */function (_super) {\n    __extends(MDCRippleFoundation, _super);\n    function MDCRippleFoundation(adapter) {\n      var _this = _super.call(this, __assign(__assign({}, MDCRippleFoundation.defaultAdapter), adapter)) || this;\n      _this.activationAnimationHasEnded = false;\n      _this.activationTimer = 0;\n      _this.fgDeactivationRemovalTimer = 0;\n      _this.fgScale = '0';\n      _this.frame = {\n        width: 0,\n        height: 0\n      };\n      _this.initialSize = 0;\n      _this.layoutFrame = 0;\n      _this.maxRadius = 0;\n      _this.unboundedCoords = {\n        left: 0,\n        top: 0\n      };\n      _this.activationState = _this.defaultActivationState();\n      _this.activationTimerCallback = function () {\n        _this.activationAnimationHasEnded = true;\n        _this.runDeactivationUXLogicIfReady();\n      };\n      _this.activateHandler = function (e) {\n        _this.activateImpl(e);\n      };\n      _this.deactivateHandler = function () {\n        _this.deactivateImpl();\n      };\n      _this.focusHandler = function () {\n        _this.handleFocus();\n      };\n      _this.blurHandler = function () {\n        _this.handleBlur();\n      };\n      _this.resizeHandler = function () {\n        _this.layout();\n      };\n      return _this;\n    }\n    Object.defineProperty(MDCRippleFoundation, \"cssClasses\", {\n      get: function () {\n        return cssClasses$1;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    Object.defineProperty(MDCRippleFoundation, \"strings\", {\n      get: function () {\n        return strings$1;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    Object.defineProperty(MDCRippleFoundation, \"numbers\", {\n      get: function () {\n        return numbers;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    Object.defineProperty(MDCRippleFoundation, \"defaultAdapter\", {\n      get: function () {\n        return {\n          addClass: function () {\n            return undefined;\n          },\n          browserSupportsCssVars: function () {\n            return true;\n          },\n          computeBoundingRect: function () {\n            return {\n              top: 0,\n              right: 0,\n              bottom: 0,\n              left: 0,\n              width: 0,\n              height: 0\n            };\n          },\n          containsEventTarget: function () {\n            return true;\n          },\n          deregisterDocumentInteractionHandler: function () {\n            return undefined;\n          },\n          deregisterInteractionHandler: function () {\n            return undefined;\n          },\n          deregisterResizeHandler: function () {\n            return undefined;\n          },\n          getWindowPageOffset: function () {\n            return {\n              x: 0,\n              y: 0\n            };\n          },\n          isSurfaceActive: function () {\n            return true;\n          },\n          isSurfaceDisabled: function () {\n            return true;\n          },\n          isUnbounded: function () {\n            return true;\n          },\n          registerDocumentInteractionHandler: function () {\n            return undefined;\n          },\n          registerInteractionHandler: function () {\n            return undefined;\n          },\n          registerResizeHandler: function () {\n            return undefined;\n          },\n          removeClass: function () {\n            return undefined;\n          },\n          updateCssVariable: function () {\n            return undefined;\n          }\n        };\n      },\n      enumerable: false,\n      configurable: true\n    });\n    MDCRippleFoundation.prototype.init = function () {\n      var _this = this;\n      var supportsPressRipple = this.supportsPressRipple();\n      this.registerRootHandlers(supportsPressRipple);\n      if (supportsPressRipple) {\n        var _a = MDCRippleFoundation.cssClasses,\n          ROOT_1 = _a.ROOT,\n          UNBOUNDED_1 = _a.UNBOUNDED;\n        requestAnimationFrame(function () {\n          _this.adapter.addClass(ROOT_1);\n          if (_this.adapter.isUnbounded()) {\n            _this.adapter.addClass(UNBOUNDED_1);\n            // Unbounded ripples need layout logic applied immediately to set coordinates for both shade and ripple\n            _this.layoutInternal();\n          }\n        });\n      }\n    };\n    MDCRippleFoundation.prototype.destroy = function () {\n      var _this = this;\n      if (this.supportsPressRipple()) {\n        if (this.activationTimer) {\n          clearTimeout(this.activationTimer);\n          this.activationTimer = 0;\n          this.adapter.removeClass(MDCRippleFoundation.cssClasses.FG_ACTIVATION);\n        }\n        if (this.fgDeactivationRemovalTimer) {\n          clearTimeout(this.fgDeactivationRemovalTimer);\n          this.fgDeactivationRemovalTimer = 0;\n          this.adapter.removeClass(MDCRippleFoundation.cssClasses.FG_DEACTIVATION);\n        }\n        var _a = MDCRippleFoundation.cssClasses,\n          ROOT_2 = _a.ROOT,\n          UNBOUNDED_2 = _a.UNBOUNDED;\n        requestAnimationFrame(function () {\n          _this.adapter.removeClass(ROOT_2);\n          _this.adapter.removeClass(UNBOUNDED_2);\n          _this.removeCssVars();\n        });\n      }\n      this.deregisterRootHandlers();\n      this.deregisterDeactivationHandlers();\n    };\n    /**\n     * @param evt Optional event containing position information.\n     */\n    MDCRippleFoundation.prototype.activate = function (evt) {\n      this.activateImpl(evt);\n    };\n    MDCRippleFoundation.prototype.deactivate = function () {\n      this.deactivateImpl();\n    };\n    MDCRippleFoundation.prototype.layout = function () {\n      var _this = this;\n      if (this.layoutFrame) {\n        cancelAnimationFrame(this.layoutFrame);\n      }\n      this.layoutFrame = requestAnimationFrame(function () {\n        _this.layoutInternal();\n        _this.layoutFrame = 0;\n      });\n    };\n    MDCRippleFoundation.prototype.setUnbounded = function (unbounded) {\n      var UNBOUNDED = MDCRippleFoundation.cssClasses.UNBOUNDED;\n      if (unbounded) {\n        this.adapter.addClass(UNBOUNDED);\n      } else {\n        this.adapter.removeClass(UNBOUNDED);\n      }\n    };\n    MDCRippleFoundation.prototype.handleFocus = function () {\n      var _this = this;\n      requestAnimationFrame(function () {\n        return _this.adapter.addClass(MDCRippleFoundation.cssClasses.BG_FOCUSED);\n      });\n    };\n    MDCRippleFoundation.prototype.handleBlur = function () {\n      var _this = this;\n      requestAnimationFrame(function () {\n        return _this.adapter.removeClass(MDCRippleFoundation.cssClasses.BG_FOCUSED);\n      });\n    };\n    /**\n     * We compute this property so that we are not querying information about the client\n     * until the point in time where the foundation requests it. This prevents scenarios where\n     * client-side feature-detection may happen too early, such as when components are rendered on the server\n     * and then initialized at mount time on the client.\n     */\n    MDCRippleFoundation.prototype.supportsPressRipple = function () {\n      return this.adapter.browserSupportsCssVars();\n    };\n    MDCRippleFoundation.prototype.defaultActivationState = function () {\n      return {\n        activationEvent: undefined,\n        hasDeactivationUXRun: false,\n        isActivated: false,\n        isProgrammatic: false,\n        wasActivatedByPointer: false,\n        wasElementMadeActive: false\n      };\n    };\n    /**\n     * supportsPressRipple Passed from init to save a redundant function call\n     */\n    MDCRippleFoundation.prototype.registerRootHandlers = function (supportsPressRipple) {\n      var e_1, _a;\n      if (supportsPressRipple) {\n        try {\n          for (var ACTIVATION_EVENT_TYPES_1 = __values(ACTIVATION_EVENT_TYPES), ACTIVATION_EVENT_TYPES_1_1 = ACTIVATION_EVENT_TYPES_1.next(); !ACTIVATION_EVENT_TYPES_1_1.done; ACTIVATION_EVENT_TYPES_1_1 = ACTIVATION_EVENT_TYPES_1.next()) {\n            var evtType = ACTIVATION_EVENT_TYPES_1_1.value;\n            this.adapter.registerInteractionHandler(evtType, this.activateHandler);\n          }\n        } catch (e_1_1) {\n          e_1 = {\n            error: e_1_1\n          };\n        } finally {\n          try {\n            if (ACTIVATION_EVENT_TYPES_1_1 && !ACTIVATION_EVENT_TYPES_1_1.done && (_a = ACTIVATION_EVENT_TYPES_1.return)) _a.call(ACTIVATION_EVENT_TYPES_1);\n          } finally {\n            if (e_1) throw e_1.error;\n          }\n        }\n        if (this.adapter.isUnbounded()) {\n          this.adapter.registerResizeHandler(this.resizeHandler);\n        }\n      }\n      this.adapter.registerInteractionHandler('focus', this.focusHandler);\n      this.adapter.registerInteractionHandler('blur', this.blurHandler);\n    };\n    MDCRippleFoundation.prototype.registerDeactivationHandlers = function (evt) {\n      var e_2, _a;\n      if (evt.type === 'keydown') {\n        this.adapter.registerInteractionHandler('keyup', this.deactivateHandler);\n      } else {\n        try {\n          for (var POINTER_DEACTIVATION_EVENT_TYPES_1 = __values(POINTER_DEACTIVATION_EVENT_TYPES), POINTER_DEACTIVATION_EVENT_TYPES_1_1 = POINTER_DEACTIVATION_EVENT_TYPES_1.next(); !POINTER_DEACTIVATION_EVENT_TYPES_1_1.done; POINTER_DEACTIVATION_EVENT_TYPES_1_1 = POINTER_DEACTIVATION_EVENT_TYPES_1.next()) {\n            var evtType = POINTER_DEACTIVATION_EVENT_TYPES_1_1.value;\n            this.adapter.registerDocumentInteractionHandler(evtType, this.deactivateHandler);\n          }\n        } catch (e_2_1) {\n          e_2 = {\n            error: e_2_1\n          };\n        } finally {\n          try {\n            if (POINTER_DEACTIVATION_EVENT_TYPES_1_1 && !POINTER_DEACTIVATION_EVENT_TYPES_1_1.done && (_a = POINTER_DEACTIVATION_EVENT_TYPES_1.return)) _a.call(POINTER_DEACTIVATION_EVENT_TYPES_1);\n          } finally {\n            if (e_2) throw e_2.error;\n          }\n        }\n      }\n    };\n    MDCRippleFoundation.prototype.deregisterRootHandlers = function () {\n      var e_3, _a;\n      try {\n        for (var ACTIVATION_EVENT_TYPES_2 = __values(ACTIVATION_EVENT_TYPES), ACTIVATION_EVENT_TYPES_2_1 = ACTIVATION_EVENT_TYPES_2.next(); !ACTIVATION_EVENT_TYPES_2_1.done; ACTIVATION_EVENT_TYPES_2_1 = ACTIVATION_EVENT_TYPES_2.next()) {\n          var evtType = ACTIVATION_EVENT_TYPES_2_1.value;\n          this.adapter.deregisterInteractionHandler(evtType, this.activateHandler);\n        }\n      } catch (e_3_1) {\n        e_3 = {\n          error: e_3_1\n        };\n      } finally {\n        try {\n          if (ACTIVATION_EVENT_TYPES_2_1 && !ACTIVATION_EVENT_TYPES_2_1.done && (_a = ACTIVATION_EVENT_TYPES_2.return)) _a.call(ACTIVATION_EVENT_TYPES_2);\n        } finally {\n          if (e_3) throw e_3.error;\n        }\n      }\n      this.adapter.deregisterInteractionHandler('focus', this.focusHandler);\n      this.adapter.deregisterInteractionHandler('blur', this.blurHandler);\n      if (this.adapter.isUnbounded()) {\n        this.adapter.deregisterResizeHandler(this.resizeHandler);\n      }\n    };\n    MDCRippleFoundation.prototype.deregisterDeactivationHandlers = function () {\n      var e_4, _a;\n      this.adapter.deregisterInteractionHandler('keyup', this.deactivateHandler);\n      try {\n        for (var POINTER_DEACTIVATION_EVENT_TYPES_2 = __values(POINTER_DEACTIVATION_EVENT_TYPES), POINTER_DEACTIVATION_EVENT_TYPES_2_1 = POINTER_DEACTIVATION_EVENT_TYPES_2.next(); !POINTER_DEACTIVATION_EVENT_TYPES_2_1.done; POINTER_DEACTIVATION_EVENT_TYPES_2_1 = POINTER_DEACTIVATION_EVENT_TYPES_2.next()) {\n          var evtType = POINTER_DEACTIVATION_EVENT_TYPES_2_1.value;\n          this.adapter.deregisterDocumentInteractionHandler(evtType, this.deactivateHandler);\n        }\n      } catch (e_4_1) {\n        e_4 = {\n          error: e_4_1\n        };\n      } finally {\n        try {\n          if (POINTER_DEACTIVATION_EVENT_TYPES_2_1 && !POINTER_DEACTIVATION_EVENT_TYPES_2_1.done && (_a = POINTER_DEACTIVATION_EVENT_TYPES_2.return)) _a.call(POINTER_DEACTIVATION_EVENT_TYPES_2);\n        } finally {\n          if (e_4) throw e_4.error;\n        }\n      }\n    };\n    MDCRippleFoundation.prototype.removeCssVars = function () {\n      var _this = this;\n      var rippleStrings = MDCRippleFoundation.strings;\n      var keys = Object.keys(rippleStrings);\n      keys.forEach(function (key) {\n        if (key.indexOf('VAR_') === 0) {\n          _this.adapter.updateCssVariable(rippleStrings[key], null);\n        }\n      });\n    };\n    MDCRippleFoundation.prototype.activateImpl = function (evt) {\n      var _this = this;\n      if (this.adapter.isSurfaceDisabled()) {\n        return;\n      }\n      var activationState = this.activationState;\n      if (activationState.isActivated) {\n        return;\n      }\n      // Avoid reacting to follow-on events fired by touch device after an already-processed user interaction\n      var previousActivationEvent = this.previousActivationEvent;\n      var isSameInteraction = previousActivationEvent && evt !== undefined && previousActivationEvent.type !== evt.type;\n      if (isSameInteraction) {\n        return;\n      }\n      activationState.isActivated = true;\n      activationState.isProgrammatic = evt === undefined;\n      activationState.activationEvent = evt;\n      activationState.wasActivatedByPointer = activationState.isProgrammatic ? false : evt !== undefined && (evt.type === 'mousedown' || evt.type === 'touchstart' || evt.type === 'pointerdown');\n      var hasActivatedChild = evt !== undefined && activatedTargets.length > 0 && activatedTargets.some(function (target) {\n        return _this.adapter.containsEventTarget(target);\n      });\n      if (hasActivatedChild) {\n        // Immediately reset activation state, while preserving logic that prevents touch follow-on events\n        this.resetActivationState();\n        return;\n      }\n      if (evt !== undefined) {\n        activatedTargets.push(evt.target);\n        this.registerDeactivationHandlers(evt);\n      }\n      activationState.wasElementMadeActive = this.checkElementMadeActive(evt);\n      if (activationState.wasElementMadeActive) {\n        this.animateActivation();\n      }\n      requestAnimationFrame(function () {\n        // Reset array on next frame after the current event has had a chance to bubble to prevent ancestor ripples\n        activatedTargets = [];\n        if (!activationState.wasElementMadeActive && evt !== undefined && (evt.key === ' ' || evt.keyCode === 32)) {\n          // If space was pressed, try again within an rAF call to detect :active, because different UAs report\n          // active states inconsistently when they're called within event handling code:\n          // - https://bugs.chromium.org/p/chromium/issues/detail?id=635971\n          // - https://bugzilla.mozilla.org/show_bug.cgi?id=1293741\n          // We try first outside rAF to support Edge, which does not exhibit this problem, but will crash if a CSS\n          // variable is set within a rAF callback for a submit button interaction (#2241).\n          activationState.wasElementMadeActive = _this.checkElementMadeActive(evt);\n          if (activationState.wasElementMadeActive) {\n            _this.animateActivation();\n          }\n        }\n        if (!activationState.wasElementMadeActive) {\n          // Reset activation state immediately if element was not made active.\n          _this.activationState = _this.defaultActivationState();\n        }\n      });\n    };\n    MDCRippleFoundation.prototype.checkElementMadeActive = function (evt) {\n      return evt !== undefined && evt.type === 'keydown' ? this.adapter.isSurfaceActive() : true;\n    };\n    MDCRippleFoundation.prototype.animateActivation = function () {\n      var _this = this;\n      var _a = MDCRippleFoundation.strings,\n        VAR_FG_TRANSLATE_START = _a.VAR_FG_TRANSLATE_START,\n        VAR_FG_TRANSLATE_END = _a.VAR_FG_TRANSLATE_END;\n      var _b = MDCRippleFoundation.cssClasses,\n        FG_DEACTIVATION = _b.FG_DEACTIVATION,\n        FG_ACTIVATION = _b.FG_ACTIVATION;\n      var DEACTIVATION_TIMEOUT_MS = MDCRippleFoundation.numbers.DEACTIVATION_TIMEOUT_MS;\n      this.layoutInternal();\n      var translateStart = '';\n      var translateEnd = '';\n      if (!this.adapter.isUnbounded()) {\n        var _c = this.getFgTranslationCoordinates(),\n          startPoint = _c.startPoint,\n          endPoint = _c.endPoint;\n        translateStart = startPoint.x + \"px, \" + startPoint.y + \"px\";\n        translateEnd = endPoint.x + \"px, \" + endPoint.y + \"px\";\n      }\n      this.adapter.updateCssVariable(VAR_FG_TRANSLATE_START, translateStart);\n      this.adapter.updateCssVariable(VAR_FG_TRANSLATE_END, translateEnd);\n      // Cancel any ongoing activation/deactivation animations\n      clearTimeout(this.activationTimer);\n      clearTimeout(this.fgDeactivationRemovalTimer);\n      this.rmBoundedActivationClasses();\n      this.adapter.removeClass(FG_DEACTIVATION);\n      // Force layout in order to re-trigger the animation.\n      this.adapter.computeBoundingRect();\n      this.adapter.addClass(FG_ACTIVATION);\n      this.activationTimer = setTimeout(function () {\n        _this.activationTimerCallback();\n      }, DEACTIVATION_TIMEOUT_MS);\n    };\n    MDCRippleFoundation.prototype.getFgTranslationCoordinates = function () {\n      var _a = this.activationState,\n        activationEvent = _a.activationEvent,\n        wasActivatedByPointer = _a.wasActivatedByPointer;\n      var startPoint;\n      if (wasActivatedByPointer) {\n        startPoint = getNormalizedEventCoords(activationEvent, this.adapter.getWindowPageOffset(), this.adapter.computeBoundingRect());\n      } else {\n        startPoint = {\n          x: this.frame.width / 2,\n          y: this.frame.height / 2\n        };\n      }\n      // Center the element around the start point.\n      startPoint = {\n        x: startPoint.x - this.initialSize / 2,\n        y: startPoint.y - this.initialSize / 2\n      };\n      var endPoint = {\n        x: this.frame.width / 2 - this.initialSize / 2,\n        y: this.frame.height / 2 - this.initialSize / 2\n      };\n      return {\n        startPoint: startPoint,\n        endPoint: endPoint\n      };\n    };\n    MDCRippleFoundation.prototype.runDeactivationUXLogicIfReady = function () {\n      var _this = this;\n      // This method is called both when a pointing device is released, and when the activation animation ends.\n      // The deactivation animation should only run after both of those occur.\n      var FG_DEACTIVATION = MDCRippleFoundation.cssClasses.FG_DEACTIVATION;\n      var _a = this.activationState,\n        hasDeactivationUXRun = _a.hasDeactivationUXRun,\n        isActivated = _a.isActivated;\n      var activationHasEnded = hasDeactivationUXRun || !isActivated;\n      if (activationHasEnded && this.activationAnimationHasEnded) {\n        this.rmBoundedActivationClasses();\n        this.adapter.addClass(FG_DEACTIVATION);\n        this.fgDeactivationRemovalTimer = setTimeout(function () {\n          _this.adapter.removeClass(FG_DEACTIVATION);\n        }, numbers.FG_DEACTIVATION_MS);\n      }\n    };\n    MDCRippleFoundation.prototype.rmBoundedActivationClasses = function () {\n      var FG_ACTIVATION = MDCRippleFoundation.cssClasses.FG_ACTIVATION;\n      this.adapter.removeClass(FG_ACTIVATION);\n      this.activationAnimationHasEnded = false;\n      this.adapter.computeBoundingRect();\n    };\n    MDCRippleFoundation.prototype.resetActivationState = function () {\n      var _this = this;\n      this.previousActivationEvent = this.activationState.activationEvent;\n      this.activationState = this.defaultActivationState();\n      // Touch devices may fire additional events for the same interaction within a short time.\n      // Store the previous event until it's safe to assume that subsequent events are for new interactions.\n      setTimeout(function () {\n        return _this.previousActivationEvent = undefined;\n      }, MDCRippleFoundation.numbers.TAP_DELAY_MS);\n    };\n    MDCRippleFoundation.prototype.deactivateImpl = function () {\n      var _this = this;\n      var activationState = this.activationState;\n      // This can happen in scenarios such as when you have a keyup event that blurs the element.\n      if (!activationState.isActivated) {\n        return;\n      }\n      var state = __assign({}, activationState);\n      if (activationState.isProgrammatic) {\n        requestAnimationFrame(function () {\n          _this.animateDeactivation(state);\n        });\n        this.resetActivationState();\n      } else {\n        this.deregisterDeactivationHandlers();\n        requestAnimationFrame(function () {\n          _this.activationState.hasDeactivationUXRun = true;\n          _this.animateDeactivation(state);\n          _this.resetActivationState();\n        });\n      }\n    };\n    MDCRippleFoundation.prototype.animateDeactivation = function (_a) {\n      var wasActivatedByPointer = _a.wasActivatedByPointer,\n        wasElementMadeActive = _a.wasElementMadeActive;\n      if (wasActivatedByPointer || wasElementMadeActive) {\n        this.runDeactivationUXLogicIfReady();\n      }\n    };\n    MDCRippleFoundation.prototype.layoutInternal = function () {\n      var _this = this;\n      this.frame = this.adapter.computeBoundingRect();\n      var maxDim = Math.max(this.frame.height, this.frame.width);\n      // Surface diameter is treated differently for unbounded vs. bounded ripples.\n      // Unbounded ripple diameter is calculated smaller since the surface is expected to already be padded appropriately\n      // to extend the hitbox, and the ripple is expected to meet the edges of the padded hitbox (which is typically\n      // square). Bounded ripples, on the other hand, are fully expected to expand beyond the surface's longest diameter\n      // (calculated based on the diagonal plus a constant padding), and are clipped at the surface's border via\n      // `overflow: hidden`.\n      var getBoundedRadius = function () {\n        var hypotenuse = Math.sqrt(Math.pow(_this.frame.width, 2) + Math.pow(_this.frame.height, 2));\n        return hypotenuse + MDCRippleFoundation.numbers.PADDING;\n      };\n      this.maxRadius = this.adapter.isUnbounded() ? maxDim : getBoundedRadius();\n      // Ripple is sized as a fraction of the largest dimension of the surface, then scales up using a CSS scale transform\n      var initialSize = Math.floor(maxDim * MDCRippleFoundation.numbers.INITIAL_ORIGIN_SCALE);\n      // Unbounded ripple size should always be even number to equally center align.\n      if (this.adapter.isUnbounded() && initialSize % 2 !== 0) {\n        this.initialSize = initialSize - 1;\n      } else {\n        this.initialSize = initialSize;\n      }\n      this.fgScale = \"\" + this.maxRadius / this.initialSize;\n      this.updateLayoutCssVars();\n    };\n    MDCRippleFoundation.prototype.updateLayoutCssVars = function () {\n      var _a = MDCRippleFoundation.strings,\n        VAR_FG_SIZE = _a.VAR_FG_SIZE,\n        VAR_LEFT = _a.VAR_LEFT,\n        VAR_TOP = _a.VAR_TOP,\n        VAR_FG_SCALE = _a.VAR_FG_SCALE;\n      this.adapter.updateCssVariable(VAR_FG_SIZE, this.initialSize + \"px\");\n      this.adapter.updateCssVariable(VAR_FG_SCALE, this.fgScale);\n      if (this.adapter.isUnbounded()) {\n        this.unboundedCoords = {\n          left: Math.round(this.frame.width / 2 - this.initialSize / 2),\n          top: Math.round(this.frame.height / 2 - this.initialSize / 2)\n        };\n        this.adapter.updateCssVariable(VAR_LEFT, this.unboundedCoords.left + \"px\");\n        this.adapter.updateCssVariable(VAR_TOP, this.unboundedCoords.top + \"px\");\n      }\n    };\n    return MDCRippleFoundation;\n  }(MDCFoundation);\n\n  /**\n   * @license\n   * Copyright 2016 Google Inc.\n   *\n   * Permission is hereby granted, free of charge, to any person obtaining a copy\n   * of this software and associated documentation files (the \"Software\"), to deal\n   * in the Software without restriction, including without limitation the rights\n   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   * copies of the Software, and to permit persons to whom the Software is\n   * furnished to do so, subject to the following conditions:\n   *\n   * The above copyright notice and this permission notice shall be included in\n   * all copies or substantial portions of the Software.\n   *\n   * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n   * THE SOFTWARE.\n   */\n  var MDCRipple = /** @class */function (_super) {\n    __extends(MDCRipple, _super);\n    function MDCRipple() {\n      var _this = _super !== null && _super.apply(this, arguments) || this;\n      _this.disabled = false;\n      return _this;\n    }\n    MDCRipple.attachTo = function (root, opts) {\n      if (opts === void 0) {\n        opts = {\n          isUnbounded: undefined\n        };\n      }\n      var ripple = new MDCRipple(root);\n      // Only override unbounded behavior if option is explicitly specified\n      if (opts.isUnbounded !== undefined) {\n        ripple.unbounded = opts.isUnbounded;\n      }\n      return ripple;\n    };\n    MDCRipple.createAdapter = function (instance) {\n      return {\n        addClass: function (className) {\n          return instance.root.classList.add(className);\n        },\n        browserSupportsCssVars: function () {\n          return supportsCssVariables(window);\n        },\n        computeBoundingRect: function () {\n          return instance.root.getBoundingClientRect();\n        },\n        containsEventTarget: function (target) {\n          return instance.root.contains(target);\n        },\n        deregisterDocumentInteractionHandler: function (evtType, handler) {\n          return document.documentElement.removeEventListener(evtType, handler, applyPassive());\n        },\n        deregisterInteractionHandler: function (evtType, handler) {\n          return instance.root.removeEventListener(evtType, handler, applyPassive());\n        },\n        deregisterResizeHandler: function (handler) {\n          return window.removeEventListener('resize', handler);\n        },\n        getWindowPageOffset: function () {\n          return {\n            x: window.pageXOffset,\n            y: window.pageYOffset\n          };\n        },\n        isSurfaceActive: function () {\n          return matches(instance.root, ':active');\n        },\n        isSurfaceDisabled: function () {\n          return Boolean(instance.disabled);\n        },\n        isUnbounded: function () {\n          return Boolean(instance.unbounded);\n        },\n        registerDocumentInteractionHandler: function (evtType, handler) {\n          return document.documentElement.addEventListener(evtType, handler, applyPassive());\n        },\n        registerInteractionHandler: function (evtType, handler) {\n          return instance.root.addEventListener(evtType, handler, applyPassive());\n        },\n        registerResizeHandler: function (handler) {\n          return window.addEventListener('resize', handler);\n        },\n        removeClass: function (className) {\n          return instance.root.classList.remove(className);\n        },\n        updateCssVariable: function (varName, value) {\n          return instance.root.style.setProperty(varName, value);\n        }\n      };\n    };\n    Object.defineProperty(MDCRipple.prototype, \"unbounded\", {\n      get: function () {\n        return Boolean(this.isUnbounded);\n      },\n      set: function (unbounded) {\n        this.isUnbounded = Boolean(unbounded);\n        this.setUnbounded();\n      },\n      enumerable: false,\n      configurable: true\n    });\n    MDCRipple.prototype.activate = function () {\n      this.foundation.activate();\n    };\n    MDCRipple.prototype.deactivate = function () {\n      this.foundation.deactivate();\n    };\n    MDCRipple.prototype.layout = function () {\n      this.foundation.layout();\n    };\n    MDCRipple.prototype.getDefaultFoundation = function () {\n      return new MDCRippleFoundation(MDCRipple.createAdapter(this));\n    };\n    MDCRipple.prototype.initialSyncWithDOM = function () {\n      var root = this.root;\n      this.isUnbounded = 'mdcRippleIsUnbounded' in root.dataset;\n    };\n    /**\n     * Closure Compiler throws an access control error when directly accessing a\n     * protected or private property inside a getter/setter, like unbounded above.\n     * By accessing the protected property inside a method, we solve that problem.\n     * That's why this function exists.\n     */\n    MDCRipple.prototype.setUnbounded = function () {\n      this.foundation.setUnbounded(Boolean(this.isUnbounded));\n    };\n    return MDCRipple;\n  }(MDCComponent);\n\n  /**\n   * @license\n   * Copyright 2016 Google Inc.\n   *\n   * Permission is hereby granted, free of charge, to any person obtaining a copy\n   * of this software and associated documentation files (the \"Software\"), to deal\n   * in the Software without restriction, including without limitation the rights\n   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   * copies of the Software, and to permit persons to whom the Software is\n   * furnished to do so, subject to the following conditions:\n   *\n   * The above copyright notice and this permission notice shall be included in\n   * all copies or substantial portions of the Software.\n   *\n   * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n   * THE SOFTWARE.\n   */\n  var cssPropertyNameMap = {\n    animation: {\n      prefixed: '-webkit-animation',\n      standard: 'animation'\n    },\n    transform: {\n      prefixed: '-webkit-transform',\n      standard: 'transform'\n    },\n    transition: {\n      prefixed: '-webkit-transition',\n      standard: 'transition'\n    }\n  };\n  function isWindow(windowObj) {\n    return Boolean(windowObj.document) && typeof windowObj.document.createElement === 'function';\n  }\n  function getCorrectPropertyName(windowObj, cssProperty) {\n    if (isWindow(windowObj) && cssProperty in cssPropertyNameMap) {\n      var el = windowObj.document.createElement('div');\n      var _a = cssPropertyNameMap[cssProperty],\n        standard = _a.standard,\n        prefixed = _a.prefixed;\n      var isStandard = (standard in el.style);\n      return isStandard ? standard : prefixed;\n    }\n    return cssProperty;\n  }\n\n  /**\n   * @license\n   * Copyright 2017 Google Inc.\n   *\n   * Permission is hereby granted, free of charge, to any person obtaining a copy\n   * of this software and associated documentation files (the \"Software\"), to deal\n   * in the Software without restriction, including without limitation the rights\n   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   * copies of the Software, and to permit persons to whom the Software is\n   * furnished to do so, subject to the following conditions:\n   *\n   * The above copyright notice and this permission notice shall be included in\n   * all copies or substantial portions of the Software.\n   *\n   * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n   * THE SOFTWARE.\n   */\n  var cssClasses = {\n    CLOSED_CLASS: 'mdc-linear-progress--closed',\n    CLOSED_ANIMATION_OFF_CLASS: 'mdc-linear-progress--closed-animation-off',\n    INDETERMINATE_CLASS: 'mdc-linear-progress--indeterminate',\n    REVERSED_CLASS: 'mdc-linear-progress--reversed',\n    ANIMATION_READY_CLASS: 'mdc-linear-progress--animation-ready'\n  };\n  var strings = {\n    ARIA_HIDDEN: 'aria-hidden',\n    ARIA_VALUEMAX: 'aria-valuemax',\n    ARIA_VALUEMIN: 'aria-valuemin',\n    ARIA_VALUENOW: 'aria-valuenow',\n    BUFFER_BAR_SELECTOR: '.mdc-linear-progress__buffer-bar',\n    FLEX_BASIS: 'flex-basis',\n    PRIMARY_BAR_SELECTOR: '.mdc-linear-progress__primary-bar'\n  };\n  // these are percentages pulled from keyframes.scss\n  var animationDimensionPercentages = {\n    PRIMARY_HALF: .8367142,\n    PRIMARY_FULL: 2.00611057,\n    SECONDARY_QUARTER: .37651913,\n    SECONDARY_HALF: .84386165,\n    SECONDARY_FULL: 1.60277782\n  };\n\n  /**\n   * @license\n   * Copyright 2017 Google Inc.\n   *\n   * Permission is hereby granted, free of charge, to any person obtaining a copy\n   * of this software and associated documentation files (the \"Software\"), to deal\n   * in the Software without restriction, including without limitation the rights\n   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   * copies of the Software, and to permit persons to whom the Software is\n   * furnished to do so, subject to the following conditions:\n   *\n   * The above copyright notice and this permission notice shall be included in\n   * all copies or substantial portions of the Software.\n   *\n   * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n   * THE SOFTWARE.\n   */\n  var MDCLinearProgressFoundation = /** @class */function (_super) {\n    __extends(MDCLinearProgressFoundation, _super);\n    function MDCLinearProgressFoundation(adapter) {\n      var _this = _super.call(this, __assign(__assign({}, MDCLinearProgressFoundation.defaultAdapter), adapter)) || this;\n      _this.observer = null;\n      return _this;\n    }\n    Object.defineProperty(MDCLinearProgressFoundation, \"cssClasses\", {\n      get: function () {\n        return cssClasses;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    Object.defineProperty(MDCLinearProgressFoundation, \"strings\", {\n      get: function () {\n        return strings;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    Object.defineProperty(MDCLinearProgressFoundation, \"defaultAdapter\", {\n      get: function () {\n        return {\n          addClass: function () {\n            return undefined;\n          },\n          attachResizeObserver: function () {\n            return null;\n          },\n          forceLayout: function () {\n            return undefined;\n          },\n          getWidth: function () {\n            return 0;\n          },\n          hasClass: function () {\n            return false;\n          },\n          setBufferBarStyle: function () {\n            return null;\n          },\n          setPrimaryBarStyle: function () {\n            return null;\n          },\n          setStyle: function () {\n            return undefined;\n          },\n          removeAttribute: function () {\n            return undefined;\n          },\n          removeClass: function () {\n            return undefined;\n          },\n          setAttribute: function () {\n            return undefined;\n          }\n        };\n      },\n      enumerable: false,\n      configurable: true\n    });\n    MDCLinearProgressFoundation.prototype.init = function () {\n      var _this = this;\n      this.determinate = !this.adapter.hasClass(cssClasses.INDETERMINATE_CLASS);\n      this.adapter.addClass(cssClasses.ANIMATION_READY_CLASS);\n      this.progress = 0;\n      this.buffer = 1;\n      this.observer = this.adapter.attachResizeObserver(function (entries) {\n        var e_1, _a;\n        if (_this.determinate) {\n          return;\n        }\n        try {\n          for (var entries_1 = __values(entries), entries_1_1 = entries_1.next(); !entries_1_1.done; entries_1_1 = entries_1.next()) {\n            var entry = entries_1_1.value;\n            if (entry.contentRect) {\n              _this.calculateAndSetDimensions(entry.contentRect.width);\n            }\n          }\n        } catch (e_1_1) {\n          e_1 = {\n            error: e_1_1\n          };\n        } finally {\n          try {\n            if (entries_1_1 && !entries_1_1.done && (_a = entries_1.return)) _a.call(entries_1);\n          } finally {\n            if (e_1) throw e_1.error;\n          }\n        }\n      });\n      if (!this.determinate && this.observer) {\n        this.calculateAndSetDimensions(this.adapter.getWidth());\n      }\n    };\n    MDCLinearProgressFoundation.prototype.setDeterminate = function (isDeterminate) {\n      this.determinate = isDeterminate;\n      if (this.determinate) {\n        this.adapter.removeClass(cssClasses.INDETERMINATE_CLASS);\n        this.adapter.setAttribute(strings.ARIA_VALUENOW, this.progress.toString());\n        this.adapter.setAttribute(strings.ARIA_VALUEMAX, '1');\n        this.adapter.setAttribute(strings.ARIA_VALUEMIN, '0');\n        this.setPrimaryBarProgress(this.progress);\n        this.setBufferBarProgress(this.buffer);\n        return;\n      }\n      if (this.observer) {\n        this.calculateAndSetDimensions(this.adapter.getWidth());\n      }\n      this.adapter.addClass(cssClasses.INDETERMINATE_CLASS);\n      this.adapter.removeAttribute(strings.ARIA_VALUENOW);\n      this.adapter.removeAttribute(strings.ARIA_VALUEMAX);\n      this.adapter.removeAttribute(strings.ARIA_VALUEMIN);\n      this.setPrimaryBarProgress(1);\n      this.setBufferBarProgress(1);\n    };\n    MDCLinearProgressFoundation.prototype.isDeterminate = function () {\n      return this.determinate;\n    };\n    MDCLinearProgressFoundation.prototype.setProgress = function (value) {\n      this.progress = value;\n      if (this.determinate) {\n        this.setPrimaryBarProgress(value);\n        this.adapter.setAttribute(strings.ARIA_VALUENOW, value.toString());\n      }\n    };\n    MDCLinearProgressFoundation.prototype.getProgress = function () {\n      return this.progress;\n    };\n    MDCLinearProgressFoundation.prototype.setBuffer = function (value) {\n      this.buffer = value;\n      if (this.determinate) {\n        this.setBufferBarProgress(value);\n      }\n    };\n    MDCLinearProgressFoundation.prototype.getBuffer = function () {\n      return this.buffer;\n    };\n    MDCLinearProgressFoundation.prototype.open = function () {\n      this.adapter.removeClass(cssClasses.CLOSED_CLASS);\n      this.adapter.removeClass(cssClasses.CLOSED_ANIMATION_OFF_CLASS);\n      this.adapter.removeAttribute(strings.ARIA_HIDDEN);\n    };\n    MDCLinearProgressFoundation.prototype.close = function () {\n      this.adapter.addClass(cssClasses.CLOSED_CLASS);\n      this.adapter.setAttribute(strings.ARIA_HIDDEN, 'true');\n    };\n    MDCLinearProgressFoundation.prototype.isClosed = function () {\n      return this.adapter.hasClass(cssClasses.CLOSED_CLASS);\n    };\n    /**\n     * Handles the transitionend event emitted after `close()` is called and the\n     * opacity fades out. This is so that animations are removed only after the\n     * progress indicator is completely hidden.\n     */\n    MDCLinearProgressFoundation.prototype.handleTransitionEnd = function () {\n      if (this.adapter.hasClass(cssClasses.CLOSED_CLASS)) {\n        this.adapter.addClass(cssClasses.CLOSED_ANIMATION_OFF_CLASS);\n      }\n    };\n    MDCLinearProgressFoundation.prototype.destroy = function () {\n      _super.prototype.destroy.call(this);\n      if (this.observer) {\n        this.observer.disconnect();\n      }\n    };\n    MDCLinearProgressFoundation.prototype.restartAnimation = function () {\n      this.adapter.removeClass(cssClasses.ANIMATION_READY_CLASS);\n      this.adapter.forceLayout();\n      this.adapter.addClass(cssClasses.ANIMATION_READY_CLASS);\n    };\n    MDCLinearProgressFoundation.prototype.setPrimaryBarProgress = function (progressValue) {\n      var value = \"scaleX(\" + progressValue + \")\";\n      // Accessing `window` without a `typeof` check will throw on Node\n      // environments.\n      var transformProp = typeof window !== 'undefined' ? getCorrectPropertyName(window, 'transform') : 'transform';\n      this.adapter.setPrimaryBarStyle(transformProp, value);\n    };\n    MDCLinearProgressFoundation.prototype.setBufferBarProgress = function (progressValue) {\n      var value = progressValue * 100 + \"%\";\n      this.adapter.setBufferBarStyle(strings.FLEX_BASIS, value);\n    };\n    MDCLinearProgressFoundation.prototype.calculateAndSetDimensions = function (width) {\n      var primaryHalf = width * animationDimensionPercentages.PRIMARY_HALF;\n      var primaryFull = width * animationDimensionPercentages.PRIMARY_FULL;\n      var secondaryQuarter = width * animationDimensionPercentages.SECONDARY_QUARTER;\n      var secondaryHalf = width * animationDimensionPercentages.SECONDARY_HALF;\n      var secondaryFull = width * animationDimensionPercentages.SECONDARY_FULL;\n      this.adapter.setStyle('--mdc-linear-progress-primary-half', primaryHalf + \"px\");\n      this.adapter.setStyle('--mdc-linear-progress-primary-half-neg', -primaryHalf + \"px\");\n      this.adapter.setStyle('--mdc-linear-progress-primary-full', primaryFull + \"px\");\n      this.adapter.setStyle('--mdc-linear-progress-primary-full-neg', -primaryFull + \"px\");\n      this.adapter.setStyle('--mdc-linear-progress-secondary-quarter', secondaryQuarter + \"px\");\n      this.adapter.setStyle('--mdc-linear-progress-secondary-quarter-neg', -secondaryQuarter + \"px\");\n      this.adapter.setStyle('--mdc-linear-progress-secondary-half', secondaryHalf + \"px\");\n      this.adapter.setStyle('--mdc-linear-progress-secondary-half-neg', -secondaryHalf + \"px\");\n      this.adapter.setStyle('--mdc-linear-progress-secondary-full', secondaryFull + \"px\");\n      this.adapter.setStyle('--mdc-linear-progress-secondary-full-neg', -secondaryFull + \"px\");\n      // need to restart animation for custom props to apply to keyframes\n      this.restartAnimation();\n    };\n    return MDCLinearProgressFoundation;\n  }(MDCFoundation);\n\n  /**\n   * @license\n   * Copyright 2017 Google Inc.\n   *\n   * Permission is hereby granted, free of charge, to any person obtaining a copy\n   * of this software and associated documentation files (the \"Software\"), to deal\n   * in the Software without restriction, including without limitation the rights\n   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   * copies of the Software, and to permit persons to whom the Software is\n   * furnished to do so, subject to the following conditions:\n   *\n   * The above copyright notice and this permission notice shall be included in\n   * all copies or substantial portions of the Software.\n   *\n   * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n   * THE SOFTWARE.\n   */\n  var MDCLinearProgress = /** @class */function (_super) {\n    __extends(MDCLinearProgress, _super);\n    function MDCLinearProgress() {\n      return _super !== null && _super.apply(this, arguments) || this;\n    }\n    MDCLinearProgress.attachTo = function (root) {\n      return new MDCLinearProgress(root);\n    };\n    Object.defineProperty(MDCLinearProgress.prototype, \"determinate\", {\n      set: function (value) {\n        this.foundation.setDeterminate(value);\n      },\n      enumerable: false,\n      configurable: true\n    });\n    Object.defineProperty(MDCLinearProgress.prototype, \"progress\", {\n      set: function (value) {\n        this.foundation.setProgress(value);\n      },\n      enumerable: false,\n      configurable: true\n    });\n    Object.defineProperty(MDCLinearProgress.prototype, \"buffer\", {\n      set: function (value) {\n        this.foundation.setBuffer(value);\n      },\n      enumerable: false,\n      configurable: true\n    });\n    MDCLinearProgress.prototype.open = function () {\n      this.foundation.open();\n    };\n    MDCLinearProgress.prototype.close = function () {\n      this.foundation.close();\n    };\n    MDCLinearProgress.prototype.initialSyncWithDOM = function () {\n      var _this = this;\n      this.root.addEventListener('transitionend', function () {\n        _this.foundation.handleTransitionEnd();\n      });\n    };\n    MDCLinearProgress.prototype.getDefaultFoundation = function () {\n      var _this = this;\n      // DO NOT INLINE this variable. For backward compatibility, foundations take\n      // a Partial<MDCFooAdapter>. To ensure we don't accidentally omit any\n      // methods, we need a separate, strongly typed adapter variable.\n      var adapter = {\n        addClass: function (className) {\n          _this.root.classList.add(className);\n        },\n        forceLayout: function () {\n          _this.root.getBoundingClientRect();\n        },\n        setBufferBarStyle: function (styleProperty, value) {\n          var bufferBar = _this.root.querySelector(MDCLinearProgressFoundation.strings.BUFFER_BAR_SELECTOR);\n          if (bufferBar) {\n            bufferBar.style.setProperty(styleProperty, value);\n          }\n        },\n        setPrimaryBarStyle: function (styleProperty, value) {\n          var primaryBar = _this.root.querySelector(MDCLinearProgressFoundation.strings.PRIMARY_BAR_SELECTOR);\n          if (primaryBar) {\n            primaryBar.style.setProperty(styleProperty, value);\n          }\n        },\n        hasClass: function (className) {\n          return _this.root.classList.contains(className);\n        },\n        removeAttribute: function (attributeName) {\n          _this.root.removeAttribute(attributeName);\n        },\n        removeClass: function (className) {\n          _this.root.classList.remove(className);\n        },\n        setAttribute: function (attributeName, value) {\n          _this.root.setAttribute(attributeName, value);\n        },\n        setStyle: function (name, value) {\n          _this.root.style.setProperty(name, value);\n        },\n        attachResizeObserver: function (callback) {\n          var RO = window.ResizeObserver;\n          if (RO) {\n            var ro = new RO(callback);\n            ro.observe(_this.root);\n            return ro;\n          }\n          return null;\n        },\n        getWidth: function () {\n          return _this.root.offsetWidth;\n        }\n      };\n      return new MDCLinearProgressFoundation(adapter);\n    };\n    return MDCLinearProgress;\n  }(MDCComponent);\n\n  var coreMenu = {\n    _user: null,\n    _system: null,\n    _modules: null,\n    _events: {},\n    /**\n     * Получение страницы кабинета\n     * @returns {*}\n     */\n    getPageContent: function getPageContent() {\n      return tpl['menu/main.html'];\n    },\n    /**\n     * Инициализация\n     */\n    init: function init() {\n      // Нужно для первого открытия страницы\n      if (window.screen.width > 600 && localStorage.getItem('core3_drawer_toggle') === '1') {\n        $('.page-menu').addClass('drawer-toggle');\n        $('.page-menu .menu-drawer').css('transition', 'none 0s ease 0s');\n        $('.page-menu .mdc-top-app-bar').css('transition', 'none 0s ease 0s');\n      }\n      var conf = localStorage.getItem('core3_conf');\n      if (typeof conf === 'string') {\n        try {\n          conf = JSON.parse(conf);\n          if (_typeof(conf.theme) === 'object') {\n            this._setTheme(conf.theme);\n          }\n        } catch (e) {}\n      }\n      coreMenu.preloader.show();\n\n      // Инициализация кнопок\n      var buttons = document.querySelectorAll('.page-menu .mdc-button');\n      var _iterator = _createForOfIteratorHelper(buttons),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var button = _step.value;\n          new MDCRipple(button);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      coreMenu._initInstall();\n      $('.page-menu .main-content .main-wrapper').html('');\n\n      // Добавление токена при любом ajax запросе\n      $(document).ajaxSend(function (event, jqxhr, settings) {\n        if (settings.url.indexOf(settings.url) === 0) {\n          var accessToken = coreTokens.getAccessToken();\n          if (accessToken) {\n            jqxhr.setRequestHeader('Access-Token', accessToken);\n          }\n        }\n      });\n      $.ajax({\n        url: coreMain.options.basePath + '/cabinet',\n        method: \"GET\",\n        dataType: \"json\",\n        success: function success(response) {\n          if (_typeof(response.user) !== 'object' || typeof response.user.id !== 'number' || typeof response.user.login !== 'string' || typeof response.user.name !== 'string' || typeof response.user.avatar !== 'string' || _typeof(response.system) !== 'object' || typeof response.system.name !== 'string' || _typeof(response.modules) !== 'object') {\n            console.warn(response);\n            CoreUI.alert.danger('Ошибка', 'Попробуйте обновить страницу или обратитесь к администратору');\n          } else {\n            coreMenu._user = response.user;\n            coreMenu._system = response.system;\n            coreMenu._modules = response.modules;\n            coreMenu._renderMenu();\n            coreMenu._initComponents(response.system.conf);\n            coreMenu.preloader.hide();\n            var uri = location.hash.substring(1) !== '' && location.hash.substring(1) !== '/' ? '/mod' + location.hash.substring(1) : '/home';\n            coreMenu.load(uri);\n          }\n        },\n        error: function error(response) {\n          if (response.status === 403) {\n            coreTokens.clearAccessToken();\n            coreMain.viewPage('auth');\n          } else if (response.status === 0) {\n            CoreUI.alert.danger('Ошибка', 'Проверьте подключение к интернету');\n          } else {\n            CoreUI.alert.danger('Ошибка', 'Обновите приложение или обратитесь к администратору');\n          }\n        }\n      });\n    },\n    /**\n     *\n     */\n    toggleFullscreen: function toggleFullscreen() {\n      if (!document.fullscreenElement) {\n        document.documentElement.requestFullscreen();\n      } else {\n        if (document.exitFullscreen) {\n          document.exitFullscreen();\n        }\n      }\n    },\n    /**\n     * Перезагрузка содержимого страницы\n     */\n    reload: function reload() {\n      coreMenu.load('/mod' + location.hash.substring(1));\n    },\n    /**\n     * Загрузка содержимого модуля\n     * @param url\n     */\n    load: function load(url) {\n      url = url || '/home';\n      coreMenu.preloader.show();\n      $.ajax({\n        url: coreMain.options.basePath + url,\n        method: \"GET\",\n        dataType: 'text',\n        success: function success(response, textStatus, jqXHR) {\n          coreMenu.preloader.hide();\n          var params = coreTools.getParams(url);\n          coreMenu._setActiveModule(params.module, params.section);\n          var contentType = jqXHR.getResponseHeader('Content-type');\n          var contents = [];\n\n          // Обработка json\n          if (/^application\\/json/.test(contentType)) {\n            try {\n              var responseObj = JSON.parse(response);\n              if (_typeof(responseObj) === 'object' && responseObj.hasOwnProperty('_buffer') && responseObj._buffer !== '') {\n                contents.push(responseObj._buffer);\n                delete responseObj._buffer;\n                var clearResponseObj = [];\n                $.each(responseObj, function (i, item) {\n                  clearResponseObj.push(item);\n                });\n                responseObj = clearResponseObj;\n              }\n              var renderContents = coreMenu._renderContent(responseObj);\n              $.each(renderContents, function (i, contentItem) {\n                contents.push(contentItem);\n              });\n            } catch (e) {\n              contents = [response];\n              console.warn(e);\n            }\n          } else {\n            contents = [response];\n          }\n          var mainContainer = $('.page-menu .main-content .main-wrapper');\n          mainContainer.empty();\n          $.each(contents, function (key, content) {\n            mainContainer.append(content);\n          });\n          mainContainer.css({\n            'opacity': '0',\n            'margin-top': '15px'\n          }).animate({\n            marginTop: 0,\n            opacity: 1\n          }, {\n            duration: 235,\n            specialEasing: {\n              width: \"linear\",\n              height: \"easeOutBounce\"\n            },\n            complete: function complete() {\n              $(this).css({\n                'opacity': '',\n                'margin-top': ''\n              });\n            }\n          });\n          coreMenu._trigger('shown.load.core3', this, [url]);\n        },\n        error: function error(response) {\n          coreMenu.preloader.hide();\n          if (response.status === 403) {\n            coreTokens.clearAccessToken();\n            coreMain.viewPage('auth');\n          } else if (response.status === 0) {\n            CoreUI.alert.danger('Ошибка', 'Проверьте подключение к интернету');\n          } else {\n            CoreUI.alert.danger('Ошибка', 'Обновите приложение или обратитесь к администратору');\n          }\n        }\n      });\n    },\n    /**\n     * @param action\n     * @param options\n     * @returns {boolean}\n     */\n    loader: {\n      /**\n       * @param options\n       */\n      show: function show(options) {\n        if ($('#loader')[0]) {\n          return false;\n        }\n        $('.page-menu > header').append(tpl['menu/loader.html']);\n        var loaderElement = $('#loader .loader-progress');\n        var linearProgress = new MDCLinearProgress(loaderElement[0]);\n        linearProgress.determinate = false;\n      },\n      /**\n       *\n       */\n      hide: function hide() {\n        $('#loader').remove();\n      }\n    },\n    /**\n     * @param action\n     * @param options\n     * @returns {boolean}\n     */\n    preloader: {\n      /**\n       * @param options\n       * @returns {boolean}\n       */\n      show: function show(options) {\n        if ($('#preloader')[0]) {\n          this.hide();\n        }\n        options = _typeof(options) === 'object' ? options : {};\n        $('.page-menu').prepend(ejs.render(tpl['menu/preloader.html'], {\n          text: options.text || 'Загрузка...'\n        }));\n      },\n      /**\n       *\n       */\n      hide: function hide() {\n        $('#preloader').fadeOut('fast', function () {\n          $(this).remove();\n        });\n      }\n    },\n    /**\n     * @param eventName\n     * @param callback\n     * @param context\n     * @param singleExec\n     */\n    on: function on(eventName, callback, context, singleExec) {\n      if (_typeof(this._events[eventName]) !== 'object') {\n        this._events[eventName] = [];\n      }\n      this._events[eventName].push({\n        context: context || this,\n        callback: callback,\n        singleExec: singleExec\n      });\n    },\n    /**\n     * Сборка содержимого\n     * @param data\n     * @return {*[]}\n     * @private\n     */\n    _renderContent: function _renderContent(data) {\n      var that = this;\n      var result = [];\n      if (typeof data === 'string' || typeof data === 'bigint' || typeof data === 'number' || _typeof(data) === 'symbol') {\n        result.push(data);\n      } else if (data instanceof Object) {\n        if (!Array.isArray(data)) {\n          data = [data];\n        }\n        for (var i = 0; i < data.length; i++) {\n          if (typeof data[i] === 'string') {\n            result.push(data[i]);\n          } else {\n            if (!Array.isArray(data[i]) && data[i].hasOwnProperty('component') && data[i].component.substring(0, 6) === 'coreui') {\n              var name = data[i].component.split('.')[1];\n              if (CoreUI.hasOwnProperty(name) && that.isObject(CoreUI[name])) {\n                var instance = CoreUI[name].create(data[i]);\n                result.push(instance.render());\n                this.on('shown.load.core3', instance.initEvents, instance, true);\n              }\n            } else {\n              result.push(JSON.stringify(data[i]));\n            }\n          }\n        }\n      } else {\n        result.push(JSON.stringify(data));\n      }\n      return result;\n    },\n    /**\n     * Проверка на объект\n     * @param value\n     */\n    isObject: function isObject(value) {\n      return _typeof(value) === 'object' && !Array.isArray(value) && value !== null;\n    },\n    /**\n     *\n     * @param name\n     * @param context\n     * @param params\n     */\n    _trigger: function _trigger(name, context, params) {\n      if (this._events.hasOwnProperty(name) && this._events[name].length > 0) {\n        for (var i = 0; i < this._events[name].length; i++) {\n          var callback = this._events[name][i].callback;\n          context = this._events[name][i].context || context;\n          callback.apply(context, params);\n          if (this._events[name][i].singleExec) {\n            this._events[name].splice(i, 1);\n            i--;\n          }\n        }\n      }\n    },\n    /**\n     *\n     */\n    _renderMenu: function _renderMenu() {\n      $('.page-menu .system-title').text(coreMenu._system.name);\n      if (_typeof(coreMenu._system.conf) === 'object') {\n        localStorage.setItem('core3_conf', JSON.stringify(coreMenu._system.conf));\n        if (_typeof(coreMenu._system.conf.theme) === 'object') {\n          this._setTheme(coreMenu._system.conf.theme);\n        }\n      }\n      if (Object.values(coreMenu._modules).length > 0) {\n        var params = coreTools.getParams();\n        $('.page-menu > aside .menu-list.level-1').empty();\n        $.each(coreMenu._modules, function (key, module) {\n          if (typeof module.name !== 'string' || !module.name || typeof module.title !== 'string' || !module.title) {\n            CoreUI.notice.danger('Не удалось показать некоторые модули из за ошибок!');\n            return true;\n          }\n          module.index = 'index';\n          if (!module.is_visible_index && module.sections.length > 0) {\n            $.each(module.sections, function (key, section) {\n              module.index = section.name;\n              return false;\n            });\n          }\n          $('.page-menu > aside .menu-list.level-1').append(ejs.render(tpl['menu/module.html'], {\n            module: module\n          }));\n          $('.page-menu > aside .core-module.core-module-' + module.name).hover(function () {\n            var level2 = $('.level-2', this);\n            if (level2[0]) {\n              level2.css('top', $(this).offset().top);\n            }\n          });\n        });\n        coreMenu._setActiveModule(params.module, params.section);\n        var menuItems = document.querySelectorAll('.page-menu .menu-list-item a');\n        var _iterator2 = _createForOfIteratorHelper(menuItems),\n          _step2;\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var menuItem = _step2.value;\n            new MDCRipple(menuItem);\n            $(menuItem).on('click', function (event) {\n              if (event.button === 0 && !event.ctrlKey) {\n                var module = $(this).data('module');\n                var section = $(this).data('section');\n                if (location.hash.substring(1) === '/' + module + '/' + section) {\n                  if (window.screen.width < 600) {\n                    coreMenu._drawerToggle();\n                  }\n                  coreMenu.load('/mod/' + module + '/' + section);\n                }\n              }\n            });\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n        var _buttons = document.querySelectorAll('.page-menu .menu-list-item .menu-icon-button');\n        var _iterator3 = _createForOfIteratorHelper(_buttons),\n          _step3;\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var button = _step3.value;\n            new MDCRipple(button);\n            $(button).on('click', function () {\n              $(this).parent().parent().toggleClass('menu-item-nested-open');\n            });\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      }\n      $('.page-menu .mdc-top-app-bar__section--align-end').empty();\n      $('.page-menu .mdc-top-app-bar__section--align-end').append(ejs.render(tpl['menu/navbar.html'], {\n        user: coreMenu._user\n      }));\n\n      // Выход\n      $('.page-menu .menu-logout').on('click', function (e) {\n        e.preventDefault();\n        CoreUI.alert.warning(Core._('Уверены, что хотите выйти?'), '', {\n          buttons: [{\n            text: Core._('Отмена')\n          }, {\n            text: Core._('Да'),\n            type: 'warning',\n            click: coreAuth.logout\n          }]\n        });\n      });\n      $('.page-menu .open-menu, .page-menu .menu-drawer-scrim').on('click', function () {\n        coreMenu._drawerToggle();\n      });\n      $('.page-menu .module-home').on('click', function (event) {\n        if (event.button === 0 && !event.ctrlKey) {\n          coreMenu.load('/home');\n          if (window.screen.width < 600) {\n            coreMenu._drawerToggle();\n            console.log(11);\n          }\n        }\n      });\n      var buttons = document.querySelectorAll('.page-menu .mdc-ripple-surface');\n      var _iterator4 = _createForOfIteratorHelper(buttons),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var _button = _step4.value;\n          new MDCRipple(_button);\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n      coreMenu._initSwipe($(\".page-menu .menu-drawer-swipe\")[0], function (direction) {\n        if (direction === \"right\") {\n          coreMenu._drawerToggle();\n        } else if (direction === \"left\") {\n          coreMenu._drawerToggle();\n        }\n      });\n    },\n    /**\n     * Инициализация компонентов\n     * @param {object} conf\n     * @private\n     */\n    _initComponents: function _initComponents(conf) {\n      CoreUI.table.setSettings({\n        lang: conf.lang\n      });\n      CoreUI.form.setSettings({\n        lang: conf.lang\n      });\n    },\n    /**\n     * @param moduleName\n     * @param sectionName\n     */\n    _setActiveModule: function _setActiveModule(moduleName, sectionName) {\n      $('.page-menu > aside .core-module').removeClass('menu-module-index--activated').removeClass('menu-module--activated');\n      $('.page-menu > aside .core-module-section').removeClass('menu-module-section--activated');\n      $('.page-menu > aside .core-module-section-index').removeClass('menu-module-section--activated');\n      $('.page-menu > aside .core-module-' + moduleName).addClass('menu-module--activated').addClass('menu-item-nested-open');\n      if (sectionName === 'index') {\n        $('.page-menu > aside .core-module.core-module-' + moduleName).addClass('menu-module-index--activated');\n        $('.page-menu > aside .core-module-' + moduleName + ' .core-module-section-index').addClass('menu-module-section--activated');\n      }\n      $('.page-menu > aside .core-module-' + moduleName + '-' + sectionName).addClass('menu-module-section--activated');\n      if (!moduleName && !sectionName) {\n        $('.page-menu .module-home').addClass('active');\n      } else {\n        $('.page-menu .module-home').removeClass('active');\n      }\n\n      /**\n       * @param moduleName\n       * @param sectionName\n       * @returns {*[]}\n       */\n      function getModuleTitles(moduleName, sectionName) {\n        var title = [];\n        $.each(coreMenu._modules, function (key, module) {\n          if (module.name === moduleName) {\n            title.push(module.title);\n            if (module.sections && module.sections.length > 0) {\n              $.each(module.sections, function (key, section) {\n                if (section.name === sectionName) {\n                  title.push(section.title);\n                  return false;\n                }\n              });\n            }\n            return false;\n          }\n        });\n        return title;\n      }\n      var titles = getModuleTitles(moduleName, sectionName);\n      $('header .mdc-top-app-bar__title').text(titles[0] || '');\n      $('header .mdc-top-app-bar__subtitle').text(titles[1] || '');\n      var title = titles.hasOwnProperty(0) ? (titles.hasOwnProperty(1) ? titles[1] + ' - ' : '') + titles[0] : '';\n      title = (title ? title + ' - ' : '') + coreMenu._system.name;\n      $('head title').text(title);\n    },\n    /**\n     * @param target\n     * @param callback\n     */\n    _initSwipe: function _initSwipe(target, callback) {\n      document.addEventListener('touchstart', handleTouchStart, false);\n      document.addEventListener('touchmove', handleTouchMove, false);\n      var xDown = null;\n      var yDown = null;\n\n      /**\n       * @param evt\n       */\n      function handleTouchStart(evt) {\n        xDown = evt.touches[0].clientX;\n        yDown = evt.touches[0].clientY;\n      }\n\n      /**\n       * @param evt\n       */\n      function handleTouchMove(evt) {\n        if (!xDown || !yDown) {\n          return;\n        }\n        var xUp = evt.touches[0].clientX;\n        var yUp = evt.touches[0].clientY;\n        var xDiff = xDown - xUp;\n        var yDiff = yDown - yUp;\n        if (Math.abs(xDiff) > Math.abs(yDiff)) {\n          /*most significant*/\n          if (xDiff > 0) {\n            if (target === evt.target) {\n              callback('left');\n            }\n          } else {\n            if (target === evt.target) {\n              callback('right');\n            }\n          }\n        } else {\n          if (yDiff > 0) {\n            if (target === evt.target) {\n              callback('up');\n            }\n          } else {\n            if (target === evt.target) {\n              callback('down');\n            }\n          }\n        }\n        xDown = null;\n        yDown = null;\n      }\n    },\n    /**\n     * @private\n     */\n    _drawerToggle: function _drawerToggle() {\n      // Нужно для первого открытия страницы\n      $('.page-menu .menu-drawer').css('transition', '');\n      $('.page-menu .mdc-top-app-bar').css('transition', '');\n      var menu = $('.page.page-menu');\n      if (menu.hasClass('drawer-toggle')) {\n        localStorage.setItem('core3_drawer_toggle', 0);\n      } else {\n        localStorage.setItem('core3_drawer_toggle', 1);\n      }\n      menu.toggleClass('drawer-toggle');\n    },\n    /**\n     * Установка\n     */\n    _initInstall: function _initInstall() {\n      var install = function install(event) {\n        event.preventDefault();\n        var button = $('.page-menu .install-button');\n        if (event.platforms.includes('web')) {\n          button.show();\n          button.on('click', function () {\n            event.prompt();\n          });\n        }\n        event.userChoice.then(function (choiceResult) {\n          switch (choiceResult.outcome) {\n            case \"accepted\":\n              button.hide();\n              break;\n            case \"dismissed\":\n              button.css('opacity', '0.7');\n              break;\n          }\n        });\n      };\n      if (coreMain.install.event) {\n        install(coreMain.install.event);\n      } else {\n        coreMain.install.promise.then(install);\n      }\n    },\n    /**\n     * Установка темы\n     * @param {object} theme\n     * @private\n     */\n    _setTheme: function _setTheme(theme) {\n      var styles = [];\n      if (_typeof(theme.main) === 'object' && typeof theme.main.bg_color === 'string' && theme.main.bg_color) {\n        styles.push('--menu-drawer: ' + theme.main.bg_color + ';');\n      }\n      if (_typeof(theme.main) === 'object' && typeof theme.main.text_color === 'string' && theme.main.text_color) {\n        styles.push('--menu-drawer-text:' + theme.main.text_color + ';');\n      }\n      if (styles.length > 0) {\n        var content = ':root{' + styles.join('') + '}';\n        var coreTheme = $('head #theme-main');\n        if (!coreTheme[0] || content !== coreTheme.html()) {\n          if (coreTheme[0]) {\n            coreTheme.remove();\n          }\n          $('head').append('<style id=\"theme-main\">' + content + '</style>');\n        }\n      }\n    }\n  };\n\n  var coreMain = {\n    activePage: null,\n    options: {\n      basePath: 'core3'\n    },\n    /**\n     *\n     */\n    install: {\n      event: null,\n      promise: null\n    },\n    /**\n     *\n     */\n    _hashChangeCallbacks: [],\n    /**\n     * @param pageName\n     */\n    viewPage: function viewPage(pageName) {\n      if (Core[pageName]) {\n        var pageContent = Core[pageName].getPageContent();\n        $('.main').append('<div class=\"page page-' + pageName + '\">' + pageContent + '</div>');\n        Core[pageName].init();\n        coreMain.activePage = pageName;\n        var $otherPages = $('.main > .page:not(.page-' + pageName + ')');\n        if ($otherPages[0]) {\n          $otherPages.fadeOut('fast', function () {\n            $otherPages.remove();\n            $('.main > .page-' + pageName).fadeIn('fast');\n          });\n        } else {\n          $('.main > .page-' + pageName).fadeIn('fast');\n        }\n      } else {\n        CoreUI.alert.danger('Ошибка', 'Страница ' + pageName + ' не найдена');\n      }\n    },\n    /**\n     * @param eventName\n     * @param callback\n     */\n    on: function on(eventName, callback) {\n      if (eventName === 'hashchange') {\n        coreMain._hashChangeCallbacks.push(callback);\n      }\n    },\n    /**\n     *\n     */\n    hashChange: function hashChange() {\n      if (coreMain._hashChangeCallbacks.length > 0) {\n        for (var i = 0; i < coreMain._hashChangeCallbacks.length; i++) {\n          coreMain._hashChangeCallbacks[i]();\n        }\n      }\n    },\n    /**\n     * @param text\n     * @param options\n     * @private\n     */\n    _: function _(text, options) {\n      return text;\n    }\n  };\n  document.addEventListener('DOMContentLoaded', function () {\n    coreMain.on('hashchange', function () {\n      if ($('.page-auth')[0]) {\n        coreAuth.viewActualContainer();\n      }\n      if ($('.page.page-menu')[0]) {\n        if (window.screen.width < 600 && $('.page.page-menu.drawer-toggle')[0]) {\n          coreMenu._drawerToggle();\n        }\n        coreMenu.load('/mod' + location.hash.substring(1));\n      }\n    });\n\n    // Событие установки\n    coreMain.install.promise = new Promise(function (resolve, reject) {\n      window.addEventListener('beforeinstallprompt', function (event) {\n        event.preventDefault();\n        coreMain.install.event = event;\n        resolve(event);\n      });\n    });\n    var accessToken = coreTokens.getAccessToken();\n    if (!accessToken) {\n      coreMain.viewPage('auth');\n    } else {\n      coreTokens.refreshToken(function () {\n        coreTokens.initRefresh();\n        coreMain.viewPage('menu');\n      }, function () {\n        coreMain.viewPage('auth');\n      });\n    }\n    if (\"onhashchange\" in window) {\n      window.onhashchange = coreMain.hashChange;\n    }\n\n    /**\n     * Замена alert\n     * @param message\n     */\n    alert = function alert(message) {\n      CoreUI.alert.create({\n        type: 'warning',\n        message: message\n      });\n    };\n  });\n\n  /*\n   * JavaScript MD5\n   * https://github.com/blueimp/JavaScript-MD5\n   *\n   * Copyright 2011, Sebastian Tschan\n   * https://blueimp.net\n   *\n   * Licensed under the MIT license:\n   * https://opensource.org/licenses/MIT\n   *\n   * Based on\n   * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n   * Digest Algorithm, as defined in RFC 1321.\n   * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009\n   * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n   * Distributed under the BSD License\n   * See http://pajhome.org.uk/crypt/md5 for more info.\n   */\n\n  /*\n   * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n   * to work around bugs in some JS interpreters.\n   */\n  const safeAdd = (x, y) => {\n    let lsw = (x & 0xFFFF) + (y & 0xFFFF);\n    return (x >> 16) + (y >> 16) + (lsw >> 16) << 16 | lsw & 0xFFFF;\n  };\n\n  /*\n   * Bitwise rotate a 32-bit number to the left.\n   */\n  const bitRotateLeft = (num, cnt) => num << cnt | num >>> 32 - cnt;\n\n  /*\n   * These functions implement the four basic operations the algorithm uses.\n   */\n  const md5cmn = (q, a, b, x, s, t) => safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b),\n    md5ff = (a, b, c, d, x, s, t) => md5cmn(b & c | ~b & d, a, b, x, s, t),\n    md5gg = (a, b, c, d, x, s, t) => md5cmn(b & d | c & ~d, a, b, x, s, t),\n    md5hh = (a, b, c, d, x, s, t) => md5cmn(b ^ c ^ d, a, b, x, s, t),\n    md5ii = (a, b, c, d, x, s, t) => md5cmn(c ^ (b | ~d), a, b, x, s, t);\n  const firstChunk = (chunks, x, i) => {\n      let [a, b, c, d] = chunks;\n      a = md5ff(a, b, c, d, x[i + 0], 7, -680876936);\n      d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);\n      c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);\n      b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);\n      a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);\n      d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);\n      c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);\n      b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);\n      a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);\n      d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);\n      c = md5ff(c, d, a, b, x[i + 10], 17, -42063);\n      b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);\n      a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);\n      d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);\n      c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);\n      b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);\n      return [a, b, c, d];\n    },\n    secondChunk = (chunks, x, i) => {\n      let [a, b, c, d] = chunks;\n      a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);\n      d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);\n      c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);\n      b = md5gg(b, c, d, a, x[i], 20, -373897302);\n      a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);\n      d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);\n      c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);\n      b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);\n      a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);\n      d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);\n      c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);\n      b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);\n      a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);\n      d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);\n      c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);\n      b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);\n      return [a, b, c, d];\n    },\n    thirdChunk = (chunks, x, i) => {\n      let [a, b, c, d] = chunks;\n      a = md5hh(a, b, c, d, x[i + 5], 4, -378558);\n      d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);\n      c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);\n      b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);\n      a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);\n      d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);\n      c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);\n      b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);\n      a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);\n      d = md5hh(d, a, b, c, x[i], 11, -358537222);\n      c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);\n      b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);\n      a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);\n      d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);\n      c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);\n      b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);\n      return [a, b, c, d];\n    },\n    fourthChunk = (chunks, x, i) => {\n      let [a, b, c, d] = chunks;\n      a = md5ii(a, b, c, d, x[i], 6, -198630844);\n      d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);\n      c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);\n      b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);\n      a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);\n      d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);\n      c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);\n      b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);\n      a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);\n      d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);\n      c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);\n      b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);\n      a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);\n      d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);\n      c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);\n      b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);\n      return [a, b, c, d];\n    };\n  /*\n   * Calculate the MD5 of an array of little-endian words, and a bit length.\n   */\n  const binlMD5 = (x, len) => {\n    /* append padding */\n    x[len >> 5] |= 0x80 << len % 32;\n    x[(len + 64 >>> 9 << 4) + 14] = len;\n    let commands = [firstChunk, secondChunk, thirdChunk, fourthChunk],\n      initialChunks = [1732584193, -271733879, -1732584194, 271733878];\n    return Array.from({\n      length: Math.floor(x.length / 16) + 1\n    }, (v, i) => i * 16).reduce((chunks, i) => commands.reduce((newChunks, apply) => apply(newChunks, x, i), chunks.slice()).map((chunk, index) => safeAdd(chunk, chunks[index])), initialChunks);\n  };\n\n  /*\n   * Convert an array of little-endian words to a string\n   */\n  const binl2rstr = input => Array(input.length * 4).fill(8).reduce((output, k, i) => output + String.fromCharCode(input[i * k >> 5] >>> i * k % 32 & 0xFF), '');\n\n  /*\n   * Convert a raw string to an array of little-endian words\n   * Characters >255 have their high-byte silently ignored.\n   */\n  const rstr2binl = input => Array.from(input).map(i => i.charCodeAt(0)).reduce((output, cc, i) => {\n    let resp = output.slice();\n    resp[i * 8 >> 5] |= (cc & 0xFF) << i * 8 % 32;\n    return resp;\n  }, []);\n\n  /*\n   * Calculate the MD5 of a raw string\n   */\n  const rstrMD5 = string => binl2rstr(binlMD5(rstr2binl(string), string.length * 8));\n  /*\n   * Calculate the HMAC-MD5, of a key and some data (raw strings)\n   */\n  const strHMACMD5 = (key, data) => {\n    let bkey = rstr2binl(key),\n      ipad = Array(16).fill(undefined ^ 0x36363636),\n      opad = Array(16).fill(undefined ^ 0x5C5C5C5C);\n    if (bkey.length > 16) {\n      bkey = binlMD5(bkey, key.length * 8);\n    }\n    bkey.forEach((k, i) => {\n      ipad[i] = k ^ 0x36363636;\n      opad[i] = k ^ 0x5C5C5C5C;\n    });\n    return binl2rstr(binlMD5(opad.concat(binlMD5(ipad.concat(rstr2binl(data)), 512 + data.length * 8)), 512 + 128));\n  };\n\n  /*\n   * Convert a raw string to a hex string\n   */\n  const rstr2hex = input => {\n    const hexTab = pos => '0123456789abcdef'.charAt(pos);\n    return Array.from(input).map(c => c.charCodeAt(0)).reduce((output, x, i) => output + hexTab(x >>> 4 & 0x0F) + hexTab(x & 0x0F), '');\n  };\n\n  /*\n   * Encode a string as utf-8\n   */\n\n  const str2rstrUTF8 = unicodeString => {\n    if (typeof unicodeString !== 'string') throw new TypeError('parameter ‘unicodeString’ is not a string');\n    const cc = c => c.charCodeAt(0);\n    return unicodeString.replace(/[\\u0080-\\u07ff]/g,\n    // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n    c => String.fromCharCode(0xc0 | cc(c) >> 6, 0x80 | cc(c) & 0x3f)).replace(/[\\u0800-\\uffff]/g,\n    // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n    c => String.fromCharCode(0xe0 | cc(c) >> 12, 0x80 | cc(c) >> 6 & 0x3F, 0x80 | cc(c) & 0x3f));\n  };\n\n  /*\n   * Take string arguments and return either raw or hex encoded strings\n   */\n  const rawMD5 = s => rstrMD5(str2rstrUTF8(s));\n  const hexMD5 = s => rstr2hex(rawMD5(s));\n  const rawHMACMD5 = (k, d) => strHMACMD5(str2rstrUTF8(k), str2rstrUTF8(d));\n  const hexHMACMD5 = (k, d) => rstr2hex(rawHMACMD5(k, d));\n  var MD5 = ((string, key, raw) => {\n    if (!key) {\n      if (!raw) {\n        return hexMD5(string);\n      }\n      return rawMD5(string);\n    }\n    if (!raw) {\n      return hexHMACMD5(key, string);\n    }\n    return rawHMACMD5(key, string);\n  });\n\n  var coreAuth = {\n    /**\n     * Получение страницы входа и регистрации\n     * @returns {*}\n     */\n    getPageContent: function getPageContent() {\n      return tpl['auth/main.html'];\n    },\n    /**\n     * Инициализация страницы входа и регистрации\n     */\n    init: function init() {\n      var that = this;\n\n      // Инициализация кнопок\n      var buttons = document.querySelectorAll('.page-auth .mdc-button');\n      var _iterator = _createForOfIteratorHelper(buttons),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var button = _step.value;\n          new MDCRipple(button);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      $('.container-login form').on('submit', function () {\n        coreAuth.login(this);\n        return false;\n      });\n      $('.container-registration form').on('submit', function () {\n        coreAuth.registration(this);\n        return false;\n      });\n      var conf = localStorage.getItem('core3_conf');\n      if (typeof conf === 'string') {\n        try {\n          conf = JSON.parse(conf);\n          if (typeof conf.name === 'string') {\n            $('head title').text(conf.name);\n          }\n          if (typeof conf.logo === 'string') {\n            this._setLogo(conf.logo);\n          }\n          if (_typeof(conf.theme) === 'object') {\n            this._setTheme(conf.theme);\n          }\n        } catch (e) {}\n      }\n      coreAuth.loadConfig().then(function (conf) {\n        localStorage.setItem('core3_conf', JSON.stringify(conf));\n        if (typeof conf.name === 'string') {\n          $('head title').text(conf.name);\n        }\n        if (typeof conf.logo === 'string') {\n          that._setLogo(conf.logo);\n        } else {\n          that._setLogo('');\n        }\n        if (_typeof(conf.theme) === 'object') {\n          that._setTheme(conf.theme);\n        }\n      });\n      coreAuth.viewActualContainer();\n\n      // Установка\n      var install = function install(event) {\n        event.preventDefault();\n        var button = $('.page-auth .install-button');\n        if (event.platforms.includes('web')) {\n          button.show();\n          button.on('click', function () {\n            event.prompt();\n          });\n        }\n        event.userChoice.then(function (choiceResult) {\n          switch (choiceResult.outcome) {\n            case \"accepted\":\n              button.hide();\n              break;\n          }\n        });\n      };\n      if (coreMain.install.event) {\n        install(coreMain.install.event);\n      } else {\n        coreMain.install.promise.then(install);\n      }\n    },\n    /**\n     * Показ текущего контейнера\n     */\n    viewActualContainer: function viewActualContainer() {\n      var params = coreTools.getParams();\n      var authPanel = params.module;\n      if (['login', 'registration', 'registration_complete'].indexOf(authPanel) === -1) {\n        authPanel = 'login';\n      }\n      coreAuth._viewContainer(authPanel);\n    },\n    /**\n     * @param action\n     */\n    preloader: function preloader(action) {\n      var $btn = $('.page-auth button[type=submit]:visible');\n      switch (action) {\n        case 'show':\n          $btn.attr(\"disabled\", \"disabled\");\n          if ($btn.find('.spinner-border').length === 0) {\n            $btn.prepend('<div class=\"spinner-border spinner-border-sm\"></div> ');\n          }\n          break;\n        case 'hide':\n          $btn.find('.spinner-border').remove();\n          $btn.removeAttr(\"disabled\");\n          break;\n      }\n    },\n    /**\n     * Получение конфигурации\n     * @return {Promise}\n     */\n    loadConfig: function loadConfig() {\n      return new Promise(function (resolve, reject) {\n        $.ajax({\n          url: coreMain.options.basePath + \"/conf\",\n          method: \"GET\",\n          dataType: \"json\",\n          success: function success(response) {\n            resolve(response);\n          }\n        });\n      });\n    },\n    /**\n     * @param form\n     * @returns {Promise<boolean>}\n     */\n    login: function () {\n      var _login = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(form) {\n        var fp;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (form.checkValidity()) {\n                _context.next = 5;\n                break;\n              }\n              $(form).addClass('was-validated');\n              return _context.abrupt(\"return\", false);\n            case 5:\n              $(form).removeClass('was-validated');\n            case 6:\n              coreAuth.preloader('show');\n              $('.page-auth form .text-danger').text('');\n              _context.next = 10;\n              return coreTools.getFingerprint();\n            case 10:\n              fp = _context.sent;\n              if (fp) {\n                _context.next = 15;\n                break;\n              }\n              coreAuth.preloader('hide');\n              $('.page-auth form .text-danger').text('Не удалось получить отпечаток');\n              return _context.abrupt(\"return\", false);\n            case 15:\n              $.ajax({\n                url: coreMain.options.basePath + \"/auth/login\",\n                method: \"POST\",\n                dataType: \"json\",\n                contentType: \"application/json; charset=utf-8\",\n                data: JSON.stringify({\n                  login: $('[name=login]', form).val(),\n                  password: MD5($('[name=password]', form).val()),\n                  fp: fp\n                }),\n                success: function success(response) {\n                  if (typeof response.access_token !== 'string' || typeof response.refresh_token !== 'string' || !response.access_token || !response.refresh_token) {\n                    var errorMessage = response.error_message || \"Ошибка. Попробуйте позже, либо обратитесь к администратору\";\n                    $('.page-auth form .text-danger').text(errorMessage);\n                  } else {\n                    $('.page-auth form .text-danger').text('');\n                    coreTokens.setAccessToken(response.access_token);\n                    coreTokens.setRefreshToken(response.refresh_token);\n                    $('.page-auth [name=login]').val('');\n                    $('.page-auth [name=password]').val('');\n                    coreMain.viewPage('menu');\n                    coreTokens.initRefresh();\n                  }\n                },\n                error: function error(response) {\n                  coreAuth.preloader('hide');\n                  var errorMessage = '';\n                  if (response.status === 0) {\n                    errorMessage = 'Проверьте подключение к интернету';\n                  } else if (response.responseJSON && response.responseJSON.error_message) {\n                    errorMessage = response.responseJSON.error_message;\n                  } else {\n                    errorMessage = $(\"<div>\" + response.responseText + \"</div>\").text();\n                  }\n                  errorMessage = errorMessage || 'Ошибка. Попробуйте позже, либо обратитесь к администратору';\n                  $('.container-login .text-danger').text(errorMessage);\n                },\n                complete: function complete(jqXHR, textStatus) {\n                  coreAuth.preloader('hide');\n                }\n              });\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      function login(_x) {\n        return _login.apply(this, arguments);\n      }\n      return login;\n    }(),\n    /**\n     *\n     */\n    logout: function logout() {\n      $.ajax({\n        url: coreMain.options.basePath + '/auth/logout',\n        method: \"PUT\",\n        headers: {\n          'Access-Token': coreTokens.getAccessToken()\n        },\n        dataType: \"json\",\n        success: function success(response) {\n          coreTokens.clearAccessToken();\n          coreTokens.deinitRefresh();\n          coreMain.viewPage('auth');\n          $('.page-menu > aside .menu-logout').removeClass('mdc-list-item--activated');\n        },\n        error: function error(response) {\n          if (response.status === 0) {\n            CoreUI.alert.danger('Ошибка', 'Проверьте подключение к интернету');\n          } else {\n            CoreUI.alert.danger('Ошибка', 'Обновите приложение или обратитесь к администратору');\n          }\n        }\n      });\n    },\n    /**\n     * @param form\n     */\n    registration: function registration(form) {\n      if (!form.checkValidity()) {\n        $(form).addClass('was-validated');\n        return false;\n      } else {\n        $(form).removeClass('was-validated');\n      }\n      coreAuth.preloader('show');\n      $('.container-registration .text-danger').text('');\n      $.ajax({\n        url: coreMain.options.basePath + \"/auth/registration/email\",\n        dataType: \"json\",\n        method: \"POST\",\n        data: $(form).serialize(),\n        success: function success(response) {\n          coreAuth.preloader('hide');\n          if (typeof response.access_token !== 'string' || typeof response.refresh_token !== 'string' || !response.access_token || !response.refresh_token) {\n            var errorMessage = response.error_message || \"Ошибка. Попробуйте позже, либо обратитесь к администратору\";\n            $('.container-registration .text-danger').text(errorMessage);\n          } else {\n            $('.page-auth form .text-danger').text('');\n            coreTokens.setAccessToken(response.access_token);\n            coreTokens.setRefreshToken(response.refresh_token);\n            $('.page-auth [name=login]').val('');\n            $('.page-auth [name=password]').val('');\n            coreMain.viewPage('menu');\n            coreTokens.initRefresh();\n          }\n        },\n        error: function error(response) {\n          coreAuth.preloader('hide');\n          var errorMessage = '';\n          if (response.status === 0) {\n            errorMessage = 'Проверьте подключение к интернету';\n          } else if (response.responseJSON && response.responseJSON.error_message) {\n            errorMessage = response.responseJSON.error_message;\n          } else {\n            errorMessage = $(response.responseText).text();\n          }\n          errorMessage = errorMessage || 'Ошибка. Попробуйте позже, либо обратитесь к администратору';\n          $('.container-registration .text-danger').text(errorMessage);\n        },\n        complete: function complete(jqXHR, textStatus) {\n          coreAuth.preloader('hide');\n        }\n      });\n    },\n    /**\n     * @param form\n     * @constructor\n     */\n    registrationComplete: function registrationComplete(form) {\n      var pass1 = $(\"[name=password]\", form).val();\n      var pass2 = $(\"[name=password2]\", form).val();\n      if (!pass1 || !pass2) {\n        $('.container-registration_complete .text-danger').text('Введите пароль');\n        return false;\n      }\n      if (pass1 !== pass2) {\n        $('.container-registration_complete .text-danger').text('Пароли не совпадают').show();\n        return false;\n      }\n      coreAuth.preloader('show');\n      $('.container-registration_complete .text-danger').text('');\n      var params = coreTools.getParams();\n      $.ajax({\n        url: coreMain.options.basePath + \"/auth/registration/email/check\",\n        dataType: \"json\",\n        method: \"POST\",\n        data: {\n          key: params.query.key,\n          password: MD5(form.password.value)\n        },\n        success: function success(data) {\n          coreAuth.preloader('hide');\n          if (data.status === 'success') {\n            $('.container-registration_complete .text-success').html(data.message).css('margin-bottom', '50px');\n            $(form).hide();\n          } else {\n            $('.container-registration_complete .text-danger').text(data.error_message);\n          }\n        },\n        error: function error(response) {\n          coreAuth.preloader('hide');\n          var errorMessage = '';\n          if (response.status === 0) {\n            errorMessage = 'Ошибка. Проверьте подключение к интернету';\n          } else {\n            errorMessage = 'Ошибка. Попробуйте позже, либо обратитесь к администратору';\n          }\n          $('.container-registration_complete .text-danger').text(errorMessage);\n        }\n      });\n    },\n    /**\n     * Показ указанного контейнера\n     * @param name\n     */\n    _viewContainer: function _viewContainer(name) {\n      $('.page-auth > .container').hide();\n      $('.page-auth > .container-' + name).fadeIn('fast');\n    },\n    /**\n     * Установка логотипа\n     * @param {string} logo\n     * @private\n     */\n    _setLogo: function _setLogo(logo) {\n      if (logo) {\n        $('.page-auth img.logo').attr('src', logo).show();\n      } else {\n        $('.page-auth img.logo').hide();\n      }\n    },\n    /**\n     * Установка темы\n     * @param {object} theme\n     * @private\n     */\n    _setTheme: function _setTheme(theme) {\n      var styles = [];\n      if (_typeof(theme.login) === 'object' && typeof theme.login.bg_video === 'string' && theme.login.bg_video) {\n        if (!$('.page.page-auth > video')[0]) {\n          $('.page.page-auth').prepend('<video autoplay muted loop><source src=\"' + theme.login.bg_video + '\" type=\"video/mp4\"></video>');\n        }\n      }\n      if (_typeof(theme.login) === 'object' && typeof theme.login.bg_img === 'string' && theme.login.bg_img) {\n        styles.push('--login-bg:url(\"' + theme.login.bg_img + '\");');\n      } else if (_typeof(theme.login) === 'object' && typeof theme.login.bg_color === 'string' && theme.login.bg_color) {\n        styles.push('--login-bg: ' + theme.login.bg_color + ';');\n      }\n      if (styles.length > 0) {\n        var content = ':root{' + styles.join('') + '}';\n        var coreTheme = $('head #theme-login');\n        if (!coreTheme[0] || content !== coreTheme.html()) {\n          if (coreTheme[0]) {\n            coreTheme.remove();\n          }\n          $('head').append('<style id=\"theme-login\">' + content + '</style>');\n        }\n      }\n    }\n  };\n\n  /**\r\n   * @property {object} _table\r\n   */\n  var coreUiTableInstance = /*#__PURE__*/function () {\n    /**\r\n     * @param {object} table\r\n     */\n    function coreUiTableInstance(table) {\n      _classCallCheck(this, coreUiTableInstance);\n      if (_typeof(table) !== 'object' || Array.isArray(table) || table === null) {\n        throw new Error('Ошибка инициализации таблицы');\n      }\n      this._table = table;\n    }\n\n    /**\r\n     * Запрос на удаление выбранных записей\r\n     * @param {string}   url\r\n     * @param {function} callbackSuccess\r\n     */\n    return _createClass(coreUiTableInstance, [{\n      key: \"deleteSelected\",\n      value: function deleteSelected(url, callbackSuccess) {\n        var recordsId = this._table.getSelectedRecordsId();\n        if (recordsId.length === 0) {\n          CoreUI.notice.warning(Core$1._('Нужно выбрать хотя бы одну запись'));\n          return;\n        }\n        CoreUI.alert.warning(Core$1._(\"Удалить выбранные записи?\"), Core$1._('Количество: ') + ' ' + recordsId.length, {\n          buttons: [{\n            text: Core$1._(\"Отмена\")\n          }, {\n            text: Core$1._(\"Да\"),\n            type: 'warning',\n            click: function click() {\n              Core$1.menu.preloader.show();\n              $.ajax({\n                url: url,\n                method: 'delete',\n                dataType: 'json',\n                contentType: \"application/json; charset=utf-8\",\n                data: JSON.stringify({\n                  id: recordsId\n                }),\n                success: function success(response) {\n                  if (response.status !== 'success') {\n                    CoreUI.alert.danger(response.error_message || Core$1._(\"Ошибка. Попробуйте обновить страницу и выполнить удаление еще раз.\"));\n                  } else {\n                    CoreUI.notice.defalt(Core$1._('Выбранные записи удалены'));\n                    if (callbackSuccess && typeof callbackSuccess == 'function') {\n                      callbackSuccess();\n                    }\n                  }\n                },\n                error: function error(response) {\n                  CoreUI.alert.danger(Core$1._(\"Ошибка. Попробуйте обновить страницу и выполнить удаление еще раз.\"));\n                },\n                complete: function complete() {\n                  Core$1.menu.preloader.hide();\n                }\n              });\n            }\n          }]\n        });\n      }\n\n      /**\r\n       * Переключение состояния у записи\r\n       * @param {string} url\r\n       * @param {string} checked\r\n       * @param {string} id\r\n       * @param {string} questionY\r\n       * @param {string} questionN\r\n       */\n    }, {\n      key: \"switch\",\n      value: function _switch(url, checked, id, questionY, questionN) {\n        var question;\n        var isChecked = $(checked).is(':checked');\n        if (isChecked) {\n          question = questionY || \"Активировать запись?\";\n        } else {\n          question = questionN || \"Деактивировать запись?\";\n        }\n        var isAccept = false;\n        CoreUI.alert.create({\n          type: 'warning',\n          title: question,\n          onHide: function onHide() {\n            if (!isAccept) {\n              $(checked).prop('checked', !isChecked);\n            }\n          },\n          buttons: [{\n            text: Core$1._(\"Отмена\"),\n            click: function click() {\n              $(checked).prop('checked', !isChecked);\n            }\n          }, {\n            text: Core$1._(\"Да\"),\n            type: 'warning',\n            click: function click() {\n              Core$1.menu.loader.show();\n              isAccept = true;\n              $.ajax({\n                url: url.replace('[id]', id),\n                method: 'patch',\n                dataType: 'json',\n                contentType: \"application/json; charset=utf-8\",\n                data: JSON.stringify({\n                  checked: isChecked ? 'Y' : 'N'\n                }),\n                success: function success(response) {\n                  if (response.status !== 'success') {\n                    $(checked).prop('checked', !isChecked);\n                    CoreUI.notice.danger(response.error_message || Core$1._(\"Ошибка. Попробуйте обновить страницу и выполните это действие еще раз.\"));\n                  }\n                },\n                error: function error(response) {\n                  $(checked).prop('checked', !isChecked);\n                  CoreUI.notice.danger(Core$1._(\"Ошибка. Попробуйте обновить страницу и выполните это действие еще раз.\"));\n                },\n                complete: function complete() {\n                  Core$1.menu.loader.hide();\n                }\n              });\n            }\n          }]\n        });\n      }\n    }]);\n  }();\n\n  var coreUiTable$1 = {\n    /**\r\n     * Получение таблицы ядра\r\n     * @param tableId\r\n     */\n    get: function get(tableId) {\n      var table = CoreUI.table.get(tableId);\n      if (!table) {\n        throw new Error('Не удалось найти таблицу с id' + table);\n      }\n      return new coreUiTableInstance(table);\n    }\n  };\n\n  var coreUiFormInstance = /*#__PURE__*/_createClass(\n  /**\r\n   * @param {object} form\r\n   */\n  function coreUiFormInstance(form) {\n    _classCallCheck(this, coreUiFormInstance);\n    if (_typeof(form) !== 'object' || Array.isArray(form) || form === null) {\n      throw new Error('Ошибка инициализации формы');\n    }\n    this._form = form;\n  });\n\n  var coreUiTable = {\n    /**\r\n     * Получение таблицы ядра\r\n     * @param formId\r\n     */\n    get: function get(formId) {\n      var form = CoreUI.form.get(formId);\n      if (!form) {\n        throw new Error('Не удалось найти форму с id' + formId);\n      }\n      return new coreUiFormInstance(form);\n    }\n  };\n\n  var Core$1 = {\n    _settings: {\n      lang: 'en'\n    },\n    main: coreMain,\n    auth: coreAuth,\n    menu: coreMenu,\n    tools: coreTools,\n    ui: {\n      table: coreUiTable$1,\n      form: coreUiTable\n    },\n    lang: {},\n    /**\n     * Перевод\n     * @param  {string} text\n     * @return {string}\n     */\n    _: function _(text) {\n      var lang = {};\n      if (this._settings.lang && this.lang.hasOwnProperty(this._settings.lang) && _typeof(this.lang[this._settings.lang]) === 'object' && this.lang[this._settings.lang] !== null) {\n        lang = this.lang[this._settings.lang];\n      }\n      return lang.hasOwnProperty(text) ? lang[text] : text;\n    },\n    /**\n     * Установка настроек\n     * @param {object} settings\n     */\n    setSettings: function setSettings(settings) {\n      this._settings = $.extend({}, this._settings, settings);\n    },\n    /**\n     * Получение значения настройки\n     * @param {string} name\n     */\n    getSetting: function getSetting(name) {\n      var value = null;\n      if (this._settings.hasOwnProperty(name)) {\n        value = this._settings[name];\n      }\n      return value;\n    }\n  };\n\n  Core$1.lang.en = {\n    'Вход': 'Login'\n  };\n\n  return Core$1;\n\n}));\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"],"names":["global","factory","exports","module","define","amd","globalThis","self","Core","this","_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","enumerable","configurable","writable","wrap","Generator","create","Context","h","f","Error","s","done","method","arg","delegate","maybeInvokeDelegate","return","TypeError","y","tryCatch","type","resultName","next","nextLoc","sent","_sent","dispatchException","abrupt","p","l","call","GeneratorFunction","GeneratorFunctionPrototype","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","callInvokeWithMethodAndArg","invoke","resolve","__await","then","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","catch","delegateYield","_typeof","asyncGeneratorStep","gen","reject","_next","_throw","key","info","error","_asyncToGenerator","fn","args","arguments","apply","err","undefined","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","input","hint","prim","toPrimitive","String","Number","res","_toPrimitive","_toPropertyKey","_createClass","protoProps","staticProps","_arrayLikeToArray","arr","len","arr2","Array","_createForOfIteratorHelper","allowArrayLike","it","isArray","minLen","toString","from","test","_unsupportedIterableToArray","F","normalCompletion","didErr","step","message","window","atob","bind","replace","fromCharCode","indexOf","header","JSON","parse","decodeURIComponent","charCodeAt","toUpperCase","split","extendStatics","b","__extends","__","__assign","assign","__awaiter","thisArg","_arguments","P","generator","fulfilled","rejected","result","__generator","body","_","label","trys","ops","verb","throw","op","__values","m","__spreadArrays","il","k","j","jl","version","wait","durationMs","resolveWith","setTimeout","awaitIfAsync","action","callback","returnedValue","forEachWithBreaks","items","loopReleaseInterval","lastLoopReleaseTime","now","_a","Date","x64Add","x64Multiply","x64Rotl","x64LeftShift","x64Xor","x64Fmix","toInt","parseInt","toFloat","parseFloat","replaceNaN","replacement","countTruthy","reduce","sum","round","base","Math","abs","counterBase","ensureErrorWithMessage","loadSources","sources","sourceOptions","excludeSources","includedSources","filter","sourceKey","excludes","haystack","needle","includes","sourceGetters","index","source","sourceLoadPromise","resolveLoad","loadStartTime","loadArgs","_i","loadResult","loadDuration","duration","resolveGet","getStartTime","getArgs","finalizeSource","components","includedSources_1","componentPromises","_loop_1","hasAllComponentPromises","component","all","isTrident","w","navigator","isChromium","vendor","isWebKit","isDesktopSafari","isAndroid","isItChromium","isItGecko","_b","document","documentElement","style","appVersion","makeInnerError","withIframe","initialHtml","domPollInterval","_c","iframe","_d","createElement","_resolve","_reject","isComplete","onload","onerror","checkReadyState","setProperty","position","top","left","visibility","srcdoc","src","appendChild","contentWindow","readyState","parentNode","removeChild","selectorToElement","selector","errorMessage","tagMatch","exec","tag","attributes","partsRegex","addAttribute","match","part","attributeMatch","parseSimpleCssSelector","element","name_1","join","priority","name_2","property","addStyleString","setAttribute","baseFonts","fontList","save","canvas","toDataURL","screenFrameBackup","screenFrameSizeTimeoutId","screenFrameCheckInterval","getScreenFrame","checkScreenFrame","_this","frameSize","getCurrentScreenFrame","isFrameSizeNull","fullscreenElement","msFullscreenElement","mozFullScreenElement","webkitFullscreenElement","exitFullscreen","msExitFullscreen","mozCancelFullScreen","webkitExitFullscreen","screen","availTop","width","availWidth","availLeft","height","availHeight","filters","abpIndo","abpvn","adBlockFinland","adBlockPersian","adBlockWarningRemoval","adGuardAnnoyances","adGuardBase","adGuardChinese","adGuardFrench","adGuardGerman","adGuardJapanese","adGuardMobile","adGuardRussian","adGuardSocial","adGuardSpanishPortuguese","adGuardTrackingProtection","adGuardTurkish","bulgarian","easyList","easyListChina","easyListCookie","easyListCzechSlovak","easyListDutch","easyListGermany","easyListItaly","easyListLithuania","estonian","fanboyAnnoyances","fanboyAntiFacebook","fanboyEnhancedTrackers","fanboySocial","frellwitSwedish","greekAdBlock","hungarian","iDontCareAboutCookies","icelandicAbp","latvian","listKr","listeAr","listeFr","officialPolish","ro","ruAd","thaiAds","webAnnoyancesUltralist","forceShow","doesMatch","matchMedia","matches","doesMatch$1","doesMatch$2","doesMatch$3","doesMatch$4","fallbackFn","M","presets","default","apple","font","serif","fontFamily","sans","mono","min","fontSize","system","fonts","holder","spansContainer","defaultWidth","defaultHeight","createSpan","span","textContent","createSpanWithFonts","fontToDetect","baseFont","baseFontsSpans","map","fontsSpans","spans","fontList_1","initializeFontsSpans","offsetWidth","offsetHeight","fontSpans","some","baseFontIndex","domBlockers","debug","filterNames","blockedSelectors","selectors","root","elements","offsetParent","getBlockedSelectors","concat","filterName","printDebug","console","log","activeBlockers","sort","fontPreferences","withNaturalFonts","container","sizes","text","whiteSpace","_e","_f","_g","_h","getBoundingClientRect","containerWidthPx","iframeWindow","iframeDocument","iframeBody","bodyStyle","linesOfText","webkitTextSizeAdjust","textSizeAdjust","zoom","devicePixelRatio","audio","AudioContext","OfflineAudioContext","webkitOfflineAudioContext","isWebKit606OrNewer","context","finalize","compressor","oscillator","createOscillator","frequency","createDynamicsCompressor","threshold","knee","ratio","attack","release","connect","destination","start","renderPromise","isFinalized","renderTryCount","startedRunningAt","startRunningTimeout","oncomplete","event","renderedBuffer","tryRender","startRendering","state","hidden","finishRendering","fingerprintPromise","buffer","getHash","signal","getChannelData","subarray","hash","screenFrame","screenFrameGetter","processSize","sideSize","osCpu","oscpu","languages","language","userLanguage","browserLanguage","systemLanguage","Intl","Reflect","colorDepth","deviceMemory","screenResolution","parseDimension","dimensions","hardwareConcurrency","timezone","DateTimeFormat","resolvedOptions","timeZone","currentYear","getFullYear","offset","max","getTimezoneOffset","sessionStorage","localStorage","indexedDB","openDatabase","cpuClass","platform","screenRatio","Element","webkitRequestFullscreen","isIPad","plugins","rawPlugins","plugin","mimeTypes","mimeType","suffixes","description","getContext","winding","rect","isPointInPath","geometry","globalCompositeOperation","color","x","fillStyle","beginPath","arc","PI","closePath","fill","makeGeometryImage","textBaseline","fillRect","printedText","fillText","touchSupport","touchEvent","maxTouchPoints","msMaxTouchPoints","createEvent","touchStart","vendorFlavors","flavors","cookiesEnabled","cookie","colorGamut","gamut","invertedColors","forcedColors","monochrome","contrast","reducedMotion","hdr","math","acos","acosh","asin","asinh","atanh","atan","sin","sinh","cos","cosh","tan","tanh","exp","expm1","log1p","acoshPf","sqrt","asinhPf","atanhPf","sinhPf","coshPf","tanhPf","expm1Pf","log1pPf","powPI","pow","getConfidence","openConfidenceScore","getOpenConfidenceScore","proConfidenceScore","score","comment","componentsToDebugString","stringify","_key","stack","hashComponents","x64hash128","componentKey","componentsToCanonicalString","seed","remainder","bytes","h1","h2","k1","k2","c1","c2","prepareForSources","delayFallback","deadlineTimeout","fallbackTimeout","Infinity","requestIdleCallback","timeout","makeAgent","getComponents","creationTime","get","options","startTime","confidence","visitorId","visitorIdCache","userAgent","_refreshToken","FingerprintJS","load","monitoring","__fpjs_d_m","random","request","XMLHttpRequest","open","send","coreTools","getParams","url","params","location","substring","section","query","parseQuery","vars","query_string","pair","toggleFullscreen","requestFullscreen","formatNumber","numb","formatMoney","divider","toFixed","clipboardText","clipboard","writeText","textArea","focus","select","successful","execCommand","hashCode","string","getTime","getFingerprint","fp","jwtDecode","token","coreTokens","_refreshInterval","initRefresh","deinitRefresh","setInterval","refreshToken","clearInterval","_callee","success","fail","tokenData","_context","getRefreshToken","clearRefreshToken","t0","$","t1","coreMain","basePath","t2","t3","t4","t5","refresh_token","t6","t7","dataType","contentType","data","ajax","response","access_token","setAccessToken","setRefreshToken","error_message","CoreUI","notice","danger","responseJSON","responseText","_x","_x2","accessToken","setItem","getAccessToken","dateExpired","expires","toUTCString","authToken","getItem","clearAccessToken","removeItem","tpl","commonjsRequire","path","supportsCssVariables_","code","1","require","fs","utils","scopeOptionWarned","_VERSION_STRING","_OPTS_PASSABLE_WITH_DATA","_OPTS_PASSABLE_WITH_DATA_EXPRESS","_BOM","_JS_IDENTIFIER","resolvePaths","paths","filePath","resolveInclude","existsSync","handleCache","template","func","filename","hasTemplate","cache","fileLoader","compile","set","includeFile","opts","shallowCopy","createNullProtoObjWherePossible","includePath","views","includer","escapeFunction","getIncludePath","includerResult","rethrow","str","flnm","lineno","esc","lines","end","line","curr","stripSemi","Template","optsParam","hasOwnOnlyObject","templateText","mode","truncate","currentLine","client","escape","escapeXML","compileDebug","openDelimiter","closeDelimiter","delimiter","strict","rmWhitespace","outputFunctionName","localsName","destructuredLocals","legacyInclude","_with","regex","createRegex","readFileSync","promiseImpl","Function","isDir","dirname","extname","scope","warn","render","shallowCopyFromList","renderFile","cb","shift","settings","viewOpts","clearCache","modes","EVAL","ESCAPED","RAW","COMMENT","LITERAL","delim","escapeRegExpChars","close","RegExp","prepended","appended","escapeFn","sanitizedFilename","generateSource","destructuring","ctor","SyntaxError","returnedFn","includeData","basename","parseTemplateText","closing","scanLine","firstPos","pat","_addOutput","newLineCount","lastIndexOf","__express","VERSION","ejs","../package.json","./utils","2","hasOwn","obj","regExpChars","_ENCODE_HTML_RULES","&","<",">","\"","'","_MATCH_HTML","encode_char","escapeXMLToString","markup","to","list","_data","val","remove","hyphenToCamel","3","4","process","normalizeArray","parts","allowAboveRoot","up","last","splice","unshift","xs","resolvedPath","resolvedAbsolute","cwd","normalize","isAbsolute","trailingSlash","substr","relative","trim","fromParts","toParts","samePartsLength","outputParts","sep","hasRoot","matchedSlash","ext","startDot","startPart","preDotState","_process","5","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","clearTimeout","runTimeout","fun","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","run","marker","runClearTimeout","Item","array","noop","nextTick","title","browser","env","argv","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","chdir","dir","umask","6","keywords","author","license","bin","main","jsdelivr","unpkg","repository","bugs","homepage","dependencies","jake","devDependencies","browserify","eslint","git-directory-deploy","jsdoc","lru-cache","mocha","uglify-js","engines","node","scripts","MDCFoundation","init","destroy","adapter","MDCComponent","attachTo","initialize","getDefaultFoundation","initialSyncWithDOM","foundation","listen","evtType","handler","addEventListener","unlisten","removeEventListener","evtData","shouldBubble","evt","CustomEvent","bubbles","detail","initCustomEvent","dispatchEvent","pack","ar","__spreadArray","__read","applyPassive","globalObj","passiveSupported","passive","supportsPassiveOption","_super","cssClasses$1","BG_FOCUSED","FG_ACTIVATION","FG_DEACTIVATION","ROOT","UNBOUNDED","strings$1","VAR_FG_SCALE","VAR_FG_SIZE","VAR_FG_TRANSLATE_END","VAR_FG_TRANSLATE_START","VAR_LEFT","VAR_TOP","numbers","DEACTIVATION_TIMEOUT_MS","FG_DEACTIVATION_MS","INITIAL_ORIGIN_SCALE","PADDING","TAP_DELAY_MS","ACTIVATION_EVENT_TYPES","POINTER_DEACTIVATION_EVENT_TYPES","activatedTargets","MDCRippleFoundation","addClass","browserSupportsCssVars","computeBoundingRect","right","bottom","containsEventTarget","deregisterDocumentInteractionHandler","deregisterInteractionHandler","deregisterResizeHandler","getWindowPageOffset","isSurfaceActive","isSurfaceDisabled","isUnbounded","registerDocumentInteractionHandler","registerInteractionHandler","registerResizeHandler","removeClass","updateCssVariable","ROOT_1","UNBOUNDED_1","supportsPressRipple","registerRootHandlers","cssClasses","requestAnimationFrame","layoutInternal","ROOT_2","UNBOUNDED_2","activationTimer","fgDeactivationRemovalTimer","removeCssVars","deregisterRootHandlers","deregisterDeactivationHandlers","activate","activateImpl","deactivate","deactivateImpl","layout","layoutFrame","cancelAnimationFrame","setUnbounded","unbounded","handleFocus","handleBlur","defaultActivationState","activationEvent","hasDeactivationUXRun","isActivated","isProgrammatic","wasActivatedByPointer","wasElementMadeActive","e_1","ACTIVATION_EVENT_TYPES_1","ACTIVATION_EVENT_TYPES_1_1","activateHandler","e_1_1","resizeHandler","focusHandler","blurHandler","registerDeactivationHandlers","e_2","deactivateHandler","POINTER_DEACTIVATION_EVENT_TYPES_1","POINTER_DEACTIVATION_EVENT_TYPES_1_1","e_2_1","e_3","ACTIVATION_EVENT_TYPES_2","ACTIVATION_EVENT_TYPES_2_1","e_3_1","e_4","POINTER_DEACTIVATION_EVENT_TYPES_2","POINTER_DEACTIVATION_EVENT_TYPES_2_1","e_4_1","rippleStrings","strings","activationState","previousActivationEvent","resetActivationState","checkElementMadeActive","animateActivation","keyCode","startPoint","endPoint","translateStart","translateEnd","getFgTranslationCoordinates","rmBoundedActivationClasses","activationTimerCallback","pageOffset","clientRect","normalizedX","documentX","documentY","normalizedY","changedTouches","pageX","pageY","getNormalizedEventCoords","frame","initialSize","runDeactivationUXLogicIfReady","activationAnimationHasEnded","animateDeactivation","maxDim","maxRadius","floor","fgScale","updateLayoutCssVars","unboundedCoords","defaultAdapter","MDCRipple","ripple","createAdapter","className","classList","add","supportsCssVariables","windowObj","forceRefresh","CSS","supports","explicitlySupportsCssVars","weAreFeatureDetectingSafari10plus","supportsCssVars","contains","pageXOffset","pageYOffset","webkitMatchesSelector","msMatchesSelector","Boolean","disabled","varName","dataset","cssPropertyNameMap","animation","prefixed","standard","transform","transition","getCorrectPropertyName","cssProperty","el","CLOSED_CLASS","CLOSED_ANIMATION_OFF_CLASS","INDETERMINATE_CLASS","REVERSED_CLASS","ANIMATION_READY_CLASS","ARIA_HIDDEN","ARIA_VALUEMAX","ARIA_VALUEMIN","ARIA_VALUENOW","BUFFER_BAR_SELECTOR","FLEX_BASIS","PRIMARY_BAR_SELECTOR","animationDimensionPercentages","MDCLinearProgressFoundation","attachResizeObserver","forceLayout","getWidth","hasClass","setBufferBarStyle","setPrimaryBarStyle","setStyle","removeAttribute","determinate","progress","observer","entries","entries_1","entries_1_1","entry","contentRect","calculateAndSetDimensions","setDeterminate","isDeterminate","setPrimaryBarProgress","setBufferBarProgress","setProgress","getProgress","setBuffer","getBuffer","isClosed","handleTransitionEnd","disconnect","restartAnimation","progressValue","transformProp","primaryHalf","primaryFull","secondaryQuarter","secondaryHalf","secondaryFull","MDCLinearProgress","styleProperty","bufferBar","querySelector","primaryBar","attributeName","RO","ResizeObserver","observe","coreMenu","_user","_system","_modules","_events","getPageContent","css","conf","theme","_setTheme","preloader","show","_step","_iterator","querySelectorAll","button","_initInstall","html","ajaxSend","jqxhr","setRequestHeader","user","id","login","avatar","modules","alert","_renderMenu","_initComponents","hide","uri","status","viewPage","reload","textStatus","jqXHR","_setActiveModule","getResponseHeader","contents","clearResponseObj","responseObj","renderContents","_buffer","each","item","_renderContent","contentItem","mainContainer","empty","content","append","opacity","margin-top","animate","marginTop","specialEasing","_trigger","loader","loaderElement","prepend","fadeOut","eventName","singleExec","isObject","initEvents","is_visible_index","sections","hover","level2","_step2","_iterator2","menuItem","ctrlKey","_drawerToggle","_step3","_iterator3","parent","toggleClass","preventDefault","warning","buttons","click","coreAuth","logout","_step4","_iterator4","_button","_initSwipe","direction","table","setSettings","lang","form","moduleName","sectionName","titles","xDown","touches","clientX","yDown","clientY","xDiff","yDiff","xUp","yUp","menu","install","platforms","prompt","userChoice","choiceResult","outcome","promise","styles","bg_color","text_color","coreTheme","activePage","_hashChangeCallbacks","pageName","pageContent","$otherPages","fadeIn","hashChange","viewActualContainer","onhashchange","safeAdd","let","lsw","md5cmn","q","num","cnt","bitRotateLeft","md5ff","md5gg","md5hh","md5ii","firstChunk","chunks","secondChunk","thirdChunk","fourthChunk","binlMD5","commands","newChunks","chunk","binl2rstr","output","rstr2binl","cc","resp","rstrMD5","strHMACMD5","bkey","ipad","opad","rstr2hex","hexTab","pos","str2rstrUTF8","unicodeString","rawMD5","rawHMACMD5","_login","MD5","raw","that","registration","logo","_setLogo","loadConfig","authPanel","_viewContainer","$btn","attr","find","removeAttr","checkValidity","password","headers","Access-Token","serialize","registrationComplete","pass1","pass2","bg_video","bg_img","coreUiTableInstance","_table","callbackSuccess","recordsId","getSelectedRecordsId","Core$1","defalt","checked","questionY","questionN","isChecked","is","question","isAccept","onHide","prop","coreUiTable$1","tableId","coreUiFormInstance","_form","_settings","auth","tools","ui","formId","extend","getSetting","en","Вход"],"mappings":"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"}