{"version":3,"file":"core.min.js","sources":["core.min.js"],"sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.Core = factory());\n})(this, (function () { 'use strict';\n\n  function _regeneratorRuntime() {\n    _regeneratorRuntime = function () {\n      return e;\n    };\n    var t,\n      e = {},\n      r = Object.prototype,\n      n = r.hasOwnProperty,\n      o = Object.defineProperty || function (t, e, r) {\n        t[e] = r.value;\n      },\n      i = \"function\" == typeof Symbol ? Symbol : {},\n      a = i.iterator || \"@@iterator\",\n      c = i.asyncIterator || \"@@asyncIterator\",\n      u = i.toStringTag || \"@@toStringTag\";\n    function define(t, e, r) {\n      return Object.defineProperty(t, e, {\n        value: r,\n        enumerable: !0,\n        configurable: !0,\n        writable: !0\n      }), t[e];\n    }\n    try {\n      define({}, \"\");\n    } catch (t) {\n      define = function (t, e, r) {\n        return t[e] = r;\n      };\n    }\n    function wrap(t, e, r, n) {\n      var i = e && e.prototype instanceof Generator ? e : Generator,\n        a = Object.create(i.prototype),\n        c = new Context(n || []);\n      return o(a, \"_invoke\", {\n        value: makeInvokeMethod(t, r, c)\n      }), a;\n    }\n    function tryCatch(t, e, r) {\n      try {\n        return {\n          type: \"normal\",\n          arg: t.call(e, r)\n        };\n      } catch (t) {\n        return {\n          type: \"throw\",\n          arg: t\n        };\n      }\n    }\n    e.wrap = wrap;\n    var h = \"suspendedStart\",\n      l = \"suspendedYield\",\n      f = \"executing\",\n      s = \"completed\",\n      y = {};\n    function Generator() {}\n    function GeneratorFunction() {}\n    function GeneratorFunctionPrototype() {}\n    var p = {};\n    define(p, a, function () {\n      return this;\n    });\n    var d = Object.getPrototypeOf,\n      v = d && d(d(values([])));\n    v && v !== r && n.call(v, a) && (p = v);\n    var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);\n    function defineIteratorMethods(t) {\n      [\"next\", \"throw\", \"return\"].forEach(function (e) {\n        define(t, e, function (t) {\n          return this._invoke(e, t);\n        });\n      });\n    }\n    function AsyncIterator(t, e) {\n      function invoke(r, o, i, a) {\n        var c = tryCatch(t[r], t, o);\n        if (\"throw\" !== c.type) {\n          var u = c.arg,\n            h = u.value;\n          return h && \"object\" == typeof h && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) {\n            invoke(\"next\", t, i, a);\n          }, function (t) {\n            invoke(\"throw\", t, i, a);\n          }) : e.resolve(h).then(function (t) {\n            u.value = t, i(u);\n          }, function (t) {\n            return invoke(\"throw\", t, i, a);\n          });\n        }\n        a(c.arg);\n      }\n      var r;\n      o(this, \"_invoke\", {\n        value: function (t, n) {\n          function callInvokeWithMethodAndArg() {\n            return new e(function (e, r) {\n              invoke(t, n, e, r);\n            });\n          }\n          return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n        }\n      });\n    }\n    function makeInvokeMethod(e, r, n) {\n      var o = h;\n      return function (i, a) {\n        if (o === f) throw new Error(\"Generator is already running\");\n        if (o === s) {\n          if (\"throw\" === i) throw a;\n          return {\n            value: t,\n            done: !0\n          };\n        }\n        for (n.method = i, n.arg = a;;) {\n          var c = n.delegate;\n          if (c) {\n            var u = maybeInvokeDelegate(c, n);\n            if (u) {\n              if (u === y) continue;\n              return u;\n            }\n          }\n          if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) {\n            if (o === h) throw o = s, n.arg;\n            n.dispatchException(n.arg);\n          } else \"return\" === n.method && n.abrupt(\"return\", n.arg);\n          o = f;\n          var p = tryCatch(e, r, n);\n          if (\"normal\" === p.type) {\n            if (o = n.done ? s : l, p.arg === y) continue;\n            return {\n              value: p.arg,\n              done: n.done\n            };\n          }\n          \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg);\n        }\n      };\n    }\n    function maybeInvokeDelegate(e, r) {\n      var n = r.method,\n        o = e.iterator[n];\n      if (o === t) return r.delegate = null, \"throw\" === n && e.iterator.return && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y;\n      var i = tryCatch(o, e.iterator, r.arg);\n      if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y;\n      var a = i.arg;\n      return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y);\n    }\n    function pushTryEntry(t) {\n      var e = {\n        tryLoc: t[0]\n      };\n      1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);\n    }\n    function resetTryEntry(t) {\n      var e = t.completion || {};\n      e.type = \"normal\", delete e.arg, t.completion = e;\n    }\n    function Context(t) {\n      this.tryEntries = [{\n        tryLoc: \"root\"\n      }], t.forEach(pushTryEntry, this), this.reset(!0);\n    }\n    function values(e) {\n      if (e || \"\" === e) {\n        var r = e[a];\n        if (r) return r.call(e);\n        if (\"function\" == typeof e.next) return e;\n        if (!isNaN(e.length)) {\n          var o = -1,\n            i = function next() {\n              for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next;\n              return next.value = t, next.done = !0, next;\n            };\n          return i.next = i;\n        }\n      }\n      throw new TypeError(typeof e + \" is not iterable\");\n    }\n    return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", {\n      value: GeneratorFunctionPrototype,\n      configurable: !0\n    }), o(GeneratorFunctionPrototype, \"constructor\", {\n      value: GeneratorFunction,\n      configurable: !0\n    }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) {\n      var e = \"function\" == typeof t && t.constructor;\n      return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name));\n    }, e.mark = function (t) {\n      return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t;\n    }, e.awrap = function (t) {\n      return {\n        __await: t\n      };\n    }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () {\n      return this;\n    }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) {\n      void 0 === i && (i = Promise);\n      var a = new AsyncIterator(wrap(t, r, n, o), i);\n      return e.isGeneratorFunction(r) ? a : a.next().then(function (t) {\n        return t.done ? t.value : a.next();\n      });\n    }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () {\n      return this;\n    }), define(g, \"toString\", function () {\n      return \"[object Generator]\";\n    }), e.keys = function (t) {\n      var e = Object(t),\n        r = [];\n      for (var n in e) r.push(n);\n      return r.reverse(), function next() {\n        for (; r.length;) {\n          var t = r.pop();\n          if (t in e) return next.value = t, next.done = !1, next;\n        }\n        return next.done = !0, next;\n      };\n    }, e.values = values, Context.prototype = {\n      constructor: Context,\n      reset: function (e) {\n        if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);\n      },\n      stop: function () {\n        this.done = !0;\n        var t = this.tryEntries[0].completion;\n        if (\"throw\" === t.type) throw t.arg;\n        return this.rval;\n      },\n      dispatchException: function (e) {\n        if (this.done) throw e;\n        var r = this;\n        function handle(n, o) {\n          return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o;\n        }\n        for (var o = this.tryEntries.length - 1; o >= 0; --o) {\n          var i = this.tryEntries[o],\n            a = i.completion;\n          if (\"root\" === i.tryLoc) return handle(\"end\");\n          if (i.tryLoc <= this.prev) {\n            var c = n.call(i, \"catchLoc\"),\n              u = n.call(i, \"finallyLoc\");\n            if (c && u) {\n              if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);\n              if (this.prev < i.finallyLoc) return handle(i.finallyLoc);\n            } else if (c) {\n              if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);\n            } else {\n              if (!u) throw new Error(\"try statement without catch or finally\");\n              if (this.prev < i.finallyLoc) return handle(i.finallyLoc);\n            }\n          }\n        }\n      },\n      abrupt: function (t, e) {\n        for (var r = this.tryEntries.length - 1; r >= 0; --r) {\n          var o = this.tryEntries[r];\n          if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) {\n            var i = o;\n            break;\n          }\n        }\n        i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);\n        var a = i ? i.completion : {};\n        return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a);\n      },\n      complete: function (t, e) {\n        if (\"throw\" === t.type) throw t.arg;\n        return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y;\n      },\n      finish: function (t) {\n        for (var e = this.tryEntries.length - 1; e >= 0; --e) {\n          var r = this.tryEntries[e];\n          if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;\n        }\n      },\n      catch: function (t) {\n        for (var e = this.tryEntries.length - 1; e >= 0; --e) {\n          var r = this.tryEntries[e];\n          if (r.tryLoc === t) {\n            var n = r.completion;\n            if (\"throw\" === n.type) {\n              var o = n.arg;\n              resetTryEntry(r);\n            }\n            return o;\n          }\n        }\n        throw new Error(\"illegal catch attempt\");\n      },\n      delegateYield: function (e, r, n) {\n        return this.delegate = {\n          iterator: values(e),\n          resultName: r,\n          nextLoc: n\n        }, \"next\" === this.method && (this.arg = t), y;\n      }\n    }, e;\n  }\n  function _typeof(o) {\n    \"@babel/helpers - typeof\";\n\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n      return typeof o;\n    } : function (o) {\n      return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n    }, _typeof(o);\n  }\n  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n    try {\n      var info = gen[key](arg);\n      var value = info.value;\n    } catch (error) {\n      reject(error);\n      return;\n    }\n    if (info.done) {\n      resolve(value);\n    } else {\n      Promise.resolve(value).then(_next, _throw);\n    }\n  }\n  function _asyncToGenerator(fn) {\n    return function () {\n      var self = this,\n        args = arguments;\n      return new Promise(function (resolve, reject) {\n        var gen = fn.apply(self, args);\n        function _next(value) {\n          asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n        }\n        function _throw(err) {\n          asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n        }\n        _next(undefined);\n      });\n    };\n  }\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n  function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n    }\n  }\n  function _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    Object.defineProperty(Constructor, \"prototype\", {\n      writable: false\n    });\n    return Constructor;\n  }\n  function _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n  }\n  function _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n    return arr2;\n  }\n  function _createForOfIteratorHelper(o, allowArrayLike) {\n    var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n    if (!it) {\n      if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n        if (it) o = it;\n        var i = 0;\n        var F = function () {};\n        return {\n          s: F,\n          n: function () {\n            if (i >= o.length) return {\n              done: true\n            };\n            return {\n              done: false,\n              value: o[i++]\n            };\n          },\n          e: function (e) {\n            throw e;\n          },\n          f: F\n        };\n      }\n      throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n    }\n    var normalCompletion = true,\n      didErr = false,\n      err;\n    return {\n      s: function () {\n        it = it.call(o);\n      },\n      n: function () {\n        var step = it.next();\n        normalCompletion = step.done;\n        return step;\n      },\n      e: function (e) {\n        didErr = true;\n        err = e;\n      },\n      f: function () {\n        try {\n          if (!normalCompletion && it.return != null) it.return();\n        } finally {\n          if (didErr) throw err;\n        }\n      }\n    };\n  }\n  function _toPrimitive(input, hint) {\n    if (typeof input !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n      var res = prim.call(input, hint || \"default\");\n      if (typeof res !== \"object\") return res;\n      throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n  }\n  function _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return typeof key === \"symbol\" ? key : String(key);\n  }\n\n  function e(e) {\n    this.message = e;\n  }\n  e.prototype = new Error(), e.prototype.name = \"InvalidCharacterError\";\n  var r = \"undefined\" != typeof window && window.atob && window.atob.bind(window) || function (r) {\n    var t = String(r).replace(/=+$/, \"\");\n    if (t.length % 4 == 1) throw new e(\"'atob' failed: The string to be decoded is not correctly encoded.\");\n    for (var n, o, a = 0, i = 0, c = \"\"; o = t.charAt(i++); ~o && (n = a % 4 ? 64 * n + o : o, a++ % 4) ? c += String.fromCharCode(255 & n >> (-2 * a & 6)) : 0) o = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\".indexOf(o);\n    return c;\n  };\n  function t(e) {\n    var t = e.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    switch (t.length % 4) {\n      case 0:\n        break;\n      case 2:\n        t += \"==\";\n        break;\n      case 3:\n        t += \"=\";\n        break;\n      default:\n        throw \"Illegal base64url string!\";\n    }\n    try {\n      return function (e) {\n        return decodeURIComponent(r(e).replace(/(.)/g, function (e, r) {\n          var t = r.charCodeAt(0).toString(16).toUpperCase();\n          return t.length < 2 && (t = \"0\" + t), \"%\" + t;\n        }));\n      }(t);\n    } catch (e) {\n      return r(t);\n    }\n  }\n  function n(e) {\n    this.message = e;\n  }\n  function o(e, r) {\n    if (\"string\" != typeof e) throw new n(\"Invalid token specified\");\n    var o = !0 === (r = r || {}).header ? 0 : 1;\n    try {\n      return JSON.parse(t(e.split(\".\")[o]));\n    } catch (e) {\n      throw new n(\"Invalid token specified: \" + e.message);\n    }\n  }\n  n.prototype = new Error(), n.prototype.name = \"InvalidTokenError\";\n\n  /******************************************************************************\n  Copyright (c) Microsoft Corporation.\n\n  Permission to use, copy, modify, and/or distribute this software for any\n  purpose with or without fee is hereby granted.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\n  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n  PERFORMANCE OF THIS SOFTWARE.\n  ***************************************************************************** */\n  /* global Reflect, Promise, SuppressedError, Symbol */\n\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  function __extends(d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  }\n  var __assign = function () {\n    __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n    };\n    return __assign.apply(this, arguments);\n  };\n  function __awaiter(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n      return value instanceof P ? value : new P(function (resolve) {\n        resolve(value);\n      });\n    }\n    return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) {\n        try {\n          step(generator.next(value));\n        } catch (e) {\n          reject(e);\n        }\n      }\n      function rejected(value) {\n        try {\n          step(generator[\"throw\"](value));\n        } catch (e) {\n          reject(e);\n        }\n      }\n      function step(result) {\n        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n      }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n  }\n  function __generator(thisArg, body) {\n    var _ = {\n        label: 0,\n        sent: function () {\n          if (t[0] & 1) throw t[1];\n          return t[1];\n        },\n        trys: [],\n        ops: []\n      },\n      f,\n      y,\n      t,\n      g;\n    return g = {\n      next: verb(0),\n      \"throw\": verb(1),\n      \"return\": verb(2)\n    }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n      return this;\n    }), g;\n    function verb(n) {\n      return function (v) {\n        return step([n, v]);\n      };\n    }\n    function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n          case 7:\n            op = _.ops.pop();\n            _.trys.pop();\n            continue;\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n              _.ops.push(op);\n              break;\n            }\n            if (t[2]) _.ops.pop();\n            _.trys.pop();\n            continue;\n        }\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n      if (op[0] & 5) throw op[1];\n      return {\n        value: op[0] ? op[1] : void 0,\n        done: true\n      };\n    }\n  }\n  function __values(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n      next: function () {\n        if (o && i >= o.length) o = void 0;\n        return {\n          value: o && o[i++],\n          done: !o\n        };\n      }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n  }\n  function __read(o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o),\n      r,\n      ar = [],\n      e;\n    try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    } catch (error) {\n      e = {\n        error: error\n      };\n    } finally {\n      try {\n        if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      } finally {\n        if (e) throw e.error;\n      }\n    }\n    return ar;\n  }\n\n  /** @deprecated */\n  function __spreadArrays() {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n    return r;\n  }\n  function __spreadArray(to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n        if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n        ar[i] = from[i];\n      }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n  }\n  typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n    var e = new Error(message);\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n  };\n\n  /**\n   * FingerprintJS v3.3.3 - Copyright (c) FingerprintJS, Inc, 2022 (https://fingerprintjs.com)\n   * Licensed under the MIT (http://www.opensource.org/licenses/mit-license.php) license.\n   *\n   * This software contains code from open-source projects:\n   * MurmurHash3 by Karan Lyons (https://github.com/karanlyons/murmurHash3.js)\n   */\n  var version = \"3.3.3\";\n  function wait(durationMs, resolveWith) {\n    return new Promise(function (resolve) {\n      return setTimeout(resolve, durationMs, resolveWith);\n    });\n  }\n  function requestIdleCallbackIfAvailable(fallbackTimeout, deadlineTimeout) {\n    if (deadlineTimeout === void 0) {\n      deadlineTimeout = Infinity;\n    }\n    var requestIdleCallback = window.requestIdleCallback;\n    if (requestIdleCallback) {\n      // The function `requestIdleCallback` loses the binding to `window` here.\n      // `globalThis` isn't always equal `window` (see https://github.com/fingerprintjs/fingerprintjs/issues/683).\n      // Therefore, an error can occur. `call(window,` prevents the error.\n      return new Promise(function (resolve) {\n        return requestIdleCallback.call(window, function () {\n          return resolve();\n        }, {\n          timeout: deadlineTimeout\n        });\n      });\n    } else {\n      return wait(Math.min(fallbackTimeout, deadlineTimeout));\n    }\n  }\n  function isPromise(value) {\n    return value && typeof value.then === 'function';\n  }\n  /**\n   * Calls a maybe asynchronous function without creating microtasks when the function is synchronous.\n   * Catches errors in both cases.\n   *\n   * If just you run a code like this:\n   * ```\n   * console.time('Action duration')\n   * await action()\n   * console.timeEnd('Action duration')\n   * ```\n   * The synchronous function time can be measured incorrectly because another microtask may run before the `await`\n   * returns the control back to the code.\n   */\n  function awaitIfAsync(action, callback) {\n    try {\n      var returnedValue = action();\n      if (isPromise(returnedValue)) {\n        returnedValue.then(function (result) {\n          return callback(true, result);\n        }, function (error) {\n          return callback(false, error);\n        });\n      } else {\n        callback(true, returnedValue);\n      }\n    } catch (error) {\n      callback(false, error);\n    }\n  }\n  /**\n   * If you run many synchronous tasks without using this function, the JS main loop will be busy and asynchronous tasks\n   * (e.g. completing a network request, rendering the page) won't be able to happen.\n   * This function allows running many synchronous tasks such way that asynchronous tasks can run too in background.\n   */\n  function forEachWithBreaks(items, callback, loopReleaseInterval) {\n    if (loopReleaseInterval === void 0) {\n      loopReleaseInterval = 16;\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var lastLoopReleaseTime, i, now;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            lastLoopReleaseTime = Date.now();\n            i = 0;\n            _a.label = 1;\n          case 1:\n            if (!(i < items.length)) return [3 /*break*/, 4];\n            callback(items[i], i);\n            now = Date.now();\n            if (!(now >= lastLoopReleaseTime + loopReleaseInterval)) return [3 /*break*/, 3];\n            lastLoopReleaseTime = now;\n            // Allows asynchronous actions and microtasks to happen\n            return [4 /*yield*/, wait(0)];\n          case 2:\n            // Allows asynchronous actions and microtasks to happen\n            _a.sent();\n            _a.label = 3;\n          case 3:\n            ++i;\n            return [3 /*break*/, 1];\n          case 4:\n            return [2 /*return*/];\n        }\n      });\n    });\n  }\n\n  /*\n   * Taken from https://github.com/karanlyons/murmurHash3.js/blob/a33d0723127e2e5415056c455f8aed2451ace208/murmurHash3.js\n   */\n  //\n  // Given two 64bit ints (as an array of two 32bit ints) returns the two\n  // added together as a 64bit int (as an array of two 32bit ints).\n  //\n  function x64Add(m, n) {\n    m = [m[0] >>> 16, m[0] & 0xffff, m[1] >>> 16, m[1] & 0xffff];\n    n = [n[0] >>> 16, n[0] & 0xffff, n[1] >>> 16, n[1] & 0xffff];\n    var o = [0, 0, 0, 0];\n    o[3] += m[3] + n[3];\n    o[2] += o[3] >>> 16;\n    o[3] &= 0xffff;\n    o[2] += m[2] + n[2];\n    o[1] += o[2] >>> 16;\n    o[2] &= 0xffff;\n    o[1] += m[1] + n[1];\n    o[0] += o[1] >>> 16;\n    o[1] &= 0xffff;\n    o[0] += m[0] + n[0];\n    o[0] &= 0xffff;\n    return [o[0] << 16 | o[1], o[2] << 16 | o[3]];\n  }\n  //\n  // Given two 64bit ints (as an array of two 32bit ints) returns the two\n  // multiplied together as a 64bit int (as an array of two 32bit ints).\n  //\n  function x64Multiply(m, n) {\n    m = [m[0] >>> 16, m[0] & 0xffff, m[1] >>> 16, m[1] & 0xffff];\n    n = [n[0] >>> 16, n[0] & 0xffff, n[1] >>> 16, n[1] & 0xffff];\n    var o = [0, 0, 0, 0];\n    o[3] += m[3] * n[3];\n    o[2] += o[3] >>> 16;\n    o[3] &= 0xffff;\n    o[2] += m[2] * n[3];\n    o[1] += o[2] >>> 16;\n    o[2] &= 0xffff;\n    o[2] += m[3] * n[2];\n    o[1] += o[2] >>> 16;\n    o[2] &= 0xffff;\n    o[1] += m[1] * n[3];\n    o[0] += o[1] >>> 16;\n    o[1] &= 0xffff;\n    o[1] += m[2] * n[2];\n    o[0] += o[1] >>> 16;\n    o[1] &= 0xffff;\n    o[1] += m[3] * n[1];\n    o[0] += o[1] >>> 16;\n    o[1] &= 0xffff;\n    o[0] += m[0] * n[3] + m[1] * n[2] + m[2] * n[1] + m[3] * n[0];\n    o[0] &= 0xffff;\n    return [o[0] << 16 | o[1], o[2] << 16 | o[3]];\n  }\n  //\n  // Given a 64bit int (as an array of two 32bit ints) and an int\n  // representing a number of bit positions, returns the 64bit int (as an\n  // array of two 32bit ints) rotated left by that number of positions.\n  //\n  function x64Rotl(m, n) {\n    n %= 64;\n    if (n === 32) {\n      return [m[1], m[0]];\n    } else if (n < 32) {\n      return [m[0] << n | m[1] >>> 32 - n, m[1] << n | m[0] >>> 32 - n];\n    } else {\n      n -= 32;\n      return [m[1] << n | m[0] >>> 32 - n, m[0] << n | m[1] >>> 32 - n];\n    }\n  }\n  //\n  // Given a 64bit int (as an array of two 32bit ints) and an int\n  // representing a number of bit positions, returns the 64bit int (as an\n  // array of two 32bit ints) shifted left by that number of positions.\n  //\n  function x64LeftShift(m, n) {\n    n %= 64;\n    if (n === 0) {\n      return m;\n    } else if (n < 32) {\n      return [m[0] << n | m[1] >>> 32 - n, m[1] << n];\n    } else {\n      return [m[1] << n - 32, 0];\n    }\n  }\n  //\n  // Given two 64bit ints (as an array of two 32bit ints) returns the two\n  // xored together as a 64bit int (as an array of two 32bit ints).\n  //\n  function x64Xor(m, n) {\n    return [m[0] ^ n[0], m[1] ^ n[1]];\n  }\n  //\n  // Given a block, returns murmurHash3's final x64 mix of that block.\n  // (`[0, h[0] >>> 1]` is a 33 bit unsigned right shift. This is the\n  // only place where we need to right shift 64bit ints.)\n  //\n  function x64Fmix(h) {\n    h = x64Xor(h, [0, h[0] >>> 1]);\n    h = x64Multiply(h, [0xff51afd7, 0xed558ccd]);\n    h = x64Xor(h, [0, h[0] >>> 1]);\n    h = x64Multiply(h, [0xc4ceb9fe, 0x1a85ec53]);\n    h = x64Xor(h, [0, h[0] >>> 1]);\n    return h;\n  }\n  //\n  // Given a string and an optional seed as an int, returns a 128 bit\n  // hash using the x64 flavor of MurmurHash3, as an unsigned hex.\n  //\n  function x64hash128(key, seed) {\n    key = key || '';\n    seed = seed || 0;\n    var remainder = key.length % 16;\n    var bytes = key.length - remainder;\n    var h1 = [0, seed];\n    var h2 = [0, seed];\n    var k1 = [0, 0];\n    var k2 = [0, 0];\n    var c1 = [0x87c37b91, 0x114253d5];\n    var c2 = [0x4cf5ad43, 0x2745937f];\n    var i;\n    for (i = 0; i < bytes; i = i + 16) {\n      k1 = [key.charCodeAt(i + 4) & 0xff | (key.charCodeAt(i + 5) & 0xff) << 8 | (key.charCodeAt(i + 6) & 0xff) << 16 | (key.charCodeAt(i + 7) & 0xff) << 24, key.charCodeAt(i) & 0xff | (key.charCodeAt(i + 1) & 0xff) << 8 | (key.charCodeAt(i + 2) & 0xff) << 16 | (key.charCodeAt(i + 3) & 0xff) << 24];\n      k2 = [key.charCodeAt(i + 12) & 0xff | (key.charCodeAt(i + 13) & 0xff) << 8 | (key.charCodeAt(i + 14) & 0xff) << 16 | (key.charCodeAt(i + 15) & 0xff) << 24, key.charCodeAt(i + 8) & 0xff | (key.charCodeAt(i + 9) & 0xff) << 8 | (key.charCodeAt(i + 10) & 0xff) << 16 | (key.charCodeAt(i + 11) & 0xff) << 24];\n      k1 = x64Multiply(k1, c1);\n      k1 = x64Rotl(k1, 31);\n      k1 = x64Multiply(k1, c2);\n      h1 = x64Xor(h1, k1);\n      h1 = x64Rotl(h1, 27);\n      h1 = x64Add(h1, h2);\n      h1 = x64Add(x64Multiply(h1, [0, 5]), [0, 0x52dce729]);\n      k2 = x64Multiply(k2, c2);\n      k2 = x64Rotl(k2, 33);\n      k2 = x64Multiply(k2, c1);\n      h2 = x64Xor(h2, k2);\n      h2 = x64Rotl(h2, 31);\n      h2 = x64Add(h2, h1);\n      h2 = x64Add(x64Multiply(h2, [0, 5]), [0, 0x38495ab5]);\n    }\n    k1 = [0, 0];\n    k2 = [0, 0];\n    switch (remainder) {\n      case 15:\n        k2 = x64Xor(k2, x64LeftShift([0, key.charCodeAt(i + 14)], 48));\n      // fallthrough\n      case 14:\n        k2 = x64Xor(k2, x64LeftShift([0, key.charCodeAt(i + 13)], 40));\n      // fallthrough\n      case 13:\n        k2 = x64Xor(k2, x64LeftShift([0, key.charCodeAt(i + 12)], 32));\n      // fallthrough\n      case 12:\n        k2 = x64Xor(k2, x64LeftShift([0, key.charCodeAt(i + 11)], 24));\n      // fallthrough\n      case 11:\n        k2 = x64Xor(k2, x64LeftShift([0, key.charCodeAt(i + 10)], 16));\n      // fallthrough\n      case 10:\n        k2 = x64Xor(k2, x64LeftShift([0, key.charCodeAt(i + 9)], 8));\n      // fallthrough\n      case 9:\n        k2 = x64Xor(k2, [0, key.charCodeAt(i + 8)]);\n        k2 = x64Multiply(k2, c2);\n        k2 = x64Rotl(k2, 33);\n        k2 = x64Multiply(k2, c1);\n        h2 = x64Xor(h2, k2);\n      // fallthrough\n      case 8:\n        k1 = x64Xor(k1, x64LeftShift([0, key.charCodeAt(i + 7)], 56));\n      // fallthrough\n      case 7:\n        k1 = x64Xor(k1, x64LeftShift([0, key.charCodeAt(i + 6)], 48));\n      // fallthrough\n      case 6:\n        k1 = x64Xor(k1, x64LeftShift([0, key.charCodeAt(i + 5)], 40));\n      // fallthrough\n      case 5:\n        k1 = x64Xor(k1, x64LeftShift([0, key.charCodeAt(i + 4)], 32));\n      // fallthrough\n      case 4:\n        k1 = x64Xor(k1, x64LeftShift([0, key.charCodeAt(i + 3)], 24));\n      // fallthrough\n      case 3:\n        k1 = x64Xor(k1, x64LeftShift([0, key.charCodeAt(i + 2)], 16));\n      // fallthrough\n      case 2:\n        k1 = x64Xor(k1, x64LeftShift([0, key.charCodeAt(i + 1)], 8));\n      // fallthrough\n      case 1:\n        k1 = x64Xor(k1, [0, key.charCodeAt(i)]);\n        k1 = x64Multiply(k1, c1);\n        k1 = x64Rotl(k1, 31);\n        k1 = x64Multiply(k1, c2);\n        h1 = x64Xor(h1, k1);\n      // fallthrough\n    }\n\n    h1 = x64Xor(h1, [0, key.length]);\n    h2 = x64Xor(h2, [0, key.length]);\n    h1 = x64Add(h1, h2);\n    h2 = x64Add(h2, h1);\n    h1 = x64Fmix(h1);\n    h2 = x64Fmix(h2);\n    h1 = x64Add(h1, h2);\n    h2 = x64Add(h2, h1);\n    return ('00000000' + (h1[0] >>> 0).toString(16)).slice(-8) + ('00000000' + (h1[1] >>> 0).toString(16)).slice(-8) + ('00000000' + (h2[0] >>> 0).toString(16)).slice(-8) + ('00000000' + (h2[1] >>> 0).toString(16)).slice(-8);\n  }\n\n  /**\n   * Converts an error object to a plain object that can be used with `JSON.stringify`.\n   * If you just run `JSON.stringify(error)`, you'll get `'{}'`.\n   */\n  function errorToObject(error) {\n    var _a;\n    return __assign({\n      name: error.name,\n      message: error.message,\n      stack: (_a = error.stack) === null || _a === void 0 ? void 0 : _a.split('\\n')\n    }, error);\n  }\n\n  /*\n   * This file contains functions to work with pure data only (no browser features, DOM, side effects, etc).\n   */\n  /**\n   * Does the same as Array.prototype.includes but has better typing\n   */\n  function includes(haystack, needle) {\n    for (var i = 0, l = haystack.length; i < l; ++i) {\n      if (haystack[i] === needle) {\n        return true;\n      }\n    }\n    return false;\n  }\n  /**\n   * Like `!includes()` but with proper typing\n   */\n  function excludes(haystack, needle) {\n    return !includes(haystack, needle);\n  }\n  /**\n   * Be careful, NaN can return\n   */\n  function toInt$1(value) {\n    return parseInt(value);\n  }\n  /**\n   * Be careful, NaN can return\n   */\n  function toFloat(value) {\n    return parseFloat(value);\n  }\n  function replaceNaN(value, replacement) {\n    return typeof value === 'number' && isNaN(value) ? replacement : value;\n  }\n  function countTruthy(values) {\n    return values.reduce(function (sum, value) {\n      return sum + (value ? 1 : 0);\n    }, 0);\n  }\n  function round(value, base) {\n    if (base === void 0) {\n      base = 1;\n    }\n    if (Math.abs(base) >= 1) {\n      return Math.round(value / base) * base;\n    } else {\n      // Sometimes when a number is multiplied by a small number, precision is lost,\n      // for example 1234 * 0.0001 === 0.12340000000000001, and it's more precise divide: 1234 / (1 / 0.0001) === 0.1234.\n      var counterBase = 1 / base;\n      return Math.round(value * counterBase) / counterBase;\n    }\n  }\n  /**\n   * Parses a CSS selector into tag name with HTML attributes.\n   * Only single element selector are supported (without operators like space, +, >, etc).\n   *\n   * Multiple values can be returned for each attribute. You decide how to handle them.\n   */\n  function parseSimpleCssSelector(selector) {\n    var _a, _b;\n    var errorMessage = \"Unexpected syntax '\" + selector + \"'\";\n    var tagMatch = /^\\s*([a-z-]*)(.*)$/i.exec(selector);\n    var tag = tagMatch[1] || undefined;\n    var attributes = {};\n    var partsRegex = /([.:#][\\w-]+|\\[.+?\\])/gi;\n    var addAttribute = function (name, value) {\n      attributes[name] = attributes[name] || [];\n      attributes[name].push(value);\n    };\n    for (;;) {\n      var match = partsRegex.exec(tagMatch[2]);\n      if (!match) {\n        break;\n      }\n      var part = match[0];\n      switch (part[0]) {\n        case '.':\n          addAttribute('class', part.slice(1));\n          break;\n        case '#':\n          addAttribute('id', part.slice(1));\n          break;\n        case '[':\n          {\n            var attributeMatch = /^\\[([\\w-]+)([~|^$*]?=(\"(.*?)\"|([\\w-]+)))?(\\s+[is])?\\]$/.exec(part);\n            if (attributeMatch) {\n              addAttribute(attributeMatch[1], (_b = (_a = attributeMatch[4]) !== null && _a !== void 0 ? _a : attributeMatch[5]) !== null && _b !== void 0 ? _b : '');\n            } else {\n              throw new Error(errorMessage);\n            }\n            break;\n          }\n        default:\n          throw new Error(errorMessage);\n      }\n    }\n    return [tag, attributes];\n  }\n  function ensureErrorWithMessage(error) {\n    return error && typeof error === 'object' && 'message' in error ? error : {\n      message: error\n    };\n  }\n  /**\n   * Loads the given entropy source. Returns a function that gets an entropy component from the source.\n   *\n   * The result is returned synchronously to prevent `loadSources` from\n   * waiting for one source to load before getting the components from the other sources.\n   */\n  function loadSource(source, sourceOptions) {\n    var isFinalResultLoaded = function (loadResult) {\n      return typeof loadResult !== 'function';\n    };\n    var sourceLoadPromise = new Promise(function (resolveLoad) {\n      var loadStartTime = Date.now();\n      // `awaitIfAsync` is used instead of just `await` in order to measure the duration of synchronous sources\n      // correctly (other microtasks won't affect the duration).\n      awaitIfAsync(source.bind(null, sourceOptions), function () {\n        var loadArgs = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n          loadArgs[_i] = arguments[_i];\n        }\n        var loadDuration = Date.now() - loadStartTime;\n        // Source loading failed\n        if (!loadArgs[0]) {\n          return resolveLoad(function () {\n            return {\n              error: ensureErrorWithMessage(loadArgs[1]),\n              duration: loadDuration\n            };\n          });\n        }\n        var loadResult = loadArgs[1];\n        // Source loaded with the final result\n        if (isFinalResultLoaded(loadResult)) {\n          return resolveLoad(function () {\n            return {\n              value: loadResult,\n              duration: loadDuration\n            };\n          });\n        }\n        // Source loaded with \"get\" stage\n        resolveLoad(function () {\n          return new Promise(function (resolveGet) {\n            var getStartTime = Date.now();\n            awaitIfAsync(loadResult, function () {\n              var getArgs = [];\n              for (var _i = 0; _i < arguments.length; _i++) {\n                getArgs[_i] = arguments[_i];\n              }\n              var duration = loadDuration + Date.now() - getStartTime;\n              // Source getting failed\n              if (!getArgs[0]) {\n                return resolveGet({\n                  error: ensureErrorWithMessage(getArgs[1]),\n                  duration: duration\n                });\n              }\n              // Source getting succeeded\n              resolveGet({\n                value: getArgs[1],\n                duration: duration\n              });\n            });\n          });\n        });\n      });\n    });\n    return function getComponent() {\n      return sourceLoadPromise.then(function (finalizeSource) {\n        return finalizeSource();\n      });\n    };\n  }\n  /**\n   * Loads the given entropy sources. Returns a function that collects the entropy components.\n   *\n   * The result is returned synchronously in order to allow start getting the components\n   * before the sources are loaded completely.\n   *\n   * Warning for package users:\n   * This function is out of Semantic Versioning, i.e. can change unexpectedly. Usage is at your own risk.\n   */\n  function loadSources(sources, sourceOptions, excludeSources) {\n    var includedSources = Object.keys(sources).filter(function (sourceKey) {\n      return excludes(excludeSources, sourceKey);\n    });\n    var sourceGetters = Array(includedSources.length);\n    // Using `forEachWithBreaks` allows asynchronous sources to complete between synchronous sources\n    // and measure the duration correctly\n    forEachWithBreaks(includedSources, function (sourceKey, index) {\n      sourceGetters[index] = loadSource(sources[sourceKey], sourceOptions);\n    });\n    return function getComponents() {\n      return __awaiter(this, void 0, void 0, function () {\n        var components, _i, includedSources_1, sourceKey, componentPromises, _loop_1, state_1;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              components = {};\n              for (_i = 0, includedSources_1 = includedSources; _i < includedSources_1.length; _i++) {\n                sourceKey = includedSources_1[_i];\n                components[sourceKey] = undefined;\n              }\n              componentPromises = Array(includedSources.length);\n              _loop_1 = function () {\n                var hasAllComponentPromises;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      hasAllComponentPromises = true;\n                      return [4 /*yield*/, forEachWithBreaks(includedSources, function (sourceKey, index) {\n                        if (!componentPromises[index]) {\n                          // `sourceGetters` may be incomplete at this point of execution because `forEachWithBreaks` is asynchronous\n                          if (sourceGetters[index]) {\n                            componentPromises[index] = sourceGetters[index]().then(function (component) {\n                              return components[sourceKey] = component;\n                            });\n                          } else {\n                            hasAllComponentPromises = false;\n                          }\n                        }\n                      })];\n                    case 1:\n                      _a.sent();\n                      if (hasAllComponentPromises) {\n                        return [2 /*return*/, \"break\"];\n                      }\n                      return [4 /*yield*/, wait(1)];\n                    // Lets the source load loop continue\n                    case 2:\n                      _a.sent(); // Lets the source load loop continue\n                      return [2 /*return*/];\n                  }\n                });\n              };\n\n              _a.label = 1;\n            case 1:\n              return [5 /*yield**/, _loop_1()];\n            case 2:\n              state_1 = _a.sent();\n              if (state_1 === \"break\") return [3 /*break*/, 4];\n              _a.label = 3;\n            case 3:\n              return [3 /*break*/, 1];\n            case 4:\n              return [4 /*yield*/, Promise.all(componentPromises)];\n            case 5:\n              _a.sent();\n              return [2 /*return*/, components];\n          }\n        });\n      });\n    };\n  }\n\n  /*\n   * Functions to help with features that vary through browsers\n   */\n  /**\n   * Checks whether the browser is based on Trident (the Internet Explorer engine) without using user-agent.\n   *\n   * Warning for package users:\n   * This function is out of Semantic Versioning, i.e. can change unexpectedly. Usage is at your own risk.\n   */\n  function isTrident() {\n    var w = window;\n    var n = navigator;\n    // The properties are checked to be in IE 10, IE 11 and not to be in other browsers in October 2020\n    return countTruthy(['MSCSSMatrix' in w, 'msSetImmediate' in w, 'msIndexedDB' in w, 'msMaxTouchPoints' in n, 'msPointerEnabled' in n]) >= 4;\n  }\n  /**\n   * Checks whether the browser is based on EdgeHTML (the pre-Chromium Edge engine) without using user-agent.\n   *\n   * Warning for package users:\n   * This function is out of Semantic Versioning, i.e. can change unexpectedly. Usage is at your own risk.\n   */\n  function isEdgeHTML() {\n    // Based on research in October 2020\n    var w = window;\n    var n = navigator;\n    return countTruthy(['msWriteProfilerMark' in w, 'MSStream' in w, 'msLaunchUri' in n, 'msSaveBlob' in n]) >= 3 && !isTrident();\n  }\n  /**\n   * Checks whether the browser is based on Chromium without using user-agent.\n   *\n   * Warning for package users:\n   * This function is out of Semantic Versioning, i.e. can change unexpectedly. Usage is at your own risk.\n   */\n  function isChromium() {\n    // Based on research in October 2020. Tested to detect Chromium 42-86.\n    var w = window;\n    var n = navigator;\n    return countTruthy(['webkitPersistentStorage' in n, 'webkitTemporaryStorage' in n, n.vendor.indexOf('Google') === 0, 'webkitResolveLocalFileSystemURL' in w, 'BatteryManager' in w, 'webkitMediaStream' in w, 'webkitSpeechGrammar' in w]) >= 5;\n  }\n  /**\n   * Checks whether the browser is based on mobile or desktop Safari without using user-agent.\n   * All iOS browsers use WebKit (the Safari engine).\n   *\n   * Warning for package users:\n   * This function is out of Semantic Versioning, i.e. can change unexpectedly. Usage is at your own risk.\n   */\n  function isWebKit() {\n    // Based on research in September 2020\n    var w = window;\n    var n = navigator;\n    return countTruthy(['ApplePayError' in w, 'CSSPrimitiveValue' in w, 'Counter' in w, n.vendor.indexOf('Apple') === 0, 'getStorageUpdates' in n, 'WebKitMediaKeys' in w]) >= 4;\n  }\n  /**\n   * Checks whether the WebKit browser is a desktop Safari.\n   *\n   * Warning for package users:\n   * This function is out of Semantic Versioning, i.e. can change unexpectedly. Usage is at your own risk.\n   */\n  function isDesktopSafari() {\n    var w = window;\n    return countTruthy(['safari' in w, !('DeviceMotionEvent' in w), !('ongestureend' in w), !('standalone' in navigator)]) >= 3;\n  }\n  /**\n   * Checks whether the browser is based on Gecko (Firefox engine) without using user-agent.\n   *\n   * Warning for package users:\n   * This function is out of Semantic Versioning, i.e. can change unexpectedly. Usage is at your own risk.\n   */\n  function isGecko() {\n    var _a, _b;\n    var w = window;\n    // Based on research in September 2020\n    return countTruthy(['buildID' in navigator, 'MozAppearance' in ((_b = (_a = document.documentElement) === null || _a === void 0 ? void 0 : _a.style) !== null && _b !== void 0 ? _b : {}), 'onmozfullscreenchange' in w, 'mozInnerScreenX' in w, 'CSSMozDocumentRule' in w, 'CanvasCaptureMediaStream' in w]) >= 4;\n  }\n  /**\n   * Checks whether the browser is based on Chromium version ≥86 without using user-agent.\n   * It doesn't check that the browser is based on Chromium, there is a separate function for this.\n   */\n  function isChromium86OrNewer() {\n    // Checked in Chrome 85 vs Chrome 86 both on desktop and Android\n    var w = window;\n    return countTruthy([!('MediaSettingsRange' in w), 'RTCEncodedAudioFrame' in w, '' + w.Intl === '[object Intl]', '' + w.Reflect === '[object Reflect]']) >= 3;\n  }\n  /**\n   * Checks whether the browser is based on WebKit version ≥606 (Safari ≥12) without using user-agent.\n   * It doesn't check that the browser is based on WebKit, there is a separate function for this.\n   *\n   * @link https://en.wikipedia.org/wiki/Safari_version_history#Release_history Safari-WebKit versions map\n   */\n  function isWebKit606OrNewer() {\n    // Checked in Safari 9–14\n    var w = window;\n    return countTruthy(['DOMRectList' in w, 'RTCPeerConnectionIceEvent' in w, 'SVGGeometryElement' in w, 'ontransitioncancel' in w]) >= 3;\n  }\n  /**\n   * Checks whether the device is an iPad.\n   * It doesn't check that the engine is WebKit and that the WebKit isn't desktop.\n   */\n  function isIPad() {\n    // Checked on:\n    // Safari on iPadOS (both mobile and desktop modes): 8, 11, 12, 13, 14\n    // Chrome on iPadOS (both mobile and desktop modes): 11, 12, 13, 14\n    // Safari on iOS (both mobile and desktop modes): 9, 10, 11, 12, 13, 14\n    // Chrome on iOS (both mobile and desktop modes): 9, 10, 11, 12, 13, 14\n    // Before iOS 13. Safari tampers the value in \"request desktop site\" mode since iOS 13.\n    if (navigator.platform === 'iPad') {\n      return true;\n    }\n    var s = screen;\n    var screenRatio = s.width / s.height;\n    return countTruthy(['MediaSource' in window, !!Element.prototype.webkitRequestFullscreen,\n    // iPhone 4S that runs iOS 9 matches this. But it won't match the criteria above, so it won't be detected as iPad.\n    screenRatio > 0.65 && screenRatio < 1.53]) >= 2;\n  }\n  /**\n   * Warning for package users:\n   * This function is out of Semantic Versioning, i.e. can change unexpectedly. Usage is at your own risk.\n   */\n  function getFullscreenElement() {\n    var d = document;\n    return d.fullscreenElement || d.msFullscreenElement || d.mozFullScreenElement || d.webkitFullscreenElement || null;\n  }\n  function exitFullscreen() {\n    var d = document;\n    // `call` is required because the function throws an error without a proper \"this\" context\n    return (d.exitFullscreen || d.msExitFullscreen || d.mozCancelFullScreen || d.webkitExitFullscreen).call(d);\n  }\n  /**\n   * Checks whether the device runs on Android without using user-agent.\n   *\n   * Warning for package users:\n   * This function is out of Semantic Versioning, i.e. can change unexpectedly. Usage is at your own risk.\n   */\n  function isAndroid() {\n    var isItChromium = isChromium();\n    var isItGecko = isGecko();\n    // Only 2 browser engines are presented on Android.\n    // Actually, there is also Android 4.1 browser, but it's not worth detecting it at the moment.\n    if (!isItChromium && !isItGecko) {\n      return false;\n    }\n    var w = window;\n    // Chrome removes all words \"Android\" from `navigator` when desktop version is requested\n    // Firefox keeps \"Android\" in `navigator.appVersion` when desktop version is requested\n    return countTruthy(['onorientationchange' in w, 'orientation' in w, isItChromium && !('SharedWorker' in w), isItGecko && /android/i.test(navigator.appVersion)]) >= 2;\n  }\n\n  /**\n   * A deep description: https://fingerprintjs.com/blog/audio-fingerprinting/\n   * Inspired by and based on https://github.com/cozylife/audio-fingerprint\n   */\n  function getAudioFingerprint() {\n    var w = window;\n    var AudioContext = w.OfflineAudioContext || w.webkitOfflineAudioContext;\n    if (!AudioContext) {\n      return -2 /* NotSupported */;\n    }\n    // In some browsers, audio context always stays suspended unless the context is started in response to a user action\n    // (e.g. a click or a tap). It prevents audio fingerprint from being taken at an arbitrary moment of time.\n    // Such browsers are old and unpopular, so the audio fingerprinting is just skipped in them.\n    // See a similar case explanation at https://stackoverflow.com/questions/46363048/onaudioprocess-not-called-on-ios11#46534088\n    if (doesCurrentBrowserSuspendAudioContext()) {\n      return -1 /* KnownToSuspend */;\n    }\n\n    var hashFromIndex = 4500;\n    var hashToIndex = 5000;\n    var context = new AudioContext(1, hashToIndex, 44100);\n    var oscillator = context.createOscillator();\n    oscillator.type = 'triangle';\n    oscillator.frequency.value = 10000;\n    var compressor = context.createDynamicsCompressor();\n    compressor.threshold.value = -50;\n    compressor.knee.value = 40;\n    compressor.ratio.value = 12;\n    compressor.attack.value = 0;\n    compressor.release.value = 0.25;\n    oscillator.connect(compressor);\n    compressor.connect(context.destination);\n    oscillator.start(0);\n    var _a = startRenderingAudio(context),\n      renderPromise = _a[0],\n      finishRendering = _a[1];\n    var fingerprintPromise = renderPromise.then(function (buffer) {\n      return getHash(buffer.getChannelData(0).subarray(hashFromIndex));\n    }, function (error) {\n      if (error.name === \"timeout\" /* Timeout */ || error.name === \"suspended\" /* Suspended */) {\n        return -3 /* Timeout */;\n      }\n\n      throw error;\n    });\n    // Suppresses the console error message in case when the fingerprint fails before requested\n    fingerprintPromise.catch(function () {\n      return undefined;\n    });\n    return function () {\n      finishRendering();\n      return fingerprintPromise;\n    };\n  }\n  /**\n   * Checks if the current browser is known to always suspend audio context\n   */\n  function doesCurrentBrowserSuspendAudioContext() {\n    return isWebKit() && !isDesktopSafari() && !isWebKit606OrNewer();\n  }\n  /**\n   * Starts rendering the audio context.\n   * When the returned function is called, the render process starts finishing.\n   */\n  function startRenderingAudio(context) {\n    var renderTryMaxCount = 3;\n    var renderRetryDelay = 500;\n    var runningMaxAwaitTime = 500;\n    var runningSufficientTime = 5000;\n    var finalize = function () {\n      return undefined;\n    };\n    var resultPromise = new Promise(function (resolve, reject) {\n      var isFinalized = false;\n      var renderTryCount = 0;\n      var startedRunningAt = 0;\n      context.oncomplete = function (event) {\n        return resolve(event.renderedBuffer);\n      };\n      var startRunningTimeout = function () {\n        setTimeout(function () {\n          return reject(makeInnerError(\"timeout\" /* Timeout */));\n        }, Math.min(runningMaxAwaitTime, startedRunningAt + runningSufficientTime - Date.now()));\n      };\n      var tryRender = function () {\n        try {\n          context.startRendering();\n          switch (context.state) {\n            case 'running':\n              startedRunningAt = Date.now();\n              if (isFinalized) {\n                startRunningTimeout();\n              }\n              break;\n            // Sometimes the audio context doesn't start after calling `startRendering` (in addition to the cases where\n            // audio context doesn't start at all). A known case is starting an audio context when the browser tab is in\n            // background on iPhone. Retries usually help in this case.\n            case 'suspended':\n              // The audio context can reject starting until the tab is in foreground. Long fingerprint duration\n              // in background isn't a problem, therefore the retry attempts don't count in background. It can lead to\n              // a situation when a fingerprint takes very long time and finishes successfully. FYI, the audio context\n              // can be suspended when `document.hidden === false` and start running after a retry.\n              if (!document.hidden) {\n                renderTryCount++;\n              }\n              if (isFinalized && renderTryCount >= renderTryMaxCount) {\n                reject(makeInnerError(\"suspended\" /* Suspended */));\n              } else {\n                setTimeout(tryRender, renderRetryDelay);\n              }\n              break;\n          }\n        } catch (error) {\n          reject(error);\n        }\n      };\n      tryRender();\n      finalize = function () {\n        if (!isFinalized) {\n          isFinalized = true;\n          if (startedRunningAt > 0) {\n            startRunningTimeout();\n          }\n        }\n      };\n    });\n    return [resultPromise, finalize];\n  }\n  function getHash(signal) {\n    var hash = 0;\n    for (var i = 0; i < signal.length; ++i) {\n      hash += Math.abs(signal[i]);\n    }\n    return hash;\n  }\n  function makeInnerError(name) {\n    var error = new Error(name);\n    error.name = name;\n    return error;\n  }\n\n  /**\n   * Creates and keeps an invisible iframe while the given function runs.\n   * The given function is called when the iframe is loaded and has a body.\n   * The iframe allows to measure DOM sizes inside itself.\n   *\n   * Notice: passing an initial HTML code doesn't work in IE.\n   *\n   * Warning for package users:\n   * This function is out of Semantic Versioning, i.e. can change unexpectedly. Usage is at your own risk.\n   */\n  function withIframe(action, initialHtml, domPollInterval) {\n    var _a, _b, _c;\n    if (domPollInterval === void 0) {\n      domPollInterval = 50;\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var d, iframe;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            d = document;\n            _d.label = 1;\n          case 1:\n            if (!!d.body) return [3 /*break*/, 3];\n            return [4 /*yield*/, wait(domPollInterval)];\n          case 2:\n            _d.sent();\n            return [3 /*break*/, 1];\n          case 3:\n            iframe = d.createElement('iframe');\n            _d.label = 4;\n          case 4:\n            _d.trys.push([4,, 10, 11]);\n            return [4 /*yield*/, new Promise(function (_resolve, _reject) {\n              var isComplete = false;\n              var resolve = function () {\n                isComplete = true;\n                _resolve();\n              };\n              var reject = function (error) {\n                isComplete = true;\n                _reject(error);\n              };\n              iframe.onload = resolve;\n              iframe.onerror = reject;\n              var style = iframe.style;\n              style.setProperty('display', 'block', 'important'); // Required for browsers to calculate the layout\n              style.position = 'absolute';\n              style.top = '0';\n              style.left = '0';\n              style.visibility = 'hidden';\n              if (initialHtml && 'srcdoc' in iframe) {\n                iframe.srcdoc = initialHtml;\n              } else {\n                iframe.src = 'about:blank';\n              }\n              d.body.appendChild(iframe);\n              // WebKit in WeChat doesn't fire the iframe's `onload` for some reason.\n              // This code checks for the loading state manually.\n              // See https://github.com/fingerprintjs/fingerprintjs/issues/645\n              var checkReadyState = function () {\n                var _a, _b;\n                // The ready state may never become 'complete' in Firefox despite the 'load' event being fired.\n                // So an infinite setTimeout loop can happen without this check.\n                // See https://github.com/fingerprintjs/fingerprintjs/pull/716#issuecomment-986898796\n                if (isComplete) {\n                  return;\n                }\n                // Make sure iframe.contentWindow and iframe.contentWindow.document are both loaded\n                // The contentWindow.document can miss in JSDOM (https://github.com/jsdom/jsdom).\n                if (((_b = (_a = iframe.contentWindow) === null || _a === void 0 ? void 0 : _a.document) === null || _b === void 0 ? void 0 : _b.readyState) === 'complete') {\n                  resolve();\n                } else {\n                  setTimeout(checkReadyState, 10);\n                }\n              };\n              checkReadyState();\n            })];\n          case 5:\n            _d.sent();\n            _d.label = 6;\n          case 6:\n            if (!!((_b = (_a = iframe.contentWindow) === null || _a === void 0 ? void 0 : _a.document) === null || _b === void 0 ? void 0 : _b.body)) return [3 /*break*/, 8];\n            return [4 /*yield*/, wait(domPollInterval)];\n          case 7:\n            _d.sent();\n            return [3 /*break*/, 6];\n          case 8:\n            return [4 /*yield*/, action(iframe, iframe.contentWindow)];\n          case 9:\n            return [2 /*return*/, _d.sent()];\n          case 10:\n            (_c = iframe.parentNode) === null || _c === void 0 ? void 0 : _c.removeChild(iframe);\n            return [7 /*endfinally*/];\n          case 11:\n            return [2 /*return*/];\n        }\n      });\n    });\n  }\n  /**\n   * Creates a DOM element that matches the given selector.\n   * Only single element selector are supported (without operators like space, +, >, etc).\n   */\n  function selectorToElement(selector) {\n    var _a = parseSimpleCssSelector(selector),\n      tag = _a[0],\n      attributes = _a[1];\n    var element = document.createElement(tag !== null && tag !== void 0 ? tag : 'div');\n    for (var _i = 0, _b = Object.keys(attributes); _i < _b.length; _i++) {\n      var name_1 = _b[_i];\n      var value = attributes[name_1].join(' ');\n      // Changing the `style` attribute can cause a CSP error, therefore we change the `style.cssText` property.\n      // https://github.com/fingerprintjs/fingerprintjs/issues/733\n      if (name_1 === 'style') {\n        addStyleString(element.style, value);\n      } else {\n        element.setAttribute(name_1, value);\n      }\n    }\n    return element;\n  }\n  /**\n   * Adds CSS styles from a string in such a way that doesn't trigger a CSP warning (unsafe-inline or unsafe-eval)\n   */\n  function addStyleString(style, source) {\n    // We don't use `style.cssText` because browsers must block it when no `unsafe-eval` CSP is presented: https://csplite.com/csp145/#w3c_note\n    // Even though the browsers ignore this standard, we don't use `cssText` just in case.\n    for (var _i = 0, _a = source.split(';'); _i < _a.length; _i++) {\n      var property = _a[_i];\n      var match = /^\\s*([\\w-]+)\\s*:\\s*(.+?)(\\s*!([\\w-]+))?\\s*$/.exec(property);\n      if (match) {\n        var name_2 = match[1],\n          value = match[2],\n          priority = match[4];\n        style.setProperty(name_2, value, priority || ''); // The last argument can't be undefined in IE11\n      }\n    }\n  }\n\n  // We use m or w because these two characters take up the maximum width.\n  // And we use a LLi so that the same matching fonts can get separated.\n  var testString = 'mmMwWLliI0O&1';\n  // We test using 48px font size, we may use any size. I guess larger the better.\n  var textSize = '48px';\n  // A font will be compared against all the three default fonts.\n  // And if for any default fonts it doesn't match, then that font is available.\n  var baseFonts = ['monospace', 'sans-serif', 'serif'];\n  var fontList = [\n  // This is android-specific font from \"Roboto\" family\n  'sans-serif-thin', 'ARNO PRO', 'Agency FB', 'Arabic Typesetting', 'Arial Unicode MS', 'AvantGarde Bk BT', 'BankGothic Md BT', 'Batang', 'Bitstream Vera Sans Mono', 'Calibri', 'Century', 'Century Gothic', 'Clarendon', 'EUROSTILE', 'Franklin Gothic', 'Futura Bk BT', 'Futura Md BT', 'GOTHAM', 'Gill Sans', 'HELV', 'Haettenschweiler', 'Helvetica Neue', 'Humanst521 BT', 'Leelawadee', 'Letter Gothic', 'Levenim MT', 'Lucida Bright', 'Lucida Sans', 'Menlo', 'MS Mincho', 'MS Outlook', 'MS Reference Specialty', 'MS UI Gothic', 'MT Extra', 'MYRIAD PRO', 'Marlett', 'Meiryo UI', 'Microsoft Uighur', 'Minion Pro', 'Monotype Corsiva', 'PMingLiU', 'Pristina', 'SCRIPTINA', 'Segoe UI Light', 'Serifa', 'SimHei', 'Small Fonts', 'Staccato222 BT', 'TRAJAN PRO', 'Univers CE 55 Medium', 'Vrinda', 'ZWAdobeF'];\n  // kudos to http://www.lalit.org/lab/javascript-css-font-detect/\n  function getFonts() {\n    // Running the script in an iframe makes it not affect the page look and not be affected by the page CSS. See:\n    // https://github.com/fingerprintjs/fingerprintjs/issues/592\n    // https://github.com/fingerprintjs/fingerprintjs/issues/628\n    return withIframe(function (_, _a) {\n      var document = _a.document;\n      var holder = document.body;\n      holder.style.fontSize = textSize;\n      // div to load spans for the default fonts and the fonts to detect\n      var spansContainer = document.createElement('div');\n      var defaultWidth = {};\n      var defaultHeight = {};\n      // creates a span where the fonts will be loaded\n      var createSpan = function (fontFamily) {\n        var span = document.createElement('span');\n        var style = span.style;\n        style.position = 'absolute';\n        style.top = '0';\n        style.left = '0';\n        style.fontFamily = fontFamily;\n        span.textContent = testString;\n        spansContainer.appendChild(span);\n        return span;\n      };\n      // creates a span and load the font to detect and a base font for fallback\n      var createSpanWithFonts = function (fontToDetect, baseFont) {\n        return createSpan(\"'\" + fontToDetect + \"',\" + baseFont);\n      };\n      // creates spans for the base fonts and adds them to baseFontsDiv\n      var initializeBaseFontsSpans = function () {\n        return baseFonts.map(createSpan);\n      };\n      // creates spans for the fonts to detect and adds them to fontsDiv\n      var initializeFontsSpans = function () {\n        // Stores {fontName : [spans for that font]}\n        var spans = {};\n        var _loop_1 = function (font) {\n          spans[font] = baseFonts.map(function (baseFont) {\n            return createSpanWithFonts(font, baseFont);\n          });\n        };\n        for (var _i = 0, fontList_1 = fontList; _i < fontList_1.length; _i++) {\n          var font = fontList_1[_i];\n          _loop_1(font);\n        }\n        return spans;\n      };\n      // checks if a font is available\n      var isFontAvailable = function (fontSpans) {\n        return baseFonts.some(function (baseFont, baseFontIndex) {\n          return fontSpans[baseFontIndex].offsetWidth !== defaultWidth[baseFont] || fontSpans[baseFontIndex].offsetHeight !== defaultHeight[baseFont];\n        });\n      };\n      // create spans for base fonts\n      var baseFontsSpans = initializeBaseFontsSpans();\n      // create spans for fonts to detect\n      var fontsSpans = initializeFontsSpans();\n      // add all the spans to the DOM\n      holder.appendChild(spansContainer);\n      // get the default width for the three base fonts\n      for (var index = 0; index < baseFonts.length; index++) {\n        defaultWidth[baseFonts[index]] = baseFontsSpans[index].offsetWidth; // width for the default font\n        defaultHeight[baseFonts[index]] = baseFontsSpans[index].offsetHeight; // height for the default font\n      }\n      // check available fonts\n      return fontList.filter(function (font) {\n        return isFontAvailable(fontsSpans[font]);\n      });\n    });\n  }\n  function getPlugins() {\n    var rawPlugins = navigator.plugins;\n    if (!rawPlugins) {\n      return undefined;\n    }\n    var plugins = [];\n    // Safari 10 doesn't support iterating navigator.plugins with for...of\n    for (var i = 0; i < rawPlugins.length; ++i) {\n      var plugin = rawPlugins[i];\n      if (!plugin) {\n        continue;\n      }\n      var mimeTypes = [];\n      for (var j = 0; j < plugin.length; ++j) {\n        var mimeType = plugin[j];\n        mimeTypes.push({\n          type: mimeType.type,\n          suffixes: mimeType.suffixes\n        });\n      }\n      plugins.push({\n        name: plugin.name,\n        description: plugin.description,\n        mimeTypes: mimeTypes\n      });\n    }\n    return plugins;\n  }\n\n  // https://www.browserleaks.com/canvas#how-does-it-work\n  function getCanvasFingerprint() {\n    var _a = makeCanvasContext(),\n      canvas = _a[0],\n      context = _a[1];\n    if (!isSupported(canvas, context)) {\n      return {\n        winding: false,\n        geometry: '',\n        text: ''\n      };\n    }\n    return {\n      winding: doesSupportWinding(context),\n      geometry: makeGeometryImage(canvas, context),\n      // Text is unstable:\n      // https://github.com/fingerprintjs/fingerprintjs/issues/583\n      // https://github.com/fingerprintjs/fingerprintjs/issues/103\n      // Therefore it's extracted into a separate image.\n      text: makeTextImage(canvas, context)\n    };\n  }\n  function makeCanvasContext() {\n    var canvas = document.createElement('canvas');\n    canvas.width = 1;\n    canvas.height = 1;\n    return [canvas, canvas.getContext('2d')];\n  }\n  function isSupported(canvas, context) {\n    // TODO: look into: https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob\n    return !!(context && canvas.toDataURL);\n  }\n  function doesSupportWinding(context) {\n    // https://web.archive.org/web/20170825024655/http://blogs.adobe.com/webplatform/2013/01/30/winding-rules-in-canvas/\n    // https://github.com/Modernizr/Modernizr/blob/master/feature-detects/canvas/winding.js\n    context.rect(0, 0, 10, 10);\n    context.rect(2, 2, 6, 6);\n    return !context.isPointInPath(5, 5, 'evenodd');\n  }\n  function makeTextImage(canvas, context) {\n    // Resizing the canvas cleans it\n    canvas.width = 240;\n    canvas.height = 60;\n    context.textBaseline = 'alphabetic';\n    context.fillStyle = '#f60';\n    context.fillRect(100, 1, 62, 20);\n    context.fillStyle = '#069';\n    // It's important to use explicit built-in fonts in order to exclude the affect of font preferences\n    // (there is a separate entropy source for them).\n    context.font = '11pt \"Times New Roman\"';\n    // The choice of emojis has a gigantic impact on rendering performance (especially in FF).\n    // Some newer emojis cause it to slow down 50-200 times.\n    // There must be no text to the right of the emoji, see https://github.com/fingerprintjs/fingerprintjs/issues/574\n    // A bare emoji shouldn't be used because the canvas will change depending on the script encoding:\n    // https://github.com/fingerprintjs/fingerprintjs/issues/66\n    // Escape sequence shouldn't be used too because Terser will turn it into a bare unicode.\n    var printedText = \"Cwm fjordbank gly \" + String.fromCharCode(55357, 56835) /* 😃 */;\n    context.fillText(printedText, 2, 15);\n    context.fillStyle = 'rgba(102, 204, 0, 0.2)';\n    context.font = '18pt Arial';\n    context.fillText(printedText, 4, 45);\n    return save(canvas);\n  }\n  function makeGeometryImage(canvas, context) {\n    // Resizing the canvas cleans it\n    canvas.width = 122;\n    canvas.height = 110;\n    // Canvas blending\n    // https://web.archive.org/web/20170826194121/http://blogs.adobe.com/webplatform/2013/01/28/blending-features-in-canvas/\n    // http://jsfiddle.net/NDYV8/16/\n    context.globalCompositeOperation = 'multiply';\n    for (var _i = 0, _a = [['#f2f', 40, 40], ['#2ff', 80, 40], ['#ff2', 60, 80]]; _i < _a.length; _i++) {\n      var _b = _a[_i],\n        color = _b[0],\n        x = _b[1],\n        y = _b[2];\n      context.fillStyle = color;\n      context.beginPath();\n      context.arc(x, y, 40, 0, Math.PI * 2, true);\n      context.closePath();\n      context.fill();\n    }\n    // Canvas winding\n    // https://web.archive.org/web/20130913061632/http://blogs.adobe.com/webplatform/2013/01/30/winding-rules-in-canvas/\n    // http://jsfiddle.net/NDYV8/19/\n    context.fillStyle = '#f9c';\n    context.arc(60, 60, 60, 0, Math.PI * 2, true);\n    context.arc(60, 60, 20, 0, Math.PI * 2, true);\n    context.fill('evenodd');\n    return save(canvas);\n  }\n  function save(canvas) {\n    // TODO: look into: https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob\n    return canvas.toDataURL();\n  }\n\n  /**\n   * This is a crude and primitive touch screen detection. It's not possible to currently reliably detect the availability\n   * of a touch screen with a JS, without actually subscribing to a touch event.\n   *\n   * @see http://www.stucox.com/blog/you-cant-detect-a-touchscreen/\n   * @see https://github.com/Modernizr/Modernizr/issues/548\n   */\n  function getTouchSupport() {\n    var n = navigator;\n    var maxTouchPoints = 0;\n    var touchEvent;\n    if (n.maxTouchPoints !== undefined) {\n      maxTouchPoints = toInt$1(n.maxTouchPoints);\n    } else if (n.msMaxTouchPoints !== undefined) {\n      maxTouchPoints = n.msMaxTouchPoints;\n    }\n    try {\n      document.createEvent('TouchEvent');\n      touchEvent = true;\n    } catch (_a) {\n      touchEvent = false;\n    }\n    var touchStart = ('ontouchstart' in window);\n    return {\n      maxTouchPoints: maxTouchPoints,\n      touchEvent: touchEvent,\n      touchStart: touchStart\n    };\n  }\n  function getOsCpu() {\n    return navigator.oscpu;\n  }\n  function getLanguages() {\n    var n = navigator;\n    var result = [];\n    var language = n.language || n.userLanguage || n.browserLanguage || n.systemLanguage;\n    if (language !== undefined) {\n      result.push([language]);\n    }\n    if (Array.isArray(n.languages)) {\n      // Starting from Chromium 86, there is only a single value in `navigator.language` in Incognito mode:\n      // the value of `navigator.language`. Therefore the value is ignored in this browser.\n      if (!(isChromium() && isChromium86OrNewer())) {\n        result.push(n.languages);\n      }\n    } else if (typeof n.languages === 'string') {\n      var languages = n.languages;\n      if (languages) {\n        result.push(languages.split(','));\n      }\n    }\n    return result;\n  }\n  function getColorDepth() {\n    return window.screen.colorDepth;\n  }\n  function getDeviceMemory() {\n    // `navigator.deviceMemory` is a string containing a number in some unidentified cases\n    return replaceNaN(toFloat(navigator.deviceMemory), undefined);\n  }\n  function getScreenResolution() {\n    var s = screen;\n    // Some browsers return screen resolution as strings, e.g. \"1200\", instead of a number, e.g. 1200.\n    // I suspect it's done by certain plugins that randomize browser properties to prevent fingerprinting.\n    // Some browsers even return  screen resolution as not numbers.\n    var parseDimension = function (value) {\n      return replaceNaN(toInt$1(value), null);\n    };\n    var dimensions = [parseDimension(s.width), parseDimension(s.height)];\n    dimensions.sort().reverse();\n    return dimensions;\n  }\n  var screenFrameCheckInterval = 2500;\n  var roundingPrecision = 10;\n  // The type is readonly to protect from unwanted mutations\n  var screenFrameBackup;\n  var screenFrameSizeTimeoutId;\n  /**\n   * Starts watching the screen frame size. When a non-zero size appears, the size is saved and the watch is stopped.\n   * Later, when `getScreenFrame` runs, it will return the saved non-zero size if the current size is null.\n   *\n   * This trick is required to mitigate the fact that the screen frame turns null in some cases.\n   * See more on this at https://github.com/fingerprintjs/fingerprintjs/issues/568\n   */\n  function watchScreenFrame() {\n    if (screenFrameSizeTimeoutId !== undefined) {\n      return;\n    }\n    var checkScreenFrame = function () {\n      var frameSize = getCurrentScreenFrame();\n      if (isFrameSizeNull(frameSize)) {\n        screenFrameSizeTimeoutId = setTimeout(checkScreenFrame, screenFrameCheckInterval);\n      } else {\n        screenFrameBackup = frameSize;\n        screenFrameSizeTimeoutId = undefined;\n      }\n    };\n    checkScreenFrame();\n  }\n  function getScreenFrame() {\n    var _this = this;\n    watchScreenFrame();\n    return function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        var frameSize;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              frameSize = getCurrentScreenFrame();\n              if (!isFrameSizeNull(frameSize)) return [3 /*break*/, 2];\n              if (screenFrameBackup) {\n                return [2 /*return*/, __spreadArrays(screenFrameBackup)];\n              }\n              if (!getFullscreenElement()) return [3 /*break*/, 2];\n              // Some browsers set the screen frame to zero when programmatic fullscreen is on.\n              // There is a chance of getting a non-zero frame after exiting the fullscreen.\n              // See more on this at https://github.com/fingerprintjs/fingerprintjs/issues/568\n              return [4 /*yield*/, exitFullscreen()];\n            case 1:\n              // Some browsers set the screen frame to zero when programmatic fullscreen is on.\n              // There is a chance of getting a non-zero frame after exiting the fullscreen.\n              // See more on this at https://github.com/fingerprintjs/fingerprintjs/issues/568\n              _a.sent();\n              frameSize = getCurrentScreenFrame();\n              _a.label = 2;\n            case 2:\n              if (!isFrameSizeNull(frameSize)) {\n                screenFrameBackup = frameSize;\n              }\n              return [2 /*return*/, frameSize];\n          }\n        });\n      });\n    };\n  }\n  /**\n   * Sometimes the available screen resolution changes a bit, e.g. 1900x1440 → 1900x1439. A possible reason: macOS Dock\n   * shrinks to fit more icons when there is too little space. The rounding is used to mitigate the difference.\n   */\n  function getRoundedScreenFrame() {\n    var _this = this;\n    var screenFrameGetter = getScreenFrame();\n    return function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        var frameSize, processSize;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4 /*yield*/, screenFrameGetter()];\n            case 1:\n              frameSize = _a.sent();\n              processSize = function (sideSize) {\n                return sideSize === null ? null : round(sideSize, roundingPrecision);\n              };\n              // It might look like I don't know about `for` and `map`.\n              // In fact, such code is used to avoid TypeScript issues without using `as`.\n              return [2 /*return*/, [processSize(frameSize[0]), processSize(frameSize[1]), processSize(frameSize[2]), processSize(frameSize[3])]];\n          }\n        });\n      });\n    };\n  }\n  function getCurrentScreenFrame() {\n    var s = screen;\n    // Some browsers return screen resolution as strings, e.g. \"1200\", instead of a number, e.g. 1200.\n    // I suspect it's done by certain plugins that randomize browser properties to prevent fingerprinting.\n    //\n    // Some browsers (IE, Edge ≤18) don't provide `screen.availLeft` and `screen.availTop`. The property values are\n    // replaced with 0 in such cases to not lose the entropy from `screen.availWidth` and `screen.availHeight`.\n    return [replaceNaN(toFloat(s.availTop), null), replaceNaN(toFloat(s.width) - toFloat(s.availWidth) - replaceNaN(toFloat(s.availLeft), 0), null), replaceNaN(toFloat(s.height) - toFloat(s.availHeight) - replaceNaN(toFloat(s.availTop), 0), null), replaceNaN(toFloat(s.availLeft), null)];\n  }\n  function isFrameSizeNull(frameSize) {\n    for (var i = 0; i < 4; ++i) {\n      if (frameSize[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  function getHardwareConcurrency() {\n    // sometimes hardware concurrency is a string\n    return replaceNaN(toInt$1(navigator.hardwareConcurrency), undefined);\n  }\n  function getTimezone() {\n    var _a;\n    var DateTimeFormat = (_a = window.Intl) === null || _a === void 0 ? void 0 : _a.DateTimeFormat;\n    if (DateTimeFormat) {\n      var timezone = new DateTimeFormat().resolvedOptions().timeZone;\n      if (timezone) {\n        return timezone;\n      }\n    }\n    // For browsers that don't support timezone names\n    // The minus is intentional because the JS offset is opposite to the real offset\n    var offset = -getTimezoneOffset();\n    return \"UTC\" + (offset >= 0 ? '+' : '') + Math.abs(offset);\n  }\n  function getTimezoneOffset() {\n    var currentYear = new Date().getFullYear();\n    // The timezone offset may change over time due to daylight saving time (DST) shifts.\n    // The non-DST timezone offset is used as the result timezone offset.\n    // Since the DST season differs in the northern and the southern hemispheres,\n    // both January and July timezones offsets are considered.\n    return Math.max(\n    // `getTimezoneOffset` returns a number as a string in some unidentified cases\n    toFloat(new Date(currentYear, 0, 1).getTimezoneOffset()), toFloat(new Date(currentYear, 6, 1).getTimezoneOffset()));\n  }\n  function getSessionStorage() {\n    try {\n      return !!window.sessionStorage;\n    } catch (error) {\n      /* SecurityError when referencing it means it exists */\n      return true;\n    }\n  }\n\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=781447\n  function getLocalStorage() {\n    try {\n      return !!window.localStorage;\n    } catch (e) {\n      /* SecurityError when referencing it means it exists */\n      return true;\n    }\n  }\n  function getIndexedDB() {\n    // IE and Edge don't allow accessing indexedDB in private mode, therefore IE and Edge will have different\n    // visitor identifier in normal and private modes.\n    if (isTrident() || isEdgeHTML()) {\n      return undefined;\n    }\n    try {\n      return !!window.indexedDB;\n    } catch (e) {\n      /* SecurityError when referencing it means it exists */\n      return true;\n    }\n  }\n  function getOpenDatabase() {\n    return !!window.openDatabase;\n  }\n  function getCpuClass() {\n    return navigator.cpuClass;\n  }\n  function getPlatform() {\n    // Android Chrome 86 and 87 and Android Firefox 80 and 84 don't mock the platform value when desktop mode is requested\n    var platform = navigator.platform;\n    // iOS mocks the platform value when desktop version is requested: https://github.com/fingerprintjs/fingerprintjs/issues/514\n    // iPad uses desktop mode by default since iOS 13\n    // The value is 'MacIntel' on M1 Macs\n    // The value is 'iPhone' on iPod Touch\n    if (platform === 'MacIntel') {\n      if (isWebKit() && !isDesktopSafari()) {\n        return isIPad() ? 'iPad' : 'iPhone';\n      }\n    }\n    return platform;\n  }\n  function getVendor() {\n    return navigator.vendor || '';\n  }\n\n  /**\n   * Checks for browser-specific (not engine specific) global variables to tell browsers with the same engine apart.\n   * Only somewhat popular browsers are considered.\n   */\n  function getVendorFlavors() {\n    var flavors = [];\n    for (var _i = 0, _a = [\n      // Blink and some browsers on iOS\n      'chrome',\n      // Safari on macOS\n      'safari',\n      // Chrome on iOS (checked in 85 on 13 and 87 on 14)\n      '__crWeb', '__gCrWeb',\n      // Yandex Browser on iOS, macOS and Android (checked in 21.2 on iOS 14, macOS and Android)\n      'yandex',\n      // Yandex Browser on iOS (checked in 21.2 on 14)\n      '__yb', '__ybro',\n      // Firefox on iOS (checked in 32 on 14)\n      '__firefox__',\n      // Edge on iOS (checked in 46 on 14)\n      '__edgeTrackingPreventionStatistics', 'webkit',\n      // Opera Touch on iOS (checked in 2.6 on 14)\n      'oprt',\n      // Samsung Internet on Android (checked in 11.1)\n      'samsungAr',\n      // UC Browser on Android (checked in 12.10 and 13.0)\n      'ucweb', 'UCShellJava',\n      // Puffin on Android (checked in 9.0)\n      'puffinDevice']; _i < _a.length; _i++) {\n      var key = _a[_i];\n      var value = window[key];\n      if (value && typeof value === 'object') {\n        flavors.push(key);\n      }\n    }\n    return flavors.sort();\n  }\n\n  /**\n   * navigator.cookieEnabled cannot detect custom or nuanced cookie blocking configurations. For example, when blocking\n   * cookies via the Advanced Privacy Settings in IE9, it always returns true. And there have been issues in the past with\n   * site-specific exceptions. Don't rely on it.\n   *\n   * @see https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cookies.js Taken from here\n   */\n  function areCookiesEnabled() {\n    var d = document;\n    // Taken from here: https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cookies.js\n    // navigator.cookieEnabled cannot detect custom or nuanced cookie blocking configurations. For example, when blocking\n    // cookies via the Advanced Privacy Settings in IE9, it always returns true. And there have been issues in the past\n    // with site-specific exceptions. Don't rely on it.\n    // try..catch because some in situations `document.cookie` is exposed but throws a\n    // SecurityError if you try to access it; e.g. documents created from data URIs\n    // or in sandboxed iframes (depending on flags/context)\n    try {\n      // Create cookie\n      d.cookie = 'cookietest=1; SameSite=Strict;';\n      var result = d.cookie.indexOf('cookietest=') !== -1;\n      // Delete cookie\n      d.cookie = 'cookietest=1; SameSite=Strict; expires=Thu, 01-Jan-1970 00:00:01 GMT';\n      return result;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  /**\n   * Only single element selector are supported (no operators like space, +, >, etc).\n   * `embed` and `position: fixed;` will be considered as blocked anyway because it always has no offsetParent.\n   * Avoid `iframe` and anything with `[src=]` because they produce excess HTTP requests.\n   *\n   * See docs/content_blockers.md to learn how to make the list\n   */\n  var filters = {\n    abpIndo: ['#Iklan-Melayang', '#Kolom-Iklan-728', '#SidebarIklan-wrapper', 'a[title=\"7naga poker\" i]', '[title=\"ALIENBOLA\" i]'],\n    abpvn: ['#quangcaomb', '.iosAdsiosAds-layout', '.quangcao', '[href^=\"https://r88.vn/\"]', '[href^=\"https://zbet.vn/\"]'],\n    adBlockFinland: ['.mainostila', '.sponsorit', '.ylamainos', 'a[href*=\"/clickthrgh.asp?\"]', 'a[href^=\"https://app.readpeak.com/ads\"]'],\n    adBlockPersian: ['#navbar_notice_50', 'a[href^=\"http://g1.v.fwmrm.net/ad/\"]', '.kadr', 'TABLE[width=\"140px\"]', '#divAgahi'],\n    adBlockWarningRemoval: ['#adblock-honeypot', '.adblocker-root', '.wp_adblock_detect'],\n    adGuardAnnoyances: ['amp-embed[type=\"zen\"]', '.hs-sosyal', '#cookieconsentdiv', 'div[class^=\"app_gdpr\"]', '.as-oil'],\n    adGuardBase: ['#ad-after', '#ad-p3', '.BetterJsPopOverlay', '#ad_300X250', '#bannerfloat22'],\n    adGuardChinese: [\n    // Disabled because not reproducible. Will be replaced during the next filter update.\n    // '#piao_div_0[style*=\"width:140px;\"]',\n    'a[href*=\".ttz5.cn\"]', 'a[href*=\".yabovip2027.com/\"]', '.tm3all2h4b', '.cc5278_banner_ad'],\n    adGuardFrench: ['.zonepub', '[class*=\"_adLeaderboard\"]', '[id^=\"block-xiti_oas-\"]', 'a[href^=\"http://ptapjmp.com/\"]', 'a[href^=\"https://go.alvexo.com/\"]'],\n    adGuardGerman: ['.banneritemwerbung_head_1', '.boxstartwerbung', '.werbung3', 'a[href^=\"http://www.eis.de/index.phtml?refid=\"]', 'a[href^=\"https://www.tipico.com/?affiliateId=\"]'],\n    adGuardJapanese: ['#kauli_yad_1', '#ad-giftext', '#adsSPRBlock', 'a[href^=\"http://ad2.trafficgate.net/\"]', 'a[href^=\"http://www.rssad.jp/\"]'],\n    adGuardMobile: ['amp-auto-ads', '#mgid_iframe', '.amp_ad', 'amp-embed[type=\"24smi\"]', '#mgid_iframe1'],\n    adGuardRussian: ['a[href^=\"https://ya-distrib.ru/r/\"]', 'a[href^=\"https://ad.letmeads.com/\"]', '.reclama', 'div[id^=\"smi2adblock\"]', 'div[id^=\"AdFox_banner_\"]'],\n    adGuardSocial: ['a[href^=\"//www.stumbleupon.com/submit?url=\"]', 'a[href^=\"//telegram.me/share/url?\"]', '.etsy-tweet', '#inlineShare', '.popup-social'],\n    adGuardSpanishPortuguese: ['#barraPublicidade', '#Publicidade', '#publiEspecial', '#queTooltip', '[href^=\"http://ads.glispa.com/\"]'],\n    adGuardTrackingProtection: ['amp-embed[type=\"taboola\"]', '#qoo-counter', 'a[href^=\"http://click.hotlog.ru/\"]', 'a[href^=\"http://hitcounter.ru/top/stat.php\"]', 'a[href^=\"http://top.mail.ru/jump\"]'],\n    adGuardTurkish: ['#backkapat', '#reklami', 'a[href^=\"http://adserv.ontek.com.tr/\"]', 'a[href^=\"http://izlenzi.com/campaign/\"]', 'a[href^=\"http://www.installads.net/\"]'],\n    bulgarian: ['td#freenet_table_ads', '#adbody', '#ea_intext_div', '.lapni-pop-over', '#xenium_hot_offers'],\n    easyList: ['#AD_banner_bottom', '#Ads_google_02', '#N-ad-article-rightRail-1', '#ad-fullbanner2', '#ad-zone-2'],\n    easyListChina: ['a[href*=\".wensixuetang.com/\"]', 'A[href*=\"/hth107.com/\"]', '.appguide-wrap[onclick*=\"bcebos.com\"]', '.frontpageAdvM', '#taotaole'],\n    easyListCookie: ['#adtoniq-msg-bar', '#CoockiesPage', '#CookieModal_cookiemodal', '#DO_CC_PANEL', '#ShowCookie'],\n    easyListCzechSlovak: ['#onlajny-stickers', '#reklamni-box', '.reklama-megaboard', '.sklik', '[id^=\"sklikReklama\"]'],\n    easyListDutch: ['#advertentie', '#vipAdmarktBannerBlock', '.adstekst', 'a[href^=\"https://xltube.nl/click/\"]', '#semilo-lrectangle'],\n    easyListGermany: ['a[href^=\"http://www.hw-area.com/?dp=\"]', 'a[href^=\"https://ads.sunmaker.com/tracking.php?\"]', '.werbung-skyscraper2', '.bannergroup_werbung', '.ads_rechts'],\n    easyListItaly: ['.box_adv_annunci', '.sb-box-pubbliredazionale', 'a[href^=\"http://affiliazioniads.snai.it/\"]', 'a[href^=\"https://adserver.html.it/\"]', 'a[href^=\"https://affiliazioniads.snai.it/\"]'],\n    easyListLithuania: ['.reklamos_tarpas', '.reklamos_nuorodos', 'img[alt=\"Reklaminis skydelis\"]', 'img[alt=\"Dedikuoti.lt serveriai\"]', 'img[alt=\"Hostingas Serveriai.lt\"]'],\n    estonian: ['A[href*=\"http://pay4results24.eu\"]'],\n    fanboyAnnoyances: ['#feedback-tab', '#taboola-below-article', '.feedburnerFeedBlock', '.widget-feedburner-counter', '[title=\"Subscribe to our blog\"]'],\n    fanboyAntiFacebook: ['.util-bar-module-firefly-visible'],\n    fanboyEnhancedTrackers: ['.open.pushModal', '#issuem-leaky-paywall-articles-zero-remaining-nag', '#sovrn_container', 'div[class$=\"-hide\"][zoompage-fontsize][style=\"display: block;\"]', '.BlockNag__Card'],\n    fanboySocial: ['.td-tags-and-social-wrapper-box', '.twitterContainer', '.youtube-social', 'a[title^=\"Like us on Facebook\"]', 'img[alt^=\"Share on Digg\"]'],\n    frellwitSwedish: ['a[href*=\"casinopro.se\"][target=\"_blank\"]', 'a[href*=\"doktor-se.onelink.me\"]', 'article.category-samarbete', 'div.holidAds', 'ul.adsmodern'],\n    greekAdBlock: ['A[href*=\"adman.otenet.gr/click?\"]', 'A[href*=\"http://axiabanners.exodus.gr/\"]', 'A[href*=\"http://interactive.forthnet.gr/click?\"]', 'DIV.agores300', 'TABLE.advright'],\n    hungarian: ['A[href*=\"ad.eval.hu\"]', 'A[href*=\"ad.netmedia.hu\"]', 'A[href*=\"daserver.ultraweb.hu\"]', '#cemp_doboz', '.optimonk-iframe-container'],\n    iDontCareAboutCookies: ['.alert-info[data-block-track*=\"CookieNotice\"]', '.ModuleTemplateCookieIndicator', '.o--cookies--container', '.cookie-msg-info-container', '#cookies-policy-sticky'],\n    icelandicAbp: ['A[href^=\"/framework/resources/forms/ads.aspx\"]'],\n    latvian: ['a[href=\"http://www.salidzini.lv/\"][style=\"display: block; width: 120px; height: 40px; overflow: hidden; position: relative;\"]', 'a[href=\"http://www.salidzini.lv/\"][style=\"display: block; width: 88px; height: 31px; overflow: hidden; position: relative;\"]'],\n    listKr: ['a[href*=\"//kingtoon.slnk.kr\"]', 'a[href*=\"//playdsb.com/kr\"]', 'div.logly-lift-adz', 'div[data-widget_id=\"ml6EJ074\"]', 'ins.daum_ddn_area'],\n    listeAr: ['.geminiLB1Ad', '.right-and-left-sponsers', 'a[href*=\".aflam.info\"]', 'a[href*=\"booraq.org\"]', 'a[href*=\"dubizzle.com/ar/?utm_source=\"]'],\n    listeFr: ['a[href^=\"http://promo.vador.com/\"]', '#adcontainer_recherche', 'a[href*=\"weborama.fr/fcgi-bin/\"]', '.site-pub-interstitiel', 'div[id^=\"crt-\"][data-criteo-id]'],\n    officialPolish: ['#ceneo-placeholder-ceneo-12', '[href^=\"https://aff.sendhub.pl/\"]', 'a[href^=\"http://advmanager.techfun.pl/redirect/\"]', 'a[href^=\"http://www.trizer.pl/?utm_source\"]', 'div#skapiec_ad'],\n    ro: ['a[href^=\"//afftrk.altex.ro/Counter/Click\"]', 'a[href^=\"/magazin/\"]', 'a[href^=\"https://blackfridaysales.ro/trk/shop/\"]', 'a[href^=\"https://event.2performant.com/events/click\"]', 'a[href^=\"https://l.profitshare.ro/\"]'],\n    ruAd: ['a[href*=\"//febrare.ru/\"]', 'a[href*=\"//utimg.ru/\"]', 'a[href*=\"://chikidiki.ru\"]', '#pgeldiz', '.yandex-rtb-block'],\n    thaiAds: ['a[href*=macau-uta-popup]', '#ads-google-middle_rectangle-group', '.ads300s', '.bumq', '.img-kosana'],\n    webAnnoyancesUltralist: ['#mod-social-share-2', '#social-tools', '.ctpl-fullbanner', '.zergnet-recommend', '.yt.btn-link.btn-md.btn']\n  };\n  /**\n   * The order of the returned array means nothing (it's always sorted alphabetically).\n   *\n   * Notice that the source is slightly unstable.\n   * Safari provides a 2-taps way to disable all content blockers on a page temporarily.\n   * Also content blockers can be disabled permanently for a domain, but it requires 4 taps.\n   * So empty array shouldn't be treated as \"no blockers\", it should be treated as \"no signal\".\n   * If you are a website owner, don't make your visitors want to disable content blockers.\n   */\n  function getDomBlockers(_a) {\n    var debug = (_a === void 0 ? {} : _a).debug;\n    return __awaiter(this, void 0, void 0, function () {\n      var filterNames, allSelectors, blockedSelectors, activeBlockers;\n      var _b;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            if (!isApplicable()) {\n              return [2 /*return*/, undefined];\n            }\n            filterNames = Object.keys(filters);\n            allSelectors = (_b = []).concat.apply(_b, filterNames.map(function (filterName) {\n              return filters[filterName];\n            }));\n            return [4 /*yield*/, getBlockedSelectors(allSelectors)];\n          case 1:\n            blockedSelectors = _c.sent();\n            if (debug) {\n              printDebug(blockedSelectors);\n            }\n            activeBlockers = filterNames.filter(function (filterName) {\n              var selectors = filters[filterName];\n              var blockedCount = countTruthy(selectors.map(function (selector) {\n                return blockedSelectors[selector];\n              }));\n              return blockedCount > selectors.length * 0.6;\n            });\n            activeBlockers.sort();\n            return [2 /*return*/, activeBlockers];\n        }\n      });\n    });\n  }\n  function isApplicable() {\n    // Safari (desktop and mobile) and all Android browsers keep content blockers in both regular and private mode\n    return isWebKit() || isAndroid();\n  }\n  function getBlockedSelectors(selectors) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function () {\n      var d, root, elements, blockedSelectors, i, element, holder, i;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            d = document;\n            root = d.createElement('div');\n            elements = new Array(selectors.length);\n            blockedSelectors = {} // Set() isn't used just in case somebody need older browser support\n            ;\n\n            forceShow(root);\n            // First create all elements that can be blocked. If the DOM steps below are done in a single cycle,\n            // browser will alternate tree modification and layout reading, that is very slow.\n            for (i = 0; i < selectors.length; ++i) {\n              element = selectorToElement(selectors[i]);\n              holder = d.createElement('div') // Protects from unwanted effects of `+` and `~` selectors of filters\n              ;\n\n              forceShow(holder);\n              holder.appendChild(element);\n              root.appendChild(holder);\n              elements[i] = element;\n            }\n            _b.label = 1;\n          case 1:\n            if (!!d.body) return [3 /*break*/, 3];\n            return [4 /*yield*/, wait(50)];\n          case 2:\n            _b.sent();\n            return [3 /*break*/, 1];\n          case 3:\n            d.body.appendChild(root);\n            try {\n              // Then check which of the elements are blocked\n              for (i = 0; i < selectors.length; ++i) {\n                if (!elements[i].offsetParent) {\n                  blockedSelectors[selectors[i]] = true;\n                }\n              }\n            } finally {\n              // Then remove the elements\n              (_a = root.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(root);\n            }\n            return [2 /*return*/, blockedSelectors];\n        }\n      });\n    });\n  }\n  function forceShow(element) {\n    element.style.setProperty('display', 'block', 'important');\n  }\n  function printDebug(blockedSelectors) {\n    var message = 'DOM blockers debug:\\n```';\n    for (var _i = 0, _a = Object.keys(filters); _i < _a.length; _i++) {\n      var filterName = _a[_i];\n      message += \"\\n\" + filterName + \":\";\n      for (var _b = 0, _c = filters[filterName]; _b < _c.length; _b++) {\n        var selector = _c[_b];\n        message += \"\\n  \" + selector + \" \" + (blockedSelectors[selector] ? '🚫' : '➡️');\n      }\n    }\n    // console.log is ok here because it's under a debug clause\n    // eslint-disable-next-line no-console\n    console.log(message + \"\\n```\");\n  }\n\n  /**\n   * @see https://developer.mozilla.org/en-US/docs/Web/CSS/@media/color-gamut\n   */\n  function getColorGamut() {\n    // rec2020 includes p3 and p3 includes srgb\n    for (var _i = 0, _a = ['rec2020', 'p3', 'srgb']; _i < _a.length; _i++) {\n      var gamut = _a[_i];\n      if (matchMedia(\"(color-gamut: \" + gamut + \")\").matches) {\n        return gamut;\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * @see https://developer.mozilla.org/en-US/docs/Web/CSS/@media/inverted-colors\n   */\n  function areColorsInverted() {\n    if (doesMatch('inverted')) {\n      return true;\n    }\n    if (doesMatch('none')) {\n      return false;\n    }\n    return undefined;\n  }\n  function doesMatch(value) {\n    return matchMedia(\"(inverted-colors: \" + value + \")\").matches;\n  }\n\n  /**\n   * @see https://developer.mozilla.org/en-US/docs/Web/CSS/@media/forced-colors\n   */\n  function areColorsForced() {\n    if (doesMatch$1('active')) {\n      return true;\n    }\n    if (doesMatch$1('none')) {\n      return false;\n    }\n    return undefined;\n  }\n  function doesMatch$1(value) {\n    return matchMedia(\"(forced-colors: \" + value + \")\").matches;\n  }\n  var maxValueToCheck = 100;\n  /**\n   * If the display is monochrome (e.g. black&white), the value will be ≥0 and will mean the number of bits per pixel.\n   * If the display is not monochrome, the returned value will be 0.\n   * If the browser doesn't support this feature, the returned value will be undefined.\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/CSS/@media/monochrome\n   */\n  function getMonochromeDepth() {\n    if (!matchMedia('(min-monochrome: 0)').matches) {\n      // The media feature isn't supported by the browser\n      return undefined;\n    }\n    // A variation of binary search algorithm can be used here.\n    // But since expected values are very small (≤10), there is no sense in adding the complexity.\n    for (var i = 0; i <= maxValueToCheck; ++i) {\n      if (matchMedia(\"(max-monochrome: \" + i + \")\").matches) {\n        return i;\n      }\n    }\n    throw new Error('Too high value');\n  }\n\n  /**\n   * @see https://www.w3.org/TR/mediaqueries-5/#prefers-contrast\n   * @see https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-contrast\n   */\n  function getContrastPreference() {\n    if (doesMatch$2('no-preference')) {\n      return 0 /* None */;\n    }\n    // The sources contradict on the keywords. Probably 'high' and 'low' will never be implemented.\n    // Need to check it when all browsers implement the feature.\n    if (doesMatch$2('high') || doesMatch$2('more')) {\n      return 1 /* More */;\n    }\n\n    if (doesMatch$2('low') || doesMatch$2('less')) {\n      return -1 /* Less */;\n    }\n\n    if (doesMatch$2('forced')) {\n      return 10 /* ForcedColors */;\n    }\n\n    return undefined;\n  }\n  function doesMatch$2(value) {\n    return matchMedia(\"(prefers-contrast: \" + value + \")\").matches;\n  }\n\n  /**\n   * @see https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion\n   */\n  function isMotionReduced() {\n    if (doesMatch$3('reduce')) {\n      return true;\n    }\n    if (doesMatch$3('no-preference')) {\n      return false;\n    }\n    return undefined;\n  }\n  function doesMatch$3(value) {\n    return matchMedia(\"(prefers-reduced-motion: \" + value + \")\").matches;\n  }\n\n  /**\n   * @see https://www.w3.org/TR/mediaqueries-5/#dynamic-range\n   */\n  function isHDR() {\n    if (doesMatch$4('high')) {\n      return true;\n    }\n    if (doesMatch$4('standard')) {\n      return false;\n    }\n    return undefined;\n  }\n  function doesMatch$4(value) {\n    return matchMedia(\"(dynamic-range: \" + value + \")\").matches;\n  }\n  var M = Math; // To reduce the minified code size\n  var fallbackFn = function () {\n    return 0;\n  };\n  /**\n   * @see https://gitlab.torproject.org/legacy/trac/-/issues/13018\n   * @see https://bugzilla.mozilla.org/show_bug.cgi?id=531915\n   */\n  function getMathFingerprint() {\n    // Native operations\n    var acos = M.acos || fallbackFn;\n    var acosh = M.acosh || fallbackFn;\n    var asin = M.asin || fallbackFn;\n    var asinh = M.asinh || fallbackFn;\n    var atanh = M.atanh || fallbackFn;\n    var atan = M.atan || fallbackFn;\n    var sin = M.sin || fallbackFn;\n    var sinh = M.sinh || fallbackFn;\n    var cos = M.cos || fallbackFn;\n    var cosh = M.cosh || fallbackFn;\n    var tan = M.tan || fallbackFn;\n    var tanh = M.tanh || fallbackFn;\n    var exp = M.exp || fallbackFn;\n    var expm1 = M.expm1 || fallbackFn;\n    var log1p = M.log1p || fallbackFn;\n    // Operation polyfills\n    var powPI = function (value) {\n      return M.pow(M.PI, value);\n    };\n    var acoshPf = function (value) {\n      return M.log(value + M.sqrt(value * value - 1));\n    };\n    var asinhPf = function (value) {\n      return M.log(value + M.sqrt(value * value + 1));\n    };\n    var atanhPf = function (value) {\n      return M.log((1 + value) / (1 - value)) / 2;\n    };\n    var sinhPf = function (value) {\n      return M.exp(value) - 1 / M.exp(value) / 2;\n    };\n    var coshPf = function (value) {\n      return (M.exp(value) + 1 / M.exp(value)) / 2;\n    };\n    var expm1Pf = function (value) {\n      return M.exp(value) - 1;\n    };\n    var tanhPf = function (value) {\n      return (M.exp(2 * value) - 1) / (M.exp(2 * value) + 1);\n    };\n    var log1pPf = function (value) {\n      return M.log(1 + value);\n    };\n    // Note: constant values are empirical\n    return {\n      acos: acos(0.123124234234234242),\n      acosh: acosh(1e308),\n      acoshPf: acoshPf(1e154),\n      asin: asin(0.123124234234234242),\n      asinh: asinh(1),\n      asinhPf: asinhPf(1),\n      atanh: atanh(0.5),\n      atanhPf: atanhPf(0.5),\n      atan: atan(0.5),\n      sin: sin(-1e300),\n      sinh: sinh(1),\n      sinhPf: sinhPf(1),\n      cos: cos(10.000000000123),\n      cosh: cosh(1),\n      coshPf: coshPf(1),\n      tan: tan(-1e300),\n      tanh: tanh(1),\n      tanhPf: tanhPf(1),\n      exp: exp(1),\n      expm1: expm1(1),\n      expm1Pf: expm1Pf(1),\n      log1p: log1p(10),\n      log1pPf: log1pPf(10),\n      powPI: powPI(-100)\n    };\n  }\n\n  /**\n   * We use m or w because these two characters take up the maximum width.\n   * Also there are a couple of ligatures.\n   */\n  var defaultText = 'mmMwWLliI0fiflO&1';\n  /**\n   * Settings of text blocks to measure. The keys are random but persistent words.\n   */\n  var presets = {\n    /**\n     * The default font. User can change it in desktop Chrome, desktop Firefox, IE 11,\n     * Android Chrome (but only when the size is ≥ than the default) and Android Firefox.\n     */\n    default: [],\n    /** OS font on macOS. User can change its size and weight. Applies after Safari restart. */\n    apple: [{\n      font: '-apple-system-body'\n    }],\n    /** User can change it in desktop Chrome and desktop Firefox. */\n    serif: [{\n      fontFamily: 'serif'\n    }],\n    /** User can change it in desktop Chrome and desktop Firefox. */\n    sans: [{\n      fontFamily: 'sans-serif'\n    }],\n    /** User can change it in desktop Chrome and desktop Firefox. */\n    mono: [{\n      fontFamily: 'monospace'\n    }],\n    /**\n     * Check the smallest allowed font size. User can change it in desktop Chrome, desktop Firefox and desktop Safari.\n     * The height can be 0 in Chrome on a retina display.\n     */\n    min: [{\n      fontSize: '1px'\n    }],\n    /** Tells one OS from another in desktop Chrome. */\n    system: [{\n      fontFamily: 'system-ui'\n    }]\n  };\n  /**\n   * The result is a dictionary of the width of the text samples.\n   * Heights aren't included because they give no extra entropy and are unstable.\n   *\n   * The result is very stable in IE 11, Edge 18 and Safari 14.\n   * The result changes when the OS pixel density changes in Chromium 87. The real pixel density is required to solve,\n   * but seems like it's impossible: https://stackoverflow.com/q/1713771/1118709.\n   * The \"min\" and the \"mono\" (only on Windows) value may change when the page is zoomed in Firefox 87.\n   */\n  function getFontPreferences() {\n    return withNaturalFonts(function (document, container) {\n      var elements = {};\n      var sizes = {};\n      // First create all elements to measure. If the DOM steps below are done in a single cycle,\n      // browser will alternate tree modification and layout reading, that is very slow.\n      for (var _i = 0, _a = Object.keys(presets); _i < _a.length; _i++) {\n        var key = _a[_i];\n        var _b = presets[key],\n          _c = _b[0],\n          style = _c === void 0 ? {} : _c,\n          _d = _b[1],\n          text = _d === void 0 ? defaultText : _d;\n        var element = document.createElement('span');\n        element.textContent = text;\n        element.style.whiteSpace = 'nowrap';\n        for (var _e = 0, _f = Object.keys(style); _e < _f.length; _e++) {\n          var name_1 = _f[_e];\n          var value = style[name_1];\n          if (value !== undefined) {\n            element.style[name_1] = value;\n          }\n        }\n        elements[key] = element;\n        container.appendChild(document.createElement('br'));\n        container.appendChild(element);\n      }\n      // Then measure the created elements\n      for (var _g = 0, _h = Object.keys(presets); _g < _h.length; _g++) {\n        var key = _h[_g];\n        sizes[key] = elements[key].getBoundingClientRect().width;\n      }\n      return sizes;\n    });\n  }\n  /**\n   * Creates a DOM environment that provides the most natural font available, including Android OS font.\n   * Measurements of the elements are zoom-independent.\n   * Don't put a content to measure inside an absolutely positioned element.\n   */\n  function withNaturalFonts(action, containerWidthPx) {\n    if (containerWidthPx === void 0) {\n      containerWidthPx = 4000;\n    }\n    /*\n     * Requirements for Android Chrome to apply the system font size to a text inside an iframe:\n     * - The iframe mustn't have a `display: none;` style;\n     * - The text mustn't be positioned absolutely;\n     * - The text block must be wide enough.\n     *   2560px on some devices in portrait orientation for the biggest font size option (32px);\n     * - There must be much enough text to form a few lines (I don't know the exact numbers);\n     * - The text must have the `text-size-adjust: none` style. Otherwise the text will scale in \"Desktop site\" mode;\n     *\n     * Requirements for Android Firefox to apply the system font size to a text inside an iframe:\n     * - The iframe document must have a header: `<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />`.\n     *   The only way to set it is to use the `srcdoc` attribute of the iframe;\n     * - The iframe content must get loaded before adding extra content with JavaScript;\n     *\n     * https://example.com as the iframe target always inherits Android font settings so it can be used as a reference.\n     *\n     * Observations on how page zoom affects the measurements:\n     * - macOS Safari 11.1, 12.1, 13.1, 14.0: zoom reset + offsetWidth = 100% reliable;\n     * - macOS Safari 11.1, 12.1, 13.1, 14.0: zoom reset + getBoundingClientRect = 100% reliable;\n     * - macOS Safari 14.0: offsetWidth = 5% fluctuation;\n     * - macOS Safari 14.0: getBoundingClientRect = 5% fluctuation;\n     * - iOS Safari 9, 10, 11.0, 12.0: haven't found a way to zoom a page (pinch doesn't change layout);\n     * - iOS Safari 13.1, 14.0: zoom reset + offsetWidth = 100% reliable;\n     * - iOS Safari 13.1, 14.0: zoom reset + getBoundingClientRect = 100% reliable;\n     * - iOS Safari 14.0: offsetWidth = 100% reliable;\n     * - iOS Safari 14.0: getBoundingClientRect = 100% reliable;\n     * - Chrome 42, 65, 80, 87: zoom 1/devicePixelRatio + offsetWidth = 1px fluctuation;\n     * - Chrome 42, 65, 80, 87: zoom 1/devicePixelRatio + getBoundingClientRect = 100% reliable;\n     * - Chrome 87: offsetWidth = 1px fluctuation;\n     * - Chrome 87: getBoundingClientRect = 0.7px fluctuation;\n     * - Firefox 48, 51: offsetWidth = 10% fluctuation;\n     * - Firefox 48, 51: getBoundingClientRect = 10% fluctuation;\n     * - Firefox 52, 53, 57, 62, 66, 67, 68, 71, 75, 80, 84: offsetWidth = width 100% reliable, height 10% fluctuation;\n     * - Firefox 52, 53, 57, 62, 66, 67, 68, 71, 75, 80, 84: getBoundingClientRect = width 100% reliable, height 10%\n     *   fluctuation;\n     * - Android Chrome 86: haven't found a way to zoom a page (pinch doesn't change layout);\n     * - Android Firefox 84: font size in accessibility settings changes all the CSS sizes, but offsetWidth and\n     *   getBoundingClientRect keep measuring with regular units, so the size reflects the font size setting and doesn't\n     *   fluctuate;\n     * - IE 11, Edge 18: zoom 1/devicePixelRatio + offsetWidth = 100% reliable;\n     * - IE 11, Edge 18: zoom 1/devicePixelRatio + getBoundingClientRect = reflects the zoom level;\n     * - IE 11, Edge 18: offsetWidth = 100% reliable;\n     * - IE 11, Edge 18: getBoundingClientRect = 100% reliable;\n     */\n    return withIframe(function (_, iframeWindow) {\n      var iframeDocument = iframeWindow.document;\n      var iframeBody = iframeDocument.body;\n      var bodyStyle = iframeBody.style;\n      bodyStyle.width = containerWidthPx + \"px\";\n      bodyStyle.webkitTextSizeAdjust = bodyStyle.textSizeAdjust = 'none';\n      // See the big comment above\n      if (isChromium()) {\n        iframeBody.style.zoom = \"\" + 1 / iframeWindow.devicePixelRatio;\n      } else if (isWebKit()) {\n        iframeBody.style.zoom = 'reset';\n      }\n      // See the big comment above\n      var linesOfText = iframeDocument.createElement('div');\n      linesOfText.textContent = __spreadArrays(Array(containerWidthPx / 20 << 0)).map(function () {\n        return 'word';\n      }).join(' ');\n      iframeBody.appendChild(linesOfText);\n      return action(iframeDocument, iframeBody);\n    }, '<!doctype html><html><head><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">');\n  }\n\n  /**\n   * The list of entropy sources used to make visitor identifiers.\n   *\n   * This value isn't restricted by Semantic Versioning, i.e. it may be changed without bumping minor or major version of\n   * this package.\n   */\n  var sources = {\n    // READ FIRST:\n    // See https://github.com/fingerprintjs/fingerprintjs/blob/master/contributing.md#how-to-make-an-entropy-source\n    // to learn how entropy source works and how to make your own.\n    // The sources run in this exact order.\n    // The asynchronous sources are at the start to run in parallel with other sources.\n    fonts: getFonts,\n    domBlockers: getDomBlockers,\n    fontPreferences: getFontPreferences,\n    audio: getAudioFingerprint,\n    screenFrame: getRoundedScreenFrame,\n    osCpu: getOsCpu,\n    languages: getLanguages,\n    colorDepth: getColorDepth,\n    deviceMemory: getDeviceMemory,\n    screenResolution: getScreenResolution,\n    hardwareConcurrency: getHardwareConcurrency,\n    timezone: getTimezone,\n    sessionStorage: getSessionStorage,\n    localStorage: getLocalStorage,\n    indexedDB: getIndexedDB,\n    openDatabase: getOpenDatabase,\n    cpuClass: getCpuClass,\n    platform: getPlatform,\n    plugins: getPlugins,\n    canvas: getCanvasFingerprint,\n    touchSupport: getTouchSupport,\n    vendor: getVendor,\n    vendorFlavors: getVendorFlavors,\n    cookiesEnabled: areCookiesEnabled,\n    colorGamut: getColorGamut,\n    invertedColors: areColorsInverted,\n    forcedColors: areColorsForced,\n    monochrome: getMonochromeDepth,\n    contrast: getContrastPreference,\n    reducedMotion: isMotionReduced,\n    hdr: isHDR,\n    math: getMathFingerprint\n  };\n  /**\n   * Loads the built-in entropy sources.\n   * Returns a function that collects the entropy components to make the visitor identifier.\n   */\n  function loadBuiltinSources(options) {\n    return loadSources(sources, options, []);\n  }\n  var commentTemplate = '$ if upgrade to Pro: https://fpjs.dev/pro';\n  function getConfidence(components) {\n    var openConfidenceScore = getOpenConfidenceScore(components);\n    var proConfidenceScore = deriveProConfidenceScore(openConfidenceScore);\n    return {\n      score: openConfidenceScore,\n      comment: commentTemplate.replace(/\\$/g, \"\" + proConfidenceScore)\n    };\n  }\n  function getOpenConfidenceScore(components) {\n    // In order to calculate the true probability of the visitor identifier being correct, we need to know the number of\n    // website visitors (the higher the number, the less the probability because the fingerprint entropy is limited).\n    // JS agent doesn't know the number of visitors, so we can only do an approximate assessment.\n    if (isAndroid()) {\n      return 0.4;\n    }\n    // Safari (mobile and desktop)\n    if (isWebKit()) {\n      return isDesktopSafari() ? 0.5 : 0.3;\n    }\n    var platform = components.platform.value || '';\n    // Windows\n    if (/^Win/.test(platform)) {\n      // The score is greater than on macOS because of the higher variety of devices running Windows.\n      // Chrome provides more entropy than Firefox according too\n      // https://netmarketshare.com/browser-market-share.aspx?options=%7B%22filter%22%3A%7B%22%24and%22%3A%5B%7B%22platform%22%3A%7B%22%24in%22%3A%5B%22Windows%22%5D%7D%7D%5D%7D%2C%22dateLabel%22%3A%22Trend%22%2C%22attributes%22%3A%22share%22%2C%22group%22%3A%22browser%22%2C%22sort%22%3A%7B%22share%22%3A-1%7D%2C%22id%22%3A%22browsersDesktop%22%2C%22dateInterval%22%3A%22Monthly%22%2C%22dateStart%22%3A%222019-11%22%2C%22dateEnd%22%3A%222020-10%22%2C%22segments%22%3A%22-1000%22%7D\n      // So we assign the same score to them.\n      return 0.6;\n    }\n    // macOS\n    if (/^Mac/.test(platform)) {\n      // Chrome provides more entropy than Safari and Safari provides more entropy than Firefox.\n      // Chrome is more popular than Safari and Safari is more popular than Firefox according to\n      // https://netmarketshare.com/browser-market-share.aspx?options=%7B%22filter%22%3A%7B%22%24and%22%3A%5B%7B%22platform%22%3A%7B%22%24in%22%3A%5B%22Mac%20OS%22%5D%7D%7D%5D%7D%2C%22dateLabel%22%3A%22Trend%22%2C%22attributes%22%3A%22share%22%2C%22group%22%3A%22browser%22%2C%22sort%22%3A%7B%22share%22%3A-1%7D%2C%22id%22%3A%22browsersDesktop%22%2C%22dateInterval%22%3A%22Monthly%22%2C%22dateStart%22%3A%222019-11%22%2C%22dateEnd%22%3A%222020-10%22%2C%22segments%22%3A%22-1000%22%7D\n      // So we assign the same score to them.\n      return 0.5;\n    }\n    // Another platform, e.g. a desktop Linux. It's rare, so it should be pretty unique.\n    return 0.7;\n  }\n  function deriveProConfidenceScore(openConfidenceScore) {\n    return round(0.99 + 0.01 * openConfidenceScore, 0.0001);\n  }\n  function componentsToCanonicalString(components) {\n    var result = '';\n    for (var _i = 0, _a = Object.keys(components).sort(); _i < _a.length; _i++) {\n      var componentKey = _a[_i];\n      var component = components[componentKey];\n      var value = component.error ? 'error' : JSON.stringify(component.value);\n      result += \"\" + (result ? '|' : '') + componentKey.replace(/([:|\\\\])/g, '\\\\$1') + \":\" + value;\n    }\n    return result;\n  }\n  function componentsToDebugString(components) {\n    return JSON.stringify(components, function (_key, value) {\n      if (value instanceof Error) {\n        return errorToObject(value);\n      }\n      return value;\n    }, 2);\n  }\n  function hashComponents(components) {\n    return x64hash128(componentsToCanonicalString(components));\n  }\n  /**\n   * Makes a GetResult implementation that calculates the visitor id hash on demand.\n   * Designed for optimisation.\n   */\n  function makeLazyGetResult(components) {\n    var visitorIdCache;\n    // This function runs very fast, so there is no need to make it lazy\n    var confidence = getConfidence(components);\n    // A plain class isn't used because its getters and setters aren't enumerable.\n    return {\n      get visitorId() {\n        if (visitorIdCache === undefined) {\n          visitorIdCache = hashComponents(this.components);\n        }\n        return visitorIdCache;\n      },\n      set visitorId(visitorId) {\n        visitorIdCache = visitorId;\n      },\n      confidence: confidence,\n      components: components,\n      version: version\n    };\n  }\n  /**\n   * A delay is required to ensure consistent entropy components.\n   * See https://github.com/fingerprintjs/fingerprintjs/issues/254\n   * and https://github.com/fingerprintjs/fingerprintjs/issues/307\n   * and https://github.com/fingerprintjs/fingerprintjs/commit/945633e7c5f67ae38eb0fea37349712f0e669b18\n   */\n  function prepareForSources(delayFallback) {\n    if (delayFallback === void 0) {\n      delayFallback = 50;\n    }\n    // A proper deadline is unknown. Let it be twice the fallback timeout so that both cases have the same average time.\n    return requestIdleCallbackIfAvailable(delayFallback, delayFallback * 2);\n  }\n  /**\n   * The function isn't exported from the index file to not allow to call it without `load()`.\n   * The hiding gives more freedom for future non-breaking updates.\n   *\n   * A factory function is used instead of a class to shorten the attribute names in the minified code.\n   * Native private class fields could've been used, but TypeScript doesn't allow them with `\"target\": \"es5\"`.\n   */\n  function makeAgent(getComponents, debug) {\n    var creationTime = Date.now();\n    return {\n      get: function (options) {\n        return __awaiter(this, void 0, void 0, function () {\n          var startTime, components, result;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                startTime = Date.now();\n                return [4 /*yield*/, getComponents()];\n              case 1:\n                components = _a.sent();\n                result = makeLazyGetResult(components);\n                if (debug || (options === null || options === void 0 ? void 0 : options.debug)) {\n                  // console.log is ok here because it's under a debug clause\n                  // eslint-disable-next-line no-console\n                  console.log(\"Copy the text below to get the debug data:\\n\\n```\\nversion: \" + result.version + \"\\nuserAgent: \" + navigator.userAgent + \"\\ntimeBetweenLoadAndGet: \" + (startTime - creationTime) + \"\\nvisitorId: \" + result.visitorId + \"\\ncomponents: \" + componentsToDebugString(components) + \"\\n```\");\n                }\n                return [2 /*return*/, result];\n            }\n          });\n        });\n      }\n    };\n  }\n  /**\n   * Sends an unpersonalized AJAX request to collect installation statistics\n   */\n  function monitor() {\n    // The FingerprintJS CDN (https://github.com/fingerprintjs/cdn) replaces `window.__fpjs_d_m` with `true`\n    if (window.__fpjs_d_m || Math.random() >= 0.001) {\n      return;\n    }\n    try {\n      var request = new XMLHttpRequest();\n      request.open('get', \"https://m1.openfpcdn.io/fingerprintjs/v\" + version + \"/npm-monitoring\", true);\n      request.send();\n    } catch (error) {\n      // console.error is ok here because it's an unexpected error handler\n      // eslint-disable-next-line no-console\n      console.error(error);\n    }\n  }\n  /**\n   * Builds an instance of Agent and waits a delay required for a proper operation.\n   */\n  function load(_a) {\n    var _b = _a === void 0 ? {} : _a,\n      delayFallback = _b.delayFallback,\n      debug = _b.debug,\n      _c = _b.monitoring,\n      monitoring = _c === void 0 ? true : _c;\n    return __awaiter(this, void 0, void 0, function () {\n      var getComponents;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            if (monitoring) {\n              monitor();\n            }\n            return [4 /*yield*/, prepareForSources(delayFallback)];\n          case 1:\n            _d.sent();\n            getComponents = loadBuiltinSources({\n              debug: debug\n            });\n            return [2 /*return*/, makeAgent(getComponents, debug)];\n        }\n      });\n    });\n  }\n\n  // The default export is a syntax sugar (`import * as FP from '...' → import FP from '...'`).\n  // It should contain all the public exported values.\n  var index = {\n    load: load,\n    hashComponents: hashComponents,\n    componentsToDebugString: componentsToDebugString\n  };\n  var FingerprintJS = index;\n\n  var coreTools = {\n    /**\r\n     * Получение паравметров из хэша\r\n     * @param url\r\n     * @returns {{module: string, action: string, params: string}}\r\n     */\n    getParams: function getParams(url) {\n      if (typeof url === 'undefined') {\n        url = location.hash.substring(1);\n      }\n      var params = url.match(/^\\/([a-z0-9_]*)(?:\\/|)([a-z0-9_]*)(?:(\\?[^?]*)|)/);\n      var result = {\n        module: params !== null && typeof params[1] === 'string' ? params[1] : '',\n        section: params !== null && typeof params[2] === 'string' ? params[2] : '',\n        query: params !== null && typeof params[3] === 'string' ? params[3] : ''\n      };\n      result.query = coreTools.parseQuery(result.query);\n      return result;\n    },\n    /**\r\n     * @param {String} query\r\n     * @returns {{}}\r\n     */\n    parseQuery: function parseQuery(query) {\n      query = typeof query === 'string' ? query.replace(/^\\?/, '') : '';\n      var vars = query.split(\"&\");\n      var query_string = {};\n      for (var i = 0; i < vars.length; i++) {\n        var pair = vars[i].split(\"=\");\n        var key = decodeURIComponent(pair[0]);\n        var value = decodeURIComponent(pair[1]);\n        if (typeof query_string[key] === \"undefined\") {\n          query_string[key] = decodeURIComponent(value);\n        } else if (typeof query_string[key] === \"string\") {\n          query_string[key] = [query_string[key], decodeURIComponent(value)];\n        } else {\n          query_string[key].push(decodeURIComponent(value));\n        }\n      }\n      return query_string;\n    },\n    /**\r\n     *\r\n     */\n    toggleFullscreen: function toggleFullscreen() {\n      if (!document.fullscreenElement) {\n        document.documentElement.requestFullscreen();\n      } else {\n        if (document.exitFullscreen) {\n          document.exitFullscreen();\n        }\n      }\n    },\n    /**\r\n     * Форматирование числа\r\n     * @param   {number|string} numb\r\n     * @returns {string}\r\n     * @private\r\n     */\n    formatNumber: function formatNumber(numb) {\n      numb = numb.toString();\n      return numb.replace(/(\\d)(?=(\\d\\d\\d)+([^\\d]|$))/g, '$1 ');\n    },\n    /**\r\n     * Форматирование числа\r\n     * @param   {number|string} numb\r\n     * @param   {string}       divider\r\n     * @returns {string}\r\n     * @private\r\n     */\n    formatMoney: function formatMoney(numb, divider) {\n      if (isNaN(numb)) {\n        return this.formatNumber(numb);\n      } else {\n        divider = divider || ' ';\n        numb = Number(numb).toFixed(2).toString();\n        return numb.replace(/(\\d)(?=(\\d\\d\\d)+([^\\d]|$))/g, '$1' + divider);\n      }\n    },\n    /**\r\n     * Копирование\r\n     * @param text\r\n     * @returns {Promise<unknown>|Promise<void>}\r\n     */\n    clipboardText: function clipboardText(text) {\n      /**\r\n       * Старый вариант копирования\r\n       * @param text\r\n       */\n      function fallbackCopyTextToClipboard(text) {\n        return new Promise(function (resolve, reject) {\n          var textArea = document.createElement(\"textarea\");\n          textArea.value = text;\n\n          // Avoid scrolling to bottom\n          textArea.style.top = \"0\";\n          textArea.style.left = \"0\";\n          textArea.style.position = \"fixed\";\n          document.body.appendChild(textArea);\n          textArea.focus();\n          textArea.select();\n          try {\n            var successful = document.execCommand('copy');\n            document.body.removeChild(textArea);\n            if (successful) {\n              resolve();\n            } else {\n              reject();\n            }\n          } catch (err) {\n            document.body.removeChild(textArea);\n            reject();\n          }\n        });\n      }\n\n      /**\r\n       * @param text\r\n       * @returns {Promise<void>|Promise<unknown>}\r\n       */\n      function copyTextToClipboard(text) {\n        if (!navigator.clipboard) {\n          return fallbackCopyTextToClipboard(text);\n        }\n        return navigator.clipboard.writeText(text);\n      }\n      return copyTextToClipboard(text);\n    },\n    /**\r\n     * @returns {number}\r\n     * @private\r\n     */\n    hashCode: function hashCode() {\n      var string = 'A' + new Date().getTime();\n      for (var h = 0, i = 0; i < string.length; h &= h) {\n        h = 31 * h + string.charCodeAt(i++);\n      }\n      return Math.abs(h);\n    },\n    /**\r\n     * @returns Promise\r\n     */\n    getFingerprint: function getFingerprint() {\n      return FingerprintJS.load().then(function (fp) {\n        return fp.get();\n      }).then(function (result) {\n        return result.visitorId;\n      });\n    },\n    /**\r\n     * @param token\r\n     * @returns {*}\r\n     */\n    jwtDecode: function jwtDecode(token) {\n      return o(token);\n    }\n  };\n\n  var coreTokens = {\n    _refreshInterval: 0,\n    /**\r\n     *\r\n     */\n    initRefresh: function initRefresh() {\n      this.deinitRefresh();\n      this._refreshInterval = setInterval(this.refreshToken, 300000); // 5 минут\n    },\n    /**\r\n     * s\r\n     */\n    deinitRefresh: function deinitRefresh() {\n      if (this._refreshInterval) {\n        clearInterval(this._refreshInterval);\n      }\n    },\n    /**\r\n     * @param success\r\n     * @param fail\r\n     * @returns {Promise<void>}\r\n     */\n    refreshToken: function () {\n      var _refreshToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(success, fail) {\n        var refreshToken, tokenData;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              refreshToken = coreTokens.getRefreshToken();\n              tokenData = coreTools.jwtDecode(refreshToken);\n              if (!(new Date(tokenData.exp * 1000) <= new Date())) {\n                _context.next = 6;\n                break;\n              }\n              coreTokens.clearRefreshToken();\n              if (typeof fail === 'function') {\n                fail();\n              }\n              return _context.abrupt(\"return\");\n            case 6:\n              _context.t0 = $;\n              _context.t1 = coreMain.options.basePath + \"/auth/refresh\";\n              _context.t2 = JSON;\n              _context.t3 = refreshToken;\n              _context.next = 12;\n              return coreTools.getFingerprint();\n            case 12:\n              _context.t4 = _context.sent;\n              _context.t5 = {\n                refresh_token: _context.t3,\n                fp: _context.t4\n              };\n              _context.t6 = _context.t2.stringify.call(_context.t2, _context.t5);\n              _context.t7 = {\n                url: _context.t1,\n                method: \"POST\",\n                dataType: \"json\",\n                contentType: \"application/json; charset=utf-8\",\n                data: _context.t6\n              };\n              _context.t0.ajax.call(_context.t0, _context.t7).done(function (response) {\n                if (typeof response.access_token !== 'string' || typeof response.refresh_token !== 'string' || !response.access_token || !response.refresh_token) {\n                  var errorMessage = response.error_message || \"Ошибка. Попробуйте позже, либо обратитесь к администратору\";\n                  CoreUI.notice.danger(errorMessage);\n                  if (typeof fail === 'function') {\n                    fail();\n                  }\n                } else {\n                  coreTokens.setAccessToken(response.access_token);\n                  coreTokens.setRefreshToken(response.refresh_token);\n                  if (typeof success === 'function') {\n                    success();\n                  }\n                }\n              }).fail(function (response) {\n                var errorMessage = '';\n                if (response.responseJSON && response.responseJSON.error_message) {\n                  errorMessage = response.responseJSON.error_message;\n                } else {\n                  errorMessage = $(\"<div>\" + response.responseText + \"</div>\").text();\n                }\n                errorMessage = errorMessage || 'Ошибка. Попробуйте позже, либо обратитесь к администратору';\n                CoreUI.notice.danger(errorMessage);\n                if (typeof fail === 'function') {\n                  fail();\n                }\n              });\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      function refreshToken(_x, _x2) {\n        return _refreshToken.apply(this, arguments);\n      }\n      return refreshToken;\n    }(),\n    /**\r\n     * Получение аутентификации\r\n     * @param accessToken\r\n     * @returns {boolean}\r\n     */\n    setAccessToken: function setAccessToken(accessToken) {\n      localStorage.setItem('core3_access_token', accessToken);\n      var tokenData = coreTools.jwtDecode(coreTokens.getAccessToken());\n      var dateExpired = new Date(tokenData.exp * 1000);\n      if (dateExpired > new Date()) {\n        var expires = \"; expires=\" + dateExpired.toUTCString();\n        document.cookie = \"Core-Access-Token=\" + accessToken + expires + \"; path=/\" + coreMain.options.basePath;\n      }\n    },\n    /**\r\n     * Получение аутентификации\r\n     * @param refreshToken\r\n     * @returns {boolean}\r\n     */\n    setRefreshToken: function setRefreshToken(refreshToken) {\n      localStorage.setItem('core3_refresh_token', refreshToken);\n    },\n    /**\r\n     * Получение аутентификации\r\n     * @returns {String|boolean}\r\n     */\n    getAccessToken: function getAccessToken() {\n      var authToken = localStorage.getItem('core3_access_token');\n      if (!authToken) {\n        coreTokens.clearAccessToken();\n        authToken = false;\n      }\n      return authToken;\n    },\n    /**\r\n     * Получение аутентификации\r\n     * @returns {String|boolean}\r\n     */\n    getRefreshToken: function getRefreshToken() {\n      var refreshToken = localStorage.getItem('core3_refresh_token');\n      if (!refreshToken) {\n        coreTokens.clearRefreshToken();\n        refreshToken = false;\n      }\n      return refreshToken;\n    },\n    /**\r\n     * Очистка аутентификации\r\n     */\n    clearAccessToken: function clearAccessToken() {\n      localStorage.removeItem('core3_access_token');\n      document.cookie = 'Core-Access-Token=; Path=/' + coreMain.options.basePath + '; Expires=Thu, 01 Jan 1970 00:00:01 GMT;';\n    },\n    /**\r\n     * Очистка аутентификации\r\n     */\n    clearRefreshToken: function clearRefreshToken() {\n      localStorage.removeItem('core3_refresh_token');\n    }\n  };\n\n  var tpl = Object.create(null);\n  tpl['auth/main.html'] = '<div class=\"container container-login\" style=\"display: none\"> <div class=\"mdc-card\"> <div class=\"mdc-card__content\"> <img src=\"\" alt=\"logo\" class=\"logo\" style=\"display: none\"> <form class=\"mb-5\" novalidate> <span class=\"text-danger\"></span> <div class=\"form-controls mb-5\"> <div class=\"mb-3 text-start\"> <label class=\"form-label\" for=\"auth-login\">Логин или Email</label> <div class=\"control-icon position-relative\"> <input type=\"text\" name=\"login\" class=\"form-control\" id=\"auth-login\" required> <i class=\"bi bi-person-fill\"></i> </div> </div> <div class=\"mb-5 text-start\"> <label class=\"form-label\" for=\"auth-password\">Пароль</label> <div class=\"control-icon position-relative\"> <input type=\"password\" name=\"password\" class=\"form-control\" id=\"auth-password\" required> <i class=\"bi bi-shield-lock\"></i> </div> </div> <button class=\"btn btn-primary w-100 py-2\" type=\"submit\">Войти</button> </div> </form> <div class=\"links-container\"> <a class=\"install-button\" style=\"display: none\">Установить</a> <a href=\"#/registration\" class=\"reg-button\">Регистрация</a> </div> </div> </div> </div> <div class=\"container container-registration\" style=\"display: none\"> <div class=\"mdc-card\"> <div class=\"mdc-card__content\"> <img src=\"\" alt=\"logo\" class=\"logo\" style=\"display: none\"> <p class=\"mdc-typography--headline5\">Регистрация</p> <div class=\"text-danger mdc-typography--subtitle2\"></div> <div class=\"text-success mdc-typography--subtitle2\"></div> <form class=\"mb-5\" novalidate> <div class=\"form-controls mb-5\"> <div class=\"mb-3 text-start\"> <label class=\"form-label\" for=\"registration-name\">Имя</label> <input type=\"text\" name=\"name\" class=\"form-control\" id=\"registration-name\" required> </div> <div class=\"mb-3 text-start\"> <label class=\"form-label\" for=\"registration-email\">Email</label> <input type=\"email\" name=\"email\" class=\"form-control\" id=\"registration-email\" required> </div> <div class=\"mb-3 text-start\"> <label class=\"form-label\" for=\"registration-pass\">Пароль</label> <input type=\"password\" name=\"password\" class=\"form-control\" id=\"registration-pass\" required> </div> <div class=\"mb-5 text-start\"> <label class=\"form-label\" for=\"registration-pass2\">Пароль еще раз</label> <input type=\"password\" class=\"form-control\" id=\"registration-pass2\" required> </div> <button class=\"btn btn-primary w-100 py-2\" type=\"submit\">Зарегистрироваться</button> </div> </form> <div class=\"links-container\"> <a class=\"install-button\" style=\"display: none\">Установить</a> <a href=\"#\" class=\"login-button\">Войти</a> </div> </div> </div> </div>';\n  tpl['menu/loader.html'] = '<div id=\"loader\"> <div role=\"progressbar\" class=\"mdc-linear-progress loader-progress\" aria-label=\"Example Progress Bar\" aria-valuemin=\"0\" aria-valuemax=\"1\" aria-valuenow=\"0\"> <div class=\"mdc-linear-progress__buffer\"> <div class=\"mdc-linear-progress__buffer-bar\"></div> <div class=\"mdc-linear-progress__buffer-dots\"></div> </div> <div class=\"mdc-linear-progress__bar mdc-linear-progress__primary-bar\"> <span class=\"mdc-linear-progress__bar-inner\"></span> </div> <div class=\"mdc-linear-progress__bar mdc-linear-progress__secondary-bar\"> <span class=\"mdc-linear-progress__bar-inner\"></span> </div> </div> <div class=\"loader-block\"></div> </div>';\n  tpl['menu/main.html'] = '<header class=\"mdc-top-app-bar mdc-top-app-bar--fixed app-bar\"> <div class=\"mdc-top-app-bar__row\"> <section class=\"mdc-top-app-bar__section mdc-top-app-bar__section--align-start\"> <button class=\"mdc-ripple-surface open-menu\"><i class=\"fa-solid fa-bars\"></i></button> <div class=\"header-title-container\"> <span class=\"mdc-top-app-bar__title\"></span> <span class=\"mdc-top-app-bar__subtitle\"></span> </div> </section> <section class=\"mdc-top-app-bar__section mdc-top-app-bar__section--align-end\" role=\"toolbar\"></section> </div> </header> <aside class=\"menu-drawer\"> <div class=\"menu-drawer__content\"> <div class=\"menu-drawer__header\"> <a class=\"module-home\" href=\"#/\"> <span class=\"fa-solid fa-house\"></span> <h3 class=\"system-title\"></h3> </a> </div> <ul class=\"menu-list level-1\"></ul> </div> </aside> <div class=\"menu-drawer-scrim\"></div> <div class=\"menu-drawer-swipe\"></div> <div class=\"menu-drawer-app\"> <main class=\"main-content\"> <div class=\"main-wrapper\"></div> </main> </div>';\n  tpl['menu/module.html'] = '<li class=\"menu-list-item core-module core-module-<%= module.name %> <% if (module.sections && module.sections.length > 0) { %>menu-item-nested<% } %>\"> <div class=\"item-control\"> <a href=\"#/<%= module.name %>/<%= module.index %>\" class=\"mdc-ripple-surface\" data-module=\"<%= module.name %>\" data-section=\"<%= module.index %>\"> <% if (module.icon) { %> <i class=\"<%= module.icon %>\"></i> <% } else { %> <span class=\"module-icon-letter\"><%= module.title.trim().substring(0, 1) %></span> <% } %> <span class=\"menu-list-item__text\"><%= module.title %></span> </a> <% if (module.sections && module.sections.length > 0) { %> <button class=\"menu-icon-button mdc-ripple-surface\"><i class=\"fa-solid fa-sort-down\"></i></button> <% } %> </div> <ul class=\"menu-list level-2\"> <li class=\"menu-list-item core-module-section-index\"> <a href=\"#/<%= module.name %>/<%= module.index %>\" class=\"mdc-ripple-surface\" data-module=\"<%= module.name %>\" data-section=\"<%= module.index %>\"> <%= module.title %> </a> </li> <% if (module.sections && module.sections.length > 0) { %> <% module.sections.forEach(function(section) { %> <li class=\"menu-list-item core-module-section core-module-<%= module.name %>-<%= section.name %>\"> <a href=\"#/<%= module.name %>/<%= section.name %>\" class=\"mdc-ripple-surface\" data-module=\"<%= module.name %>\" data-section=\"<%= section.name %>\"> <span class=\"menu-list-item__text\"><%= section.title %></span> </a> </li> <% }); %> <% } %> </ul> </li>';\n  tpl['menu/navbar.html'] = '<ul class=\"navbar-nav\"> <li class=\"nav-item dropdown cabinet-user\"> <button class=\"btn btn-link text-dark dropdown-toggle d-flex align-items-center\" type=\"button\" data-bs-toggle=\"dropdown\"> <% if (user.avatar) { %> <img src=\"<%= user.avatar %>\" alt=\"avatar\" class=\"rounded-circle border\" loading=\"lazy\"/> <% } else { %> <i class=\"fa-solid fa-circle-user\"></i> <% } %> </button> <ul class=\"dropdown-menu shadow\"> <li class=\"cabinet-user-info\"> <b class=\"cabinet-user-name\"><%= user.name %></b><br> <span class=\"cabinet-user-login\"><%= user.login %></span> </li> <li> <hr class=\"dropdown-divider\"/> </li> <li> <a class=\"dropdown-item menu-logout\" href=\"#\"> <i class=\"fa-solid fa-arrow-right-from-bracket\"></i> Выйти </a> </li> </ul> </li> </ul>';\n  tpl['menu/preloader.html'] = '<div id=\"preloader\"> <div class=\"loading-lock\"></div> <div class=\"loading-block\"> <div class=\"spinner-border text-secondary\"> <span class=\"visually-hidden\"></span> </div> <div class=\"loading-text\"><%= text %></div> </div> </div>';\n\n  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\n  function commonjsRequire(path) {\n  \tthrow new Error('Could not dynamically require \"' + path + '\". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');\n  }\n\n  var ejs_min = {exports: {}};\n\n  ejs_min.exports;\n  (function (module, exports) {\n    (function (f) {\n      {\n        module.exports = f();\n      }\n    })(function () {\n      return function () {\n        function r(e, n, t) {\n          function o(i, f) {\n            if (!n[i]) {\n              if (!e[i]) {\n                var c = \"function\" == typeof commonjsRequire && commonjsRequire;\n                if (!f && c) return c(i, !0);\n                if (u) return u(i, !0);\n                var a = new Error(\"Cannot find module '\" + i + \"'\");\n                throw a.code = \"MODULE_NOT_FOUND\", a;\n              }\n              var p = n[i] = {\n                exports: {}\n              };\n              e[i][0].call(p.exports, function (r) {\n                var n = e[i][1][r];\n                return o(n || r);\n              }, p, p.exports, r, e, n, t);\n            }\n            return n[i].exports;\n          }\n          for (var u = \"function\" == typeof commonjsRequire && commonjsRequire, i = 0; i < t.length; i++) o(t[i]);\n          return o;\n        }\n        return r;\n      }()({\n        1: [function (require, module, exports) {\n\n          var fs = require(\"fs\");\n          var path = require(\"path\");\n          var utils = require(\"./utils\");\n          var scopeOptionWarned = false;\n          var _VERSION_STRING = require(\"../package.json\").version;\n          var _DEFAULT_OPEN_DELIMITER = \"<\";\n          var _DEFAULT_CLOSE_DELIMITER = \">\";\n          var _DEFAULT_DELIMITER = \"%\";\n          var _DEFAULT_LOCALS_NAME = \"locals\";\n          var _NAME = \"ejs\";\n          var _REGEX_STRING = \"(<%%|%%>|<%=|<%-|<%_|<%#|<%|%>|-%>|_%>)\";\n          var _OPTS_PASSABLE_WITH_DATA = [\"delimiter\", \"scope\", \"context\", \"debug\", \"compileDebug\", \"client\", \"_with\", \"rmWhitespace\", \"strict\", \"filename\", \"async\"];\n          var _OPTS_PASSABLE_WITH_DATA_EXPRESS = _OPTS_PASSABLE_WITH_DATA.concat(\"cache\");\n          var _BOM = /^\\uFEFF/;\n          var _JS_IDENTIFIER = /^[a-zA-Z_$][0-9a-zA-Z_$]*$/;\n          exports.cache = utils.cache;\n          exports.fileLoader = fs.readFileSync;\n          exports.localsName = _DEFAULT_LOCALS_NAME;\n          exports.promiseImpl = new Function(\"return this;\")().Promise;\n          exports.resolveInclude = function (name, filename, isDir) {\n            var dirname = path.dirname;\n            var extname = path.extname;\n            var resolve = path.resolve;\n            var includePath = resolve(isDir ? filename : dirname(filename), name);\n            var ext = extname(name);\n            if (!ext) {\n              includePath += \".ejs\";\n            }\n            return includePath;\n          };\n          function resolvePaths(name, paths) {\n            var filePath;\n            if (paths.some(function (v) {\n              filePath = exports.resolveInclude(name, v, true);\n              return fs.existsSync(filePath);\n            })) {\n              return filePath;\n            }\n          }\n          function getIncludePath(path, options) {\n            var includePath;\n            var filePath;\n            var views = options.views;\n            var match = /^[A-Za-z]+:\\\\|^\\//.exec(path);\n            if (match && match.length) {\n              path = path.replace(/^\\/*/, \"\");\n              if (Array.isArray(options.root)) {\n                includePath = resolvePaths(path, options.root);\n              } else {\n                includePath = exports.resolveInclude(path, options.root || \"/\", true);\n              }\n            } else {\n              if (options.filename) {\n                filePath = exports.resolveInclude(path, options.filename);\n                if (fs.existsSync(filePath)) {\n                  includePath = filePath;\n                }\n              }\n              if (!includePath && Array.isArray(views)) {\n                includePath = resolvePaths(path, views);\n              }\n              if (!includePath && typeof options.includer !== \"function\") {\n                throw new Error('Could not find the include file \"' + options.escapeFunction(path) + '\"');\n              }\n            }\n            return includePath;\n          }\n          function handleCache(options, template) {\n            var func;\n            var filename = options.filename;\n            var hasTemplate = arguments.length > 1;\n            if (options.cache) {\n              if (!filename) {\n                throw new Error(\"cache option requires a filename\");\n              }\n              func = exports.cache.get(filename);\n              if (func) {\n                return func;\n              }\n              if (!hasTemplate) {\n                template = fileLoader(filename).toString().replace(_BOM, \"\");\n              }\n            } else if (!hasTemplate) {\n              if (!filename) {\n                throw new Error(\"Internal EJS error: no file name or template \" + \"provided\");\n              }\n              template = fileLoader(filename).toString().replace(_BOM, \"\");\n            }\n            func = exports.compile(template, options);\n            if (options.cache) {\n              exports.cache.set(filename, func);\n            }\n            return func;\n          }\n          function tryHandleCache(options, data, cb) {\n            var result;\n            if (!cb) {\n              if (typeof exports.promiseImpl == \"function\") {\n                return new exports.promiseImpl(function (resolve, reject) {\n                  try {\n                    result = handleCache(options)(data);\n                    resolve(result);\n                  } catch (err) {\n                    reject(err);\n                  }\n                });\n              } else {\n                throw new Error(\"Please provide a callback function\");\n              }\n            } else {\n              try {\n                result = handleCache(options)(data);\n              } catch (err) {\n                return cb(err);\n              }\n              cb(null, result);\n            }\n          }\n          function fileLoader(filePath) {\n            return exports.fileLoader(filePath);\n          }\n          function includeFile(path, options) {\n            var opts = utils.shallowCopy(utils.createNullProtoObjWherePossible(), options);\n            opts.filename = getIncludePath(path, opts);\n            if (typeof options.includer === \"function\") {\n              var includerResult = options.includer(path, opts.filename);\n              if (includerResult) {\n                if (includerResult.filename) {\n                  opts.filename = includerResult.filename;\n                }\n                if (includerResult.template) {\n                  return handleCache(opts, includerResult.template);\n                }\n              }\n            }\n            return handleCache(opts);\n          }\n          function rethrow(err, str, flnm, lineno, esc) {\n            var lines = str.split(\"\\n\");\n            var start = Math.max(lineno - 3, 0);\n            var end = Math.min(lines.length, lineno + 3);\n            var filename = esc(flnm);\n            var context = lines.slice(start, end).map(function (line, i) {\n              var curr = i + start + 1;\n              return (curr == lineno ? \" >> \" : \"    \") + curr + \"| \" + line;\n            }).join(\"\\n\");\n            err.path = filename;\n            err.message = (filename || \"ejs\") + \":\" + lineno + \"\\n\" + context + \"\\n\\n\" + err.message;\n            throw err;\n          }\n          function stripSemi(str) {\n            return str.replace(/;(\\s*$)/, \"$1\");\n          }\n          exports.compile = function compile(template, opts) {\n            var templ;\n            if (opts && opts.scope) {\n              if (!scopeOptionWarned) {\n                console.warn(\"`scope` option is deprecated and will be removed in EJS 3\");\n                scopeOptionWarned = true;\n              }\n              if (!opts.context) {\n                opts.context = opts.scope;\n              }\n              delete opts.scope;\n            }\n            templ = new Template(template, opts);\n            return templ.compile();\n          };\n          exports.render = function (template, d, o) {\n            var data = d || utils.createNullProtoObjWherePossible();\n            var opts = o || utils.createNullProtoObjWherePossible();\n            if (arguments.length == 2) {\n              utils.shallowCopyFromList(opts, data, _OPTS_PASSABLE_WITH_DATA);\n            }\n            return handleCache(opts, template)(data);\n          };\n          exports.renderFile = function () {\n            var args = Array.prototype.slice.call(arguments);\n            var filename = args.shift();\n            var cb;\n            var opts = {\n              filename: filename\n            };\n            var data;\n            var viewOpts;\n            if (typeof arguments[arguments.length - 1] == \"function\") {\n              cb = args.pop();\n            }\n            if (args.length) {\n              data = args.shift();\n              if (args.length) {\n                utils.shallowCopy(opts, args.pop());\n              } else {\n                if (data.settings) {\n                  if (data.settings.views) {\n                    opts.views = data.settings.views;\n                  }\n                  if (data.settings[\"view cache\"]) {\n                    opts.cache = true;\n                  }\n                  viewOpts = data.settings[\"view options\"];\n                  if (viewOpts) {\n                    utils.shallowCopy(opts, viewOpts);\n                  }\n                }\n                utils.shallowCopyFromList(opts, data, _OPTS_PASSABLE_WITH_DATA_EXPRESS);\n              }\n              opts.filename = filename;\n            } else {\n              data = utils.createNullProtoObjWherePossible();\n            }\n            return tryHandleCache(opts, data, cb);\n          };\n          exports.Template = Template;\n          exports.clearCache = function () {\n            exports.cache.reset();\n          };\n          function Template(text, optsParam) {\n            var opts = utils.hasOwnOnlyObject(optsParam);\n            var options = utils.createNullProtoObjWherePossible();\n            this.templateText = text;\n            this.mode = null;\n            this.truncate = false;\n            this.currentLine = 1;\n            this.source = \"\";\n            options.client = opts.client || false;\n            options.escapeFunction = opts.escape || opts.escapeFunction || utils.escapeXML;\n            options.compileDebug = opts.compileDebug !== false;\n            options.debug = !!opts.debug;\n            options.filename = opts.filename;\n            options.openDelimiter = opts.openDelimiter || exports.openDelimiter || _DEFAULT_OPEN_DELIMITER;\n            options.closeDelimiter = opts.closeDelimiter || exports.closeDelimiter || _DEFAULT_CLOSE_DELIMITER;\n            options.delimiter = opts.delimiter || exports.delimiter || _DEFAULT_DELIMITER;\n            options.strict = opts.strict || false;\n            options.context = opts.context;\n            options.cache = opts.cache || false;\n            options.rmWhitespace = opts.rmWhitespace;\n            options.root = opts.root;\n            options.includer = opts.includer;\n            options.outputFunctionName = opts.outputFunctionName;\n            options.localsName = opts.localsName || exports.localsName || _DEFAULT_LOCALS_NAME;\n            options.views = opts.views;\n            options.async = opts.async;\n            options.destructuredLocals = opts.destructuredLocals;\n            options.legacyInclude = typeof opts.legacyInclude != \"undefined\" ? !!opts.legacyInclude : true;\n            if (options.strict) {\n              options._with = false;\n            } else {\n              options._with = typeof opts._with != \"undefined\" ? opts._with : true;\n            }\n            this.opts = options;\n            this.regex = this.createRegex();\n          }\n          Template.modes = {\n            EVAL: \"eval\",\n            ESCAPED: \"escaped\",\n            RAW: \"raw\",\n            COMMENT: \"comment\",\n            LITERAL: \"literal\"\n          };\n          Template.prototype = {\n            createRegex: function () {\n              var str = _REGEX_STRING;\n              var delim = utils.escapeRegExpChars(this.opts.delimiter);\n              var open = utils.escapeRegExpChars(this.opts.openDelimiter);\n              var close = utils.escapeRegExpChars(this.opts.closeDelimiter);\n              str = str.replace(/%/g, delim).replace(/</g, open).replace(/>/g, close);\n              return new RegExp(str);\n            },\n            compile: function () {\n              var src;\n              var fn;\n              var opts = this.opts;\n              var prepended = \"\";\n              var appended = \"\";\n              var escapeFn = opts.escapeFunction;\n              var ctor;\n              var sanitizedFilename = opts.filename ? JSON.stringify(opts.filename) : \"undefined\";\n              if (!this.source) {\n                this.generateSource();\n                prepended += '  var __output = \"\";\\n' + \"  function __append(s) { if (s !== undefined && s !== null) __output += s }\\n\";\n                if (opts.outputFunctionName) {\n                  if (!_JS_IDENTIFIER.test(opts.outputFunctionName)) {\n                    throw new Error(\"outputFunctionName is not a valid JS identifier.\");\n                  }\n                  prepended += \"  var \" + opts.outputFunctionName + \" = __append;\" + \"\\n\";\n                }\n                if (opts.localsName && !_JS_IDENTIFIER.test(opts.localsName)) {\n                  throw new Error(\"localsName is not a valid JS identifier.\");\n                }\n                if (opts.destructuredLocals && opts.destructuredLocals.length) {\n                  var destructuring = \"  var __locals = (\" + opts.localsName + \" || {}),\\n\";\n                  for (var i = 0; i < opts.destructuredLocals.length; i++) {\n                    var name = opts.destructuredLocals[i];\n                    if (!_JS_IDENTIFIER.test(name)) {\n                      throw new Error(\"destructuredLocals[\" + i + \"] is not a valid JS identifier.\");\n                    }\n                    if (i > 0) {\n                      destructuring += \",\\n  \";\n                    }\n                    destructuring += name + \" = __locals.\" + name;\n                  }\n                  prepended += destructuring + \";\\n\";\n                }\n                if (opts._with !== false) {\n                  prepended += \"  with (\" + opts.localsName + \" || {}) {\" + \"\\n\";\n                  appended += \"  }\" + \"\\n\";\n                }\n                appended += \"  return __output;\" + \"\\n\";\n                this.source = prepended + this.source + appended;\n              }\n              if (opts.compileDebug) {\n                src = \"var __line = 1\" + \"\\n\" + \"  , __lines = \" + JSON.stringify(this.templateText) + \"\\n\" + \"  , __filename = \" + sanitizedFilename + \";\" + \"\\n\" + \"try {\" + \"\\n\" + this.source + \"} catch (e) {\" + \"\\n\" + \"  rethrow(e, __lines, __filename, __line, escapeFn);\" + \"\\n\" + \"}\" + \"\\n\";\n              } else {\n                src = this.source;\n              }\n              if (opts.client) {\n                src = \"escapeFn = escapeFn || \" + escapeFn.toString() + \";\" + \"\\n\" + src;\n                if (opts.compileDebug) {\n                  src = \"rethrow = rethrow || \" + rethrow.toString() + \";\" + \"\\n\" + src;\n                }\n              }\n              if (opts.strict) {\n                src = '\"use strict\";\\n' + src;\n              }\n              if (opts.debug) {\n                console.log(src);\n              }\n              if (opts.compileDebug && opts.filename) {\n                src = src + \"\\n\" + \"//# sourceURL=\" + sanitizedFilename + \"\\n\";\n              }\n              try {\n                if (opts.async) {\n                  try {\n                    ctor = new Function(\"return (async function(){}).constructor;\")();\n                  } catch (e) {\n                    if (e instanceof SyntaxError) {\n                      throw new Error(\"This environment does not support async/await\");\n                    } else {\n                      throw e;\n                    }\n                  }\n                } else {\n                  ctor = Function;\n                }\n                fn = new ctor(opts.localsName + \", escapeFn, include, rethrow\", src);\n              } catch (e) {\n                if (e instanceof SyntaxError) {\n                  if (opts.filename) {\n                    e.message += \" in \" + opts.filename;\n                  }\n                  e.message += \" while compiling ejs\\n\\n\";\n                  e.message += \"If the above error is not helpful, you may want to try EJS-Lint:\\n\";\n                  e.message += \"https://github.com/RyanZim/EJS-Lint\";\n                  if (!opts.async) {\n                    e.message += \"\\n\";\n                    e.message += \"Or, if you meant to create an async function, pass `async: true` as an option.\";\n                  }\n                }\n                throw e;\n              }\n              var returnedFn = opts.client ? fn : function anonymous(data) {\n                var include = function (path, includeData) {\n                  var d = utils.shallowCopy(utils.createNullProtoObjWherePossible(), data);\n                  if (includeData) {\n                    d = utils.shallowCopy(d, includeData);\n                  }\n                  return includeFile(path, opts)(d);\n                };\n                return fn.apply(opts.context, [data || utils.createNullProtoObjWherePossible(), escapeFn, include, rethrow]);\n              };\n              if (opts.filename && typeof Object.defineProperty === \"function\") {\n                var filename = opts.filename;\n                var basename = path.basename(filename, path.extname(filename));\n                try {\n                  Object.defineProperty(returnedFn, \"name\", {\n                    value: basename,\n                    writable: false,\n                    enumerable: false,\n                    configurable: true\n                  });\n                } catch (e) {}\n              }\n              return returnedFn;\n            },\n            generateSource: function () {\n              var opts = this.opts;\n              if (opts.rmWhitespace) {\n                this.templateText = this.templateText.replace(/[\\r\\n]+/g, \"\\n\").replace(/^\\s+|\\s+$/gm, \"\");\n              }\n              this.templateText = this.templateText.replace(/[ \\t]*<%_/gm, \"<%_\").replace(/_%>[ \\t]*/gm, \"_%>\");\n              var self = this;\n              var matches = this.parseTemplateText();\n              var d = this.opts.delimiter;\n              var o = this.opts.openDelimiter;\n              var c = this.opts.closeDelimiter;\n              if (matches && matches.length) {\n                matches.forEach(function (line, index) {\n                  var closing;\n                  if (line.indexOf(o + d) === 0 && line.indexOf(o + d + d) !== 0) {\n                    closing = matches[index + 2];\n                    if (!(closing == d + c || closing == \"-\" + d + c || closing == \"_\" + d + c)) {\n                      throw new Error('Could not find matching close tag for \"' + line + '\".');\n                    }\n                  }\n                  self.scanLine(line);\n                });\n              }\n            },\n            parseTemplateText: function () {\n              var str = this.templateText;\n              var pat = this.regex;\n              var result = pat.exec(str);\n              var arr = [];\n              var firstPos;\n              while (result) {\n                firstPos = result.index;\n                if (firstPos !== 0) {\n                  arr.push(str.substring(0, firstPos));\n                  str = str.slice(firstPos);\n                }\n                arr.push(result[0]);\n                str = str.slice(result[0].length);\n                result = pat.exec(str);\n              }\n              if (str) {\n                arr.push(str);\n              }\n              return arr;\n            },\n            _addOutput: function (line) {\n              if (this.truncate) {\n                line = line.replace(/^(?:\\r\\n|\\r|\\n)/, \"\");\n                this.truncate = false;\n              }\n              if (!line) {\n                return line;\n              }\n              line = line.replace(/\\\\/g, \"\\\\\\\\\");\n              line = line.replace(/\\n/g, \"\\\\n\");\n              line = line.replace(/\\r/g, \"\\\\r\");\n              line = line.replace(/\"/g, '\\\\\"');\n              this.source += '    ; __append(\"' + line + '\")' + \"\\n\";\n            },\n            scanLine: function (line) {\n              var self = this;\n              var d = this.opts.delimiter;\n              var o = this.opts.openDelimiter;\n              var c = this.opts.closeDelimiter;\n              var newLineCount = 0;\n              newLineCount = line.split(\"\\n\").length - 1;\n              switch (line) {\n                case o + d:\n                case o + d + \"_\":\n                  this.mode = Template.modes.EVAL;\n                  break;\n                case o + d + \"=\":\n                  this.mode = Template.modes.ESCAPED;\n                  break;\n                case o + d + \"-\":\n                  this.mode = Template.modes.RAW;\n                  break;\n                case o + d + \"#\":\n                  this.mode = Template.modes.COMMENT;\n                  break;\n                case o + d + d:\n                  this.mode = Template.modes.LITERAL;\n                  this.source += '    ; __append(\"' + line.replace(o + d + d, o + d) + '\")' + \"\\n\";\n                  break;\n                case d + d + c:\n                  this.mode = Template.modes.LITERAL;\n                  this.source += '    ; __append(\"' + line.replace(d + d + c, d + c) + '\")' + \"\\n\";\n                  break;\n                case d + c:\n                case \"-\" + d + c:\n                case \"_\" + d + c:\n                  if (this.mode == Template.modes.LITERAL) {\n                    this._addOutput(line);\n                  }\n                  this.mode = null;\n                  this.truncate = line.indexOf(\"-\") === 0 || line.indexOf(\"_\") === 0;\n                  break;\n                default:\n                  if (this.mode) {\n                    switch (this.mode) {\n                      case Template.modes.EVAL:\n                      case Template.modes.ESCAPED:\n                      case Template.modes.RAW:\n                        if (line.lastIndexOf(\"//\") > line.lastIndexOf(\"\\n\")) {\n                          line += \"\\n\";\n                        }\n                    }\n                    switch (this.mode) {\n                      case Template.modes.EVAL:\n                        this.source += \"    ; \" + line + \"\\n\";\n                        break;\n                      case Template.modes.ESCAPED:\n                        this.source += \"    ; __append(escapeFn(\" + stripSemi(line) + \"))\" + \"\\n\";\n                        break;\n                      case Template.modes.RAW:\n                        this.source += \"    ; __append(\" + stripSemi(line) + \")\" + \"\\n\";\n                        break;\n                      case Template.modes.COMMENT:\n                        break;\n                      case Template.modes.LITERAL:\n                        this._addOutput(line);\n                        break;\n                    }\n                  } else {\n                    this._addOutput(line);\n                  }\n              }\n              if (self.opts.compileDebug && newLineCount) {\n                this.currentLine += newLineCount;\n                this.source += \"    ; __line = \" + this.currentLine + \"\\n\";\n              }\n            }\n          };\n          exports.escapeXML = utils.escapeXML;\n          exports.__express = exports.renderFile;\n          exports.VERSION = _VERSION_STRING;\n          exports.name = _NAME;\n          if (typeof window != \"undefined\") {\n            window.ejs = exports;\n          }\n        }, {\n          \"../package.json\": 6,\n          \"./utils\": 2,\n          fs: 3,\n          path: 4\n        }],\n        2: [function (require, module, exports) {\n\n          var regExpChars = /[|\\\\{}()[\\]^$+*?.]/g;\n          var hasOwnProperty = Object.prototype.hasOwnProperty;\n          var hasOwn = function (obj, key) {\n            return hasOwnProperty.apply(obj, [key]);\n          };\n          exports.escapeRegExpChars = function (string) {\n            if (!string) {\n              return \"\";\n            }\n            return String(string).replace(regExpChars, \"\\\\$&\");\n          };\n          var _ENCODE_HTML_RULES = {\n            \"&\": \"&amp;\",\n            \"<\": \"&lt;\",\n            \">\": \"&gt;\",\n            '\"': \"&#34;\",\n            \"'\": \"&#39;\"\n          };\n          var _MATCH_HTML = /[&<>'\"]/g;\n          function encode_char(c) {\n            return _ENCODE_HTML_RULES[c] || c;\n          }\n          var escapeFuncStr = \"var _ENCODE_HTML_RULES = {\\n\" + '      \"&\": \"&amp;\"\\n' + '    , \"<\": \"&lt;\"\\n' + '    , \">\": \"&gt;\"\\n' + '    , \\'\"\\': \"&#34;\"\\n' + '    , \"\\'\": \"&#39;\"\\n' + \"    }\\n\" + \"  , _MATCH_HTML = /[&<>'\\\"]/g;\\n\" + \"function encode_char(c) {\\n\" + \"  return _ENCODE_HTML_RULES[c] || c;\\n\" + \"};\\n\";\n          exports.escapeXML = function (markup) {\n            return markup == undefined ? \"\" : String(markup).replace(_MATCH_HTML, encode_char);\n          };\n          function escapeXMLToString() {\n            return Function.prototype.toString.call(this) + \";\\n\" + escapeFuncStr;\n          }\n          try {\n            if (typeof Object.defineProperty === \"function\") {\n              Object.defineProperty(exports.escapeXML, \"toString\", {\n                value: escapeXMLToString\n              });\n            } else {\n              exports.escapeXML.toString = escapeXMLToString;\n            }\n          } catch (err) {\n            console.warn(\"Unable to set escapeXML.toString (is the Function prototype frozen?)\");\n          }\n          exports.shallowCopy = function (to, from) {\n            from = from || {};\n            if (to !== null && to !== undefined) {\n              for (var p in from) {\n                if (!hasOwn(from, p)) {\n                  continue;\n                }\n                if (p === \"__proto__\" || p === \"constructor\") {\n                  continue;\n                }\n                to[p] = from[p];\n              }\n            }\n            return to;\n          };\n          exports.shallowCopyFromList = function (to, from, list) {\n            list = list || [];\n            from = from || {};\n            if (to !== null && to !== undefined) {\n              for (var i = 0; i < list.length; i++) {\n                var p = list[i];\n                if (typeof from[p] != \"undefined\") {\n                  if (!hasOwn(from, p)) {\n                    continue;\n                  }\n                  if (p === \"__proto__\" || p === \"constructor\") {\n                    continue;\n                  }\n                  to[p] = from[p];\n                }\n              }\n            }\n            return to;\n          };\n          exports.cache = {\n            _data: {},\n            set: function (key, val) {\n              this._data[key] = val;\n            },\n            get: function (key) {\n              return this._data[key];\n            },\n            remove: function (key) {\n              delete this._data[key];\n            },\n            reset: function () {\n              this._data = {};\n            }\n          };\n          exports.hyphenToCamel = function (str) {\n            return str.replace(/-[a-z]/g, function (match) {\n              return match[1].toUpperCase();\n            });\n          };\n          exports.createNullProtoObjWherePossible = function () {\n            if (typeof Object.create == \"function\") {\n              return function () {\n                return Object.create(null);\n              };\n            }\n            if (!({\n              __proto__: null\n            } instanceof Object)) {\n              return function () {\n                return {\n                  __proto__: null\n                };\n              };\n            }\n            return function () {\n              return {};\n            };\n          }();\n          exports.hasOwnOnlyObject = function (obj) {\n            var o = exports.createNullProtoObjWherePossible();\n            for (var p in obj) {\n              if (hasOwn(obj, p)) {\n                o[p] = obj[p];\n              }\n            }\n            return o;\n          };\n        }, {}],\n        3: [function (require, module, exports) {}, {}],\n        4: [function (require, module, exports) {\n          (function (process) {\n            function normalizeArray(parts, allowAboveRoot) {\n              var up = 0;\n              for (var i = parts.length - 1; i >= 0; i--) {\n                var last = parts[i];\n                if (last === \".\") {\n                  parts.splice(i, 1);\n                } else if (last === \"..\") {\n                  parts.splice(i, 1);\n                  up++;\n                } else if (up) {\n                  parts.splice(i, 1);\n                  up--;\n                }\n              }\n              if (allowAboveRoot) {\n                for (; up--; up) {\n                  parts.unshift(\"..\");\n                }\n              }\n              return parts;\n            }\n            exports.resolve = function () {\n              var resolvedPath = \"\",\n                resolvedAbsolute = false;\n              for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n                var path = i >= 0 ? arguments[i] : process.cwd();\n                if (typeof path !== \"string\") {\n                  throw new TypeError(\"Arguments to path.resolve must be strings\");\n                } else if (!path) {\n                  continue;\n                }\n                resolvedPath = path + \"/\" + resolvedPath;\n                resolvedAbsolute = path.charAt(0) === \"/\";\n              }\n              resolvedPath = normalizeArray(filter(resolvedPath.split(\"/\"), function (p) {\n                return !!p;\n              }), !resolvedAbsolute).join(\"/\");\n              return (resolvedAbsolute ? \"/\" : \"\") + resolvedPath || \".\";\n            };\n            exports.normalize = function (path) {\n              var isAbsolute = exports.isAbsolute(path),\n                trailingSlash = substr(path, -1) === \"/\";\n              path = normalizeArray(filter(path.split(\"/\"), function (p) {\n                return !!p;\n              }), !isAbsolute).join(\"/\");\n              if (!path && !isAbsolute) {\n                path = \".\";\n              }\n              if (path && trailingSlash) {\n                path += \"/\";\n              }\n              return (isAbsolute ? \"/\" : \"\") + path;\n            };\n            exports.isAbsolute = function (path) {\n              return path.charAt(0) === \"/\";\n            };\n            exports.join = function () {\n              var paths = Array.prototype.slice.call(arguments, 0);\n              return exports.normalize(filter(paths, function (p, index) {\n                if (typeof p !== \"string\") {\n                  throw new TypeError(\"Arguments to path.join must be strings\");\n                }\n                return p;\n              }).join(\"/\"));\n            };\n            exports.relative = function (from, to) {\n              from = exports.resolve(from).substr(1);\n              to = exports.resolve(to).substr(1);\n              function trim(arr) {\n                var start = 0;\n                for (; start < arr.length; start++) {\n                  if (arr[start] !== \"\") break;\n                }\n                var end = arr.length - 1;\n                for (; end >= 0; end--) {\n                  if (arr[end] !== \"\") break;\n                }\n                if (start > end) return [];\n                return arr.slice(start, end - start + 1);\n              }\n              var fromParts = trim(from.split(\"/\"));\n              var toParts = trim(to.split(\"/\"));\n              var length = Math.min(fromParts.length, toParts.length);\n              var samePartsLength = length;\n              for (var i = 0; i < length; i++) {\n                if (fromParts[i] !== toParts[i]) {\n                  samePartsLength = i;\n                  break;\n                }\n              }\n              var outputParts = [];\n              for (var i = samePartsLength; i < fromParts.length; i++) {\n                outputParts.push(\"..\");\n              }\n              outputParts = outputParts.concat(toParts.slice(samePartsLength));\n              return outputParts.join(\"/\");\n            };\n            exports.sep = \"/\";\n            exports.delimiter = \":\";\n            exports.dirname = function (path) {\n              if (typeof path !== \"string\") path = path + \"\";\n              if (path.length === 0) return \".\";\n              var code = path.charCodeAt(0);\n              var hasRoot = code === 47;\n              var end = -1;\n              var matchedSlash = true;\n              for (var i = path.length - 1; i >= 1; --i) {\n                code = path.charCodeAt(i);\n                if (code === 47) {\n                  if (!matchedSlash) {\n                    end = i;\n                    break;\n                  }\n                } else {\n                  matchedSlash = false;\n                }\n              }\n              if (end === -1) return hasRoot ? \"/\" : \".\";\n              if (hasRoot && end === 1) {\n                return \"/\";\n              }\n              return path.slice(0, end);\n            };\n            function basename(path) {\n              if (typeof path !== \"string\") path = path + \"\";\n              var start = 0;\n              var end = -1;\n              var matchedSlash = true;\n              var i;\n              for (i = path.length - 1; i >= 0; --i) {\n                if (path.charCodeAt(i) === 47) {\n                  if (!matchedSlash) {\n                    start = i + 1;\n                    break;\n                  }\n                } else if (end === -1) {\n                  matchedSlash = false;\n                  end = i + 1;\n                }\n              }\n              if (end === -1) return \"\";\n              return path.slice(start, end);\n            }\n            exports.basename = function (path, ext) {\n              var f = basename(path);\n              if (ext && f.substr(-1 * ext.length) === ext) {\n                f = f.substr(0, f.length - ext.length);\n              }\n              return f;\n            };\n            exports.extname = function (path) {\n              if (typeof path !== \"string\") path = path + \"\";\n              var startDot = -1;\n              var startPart = 0;\n              var end = -1;\n              var matchedSlash = true;\n              var preDotState = 0;\n              for (var i = path.length - 1; i >= 0; --i) {\n                var code = path.charCodeAt(i);\n                if (code === 47) {\n                  if (!matchedSlash) {\n                    startPart = i + 1;\n                    break;\n                  }\n                  continue;\n                }\n                if (end === -1) {\n                  matchedSlash = false;\n                  end = i + 1;\n                }\n                if (code === 46) {\n                  if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n                } else if (startDot !== -1) {\n                  preDotState = -1;\n                }\n              }\n              if (startDot === -1 || end === -1 || preDotState === 0 || preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n                return \"\";\n              }\n              return path.slice(startDot, end);\n            };\n            function filter(xs, f) {\n              if (xs.filter) return xs.filter(f);\n              var res = [];\n              for (var i = 0; i < xs.length; i++) {\n                if (f(xs[i], i, xs)) res.push(xs[i]);\n              }\n              return res;\n            }\n            var substr = \"ab\".substr(-1) === \"b\" ? function (str, start, len) {\n              return str.substr(start, len);\n            } : function (str, start, len) {\n              if (start < 0) start = str.length + start;\n              return str.substr(start, len);\n            };\n          }).call(this, require(\"_process\"));\n        }, {\n          _process: 5\n        }],\n        5: [function (require, module, exports) {\n          var process = module.exports = {};\n          var cachedSetTimeout;\n          var cachedClearTimeout;\n          function defaultSetTimout() {\n            throw new Error(\"setTimeout has not been defined\");\n          }\n          function defaultClearTimeout() {\n            throw new Error(\"clearTimeout has not been defined\");\n          }\n          (function () {\n            try {\n              if (typeof setTimeout === \"function\") {\n                cachedSetTimeout = setTimeout;\n              } else {\n                cachedSetTimeout = defaultSetTimout;\n              }\n            } catch (e) {\n              cachedSetTimeout = defaultSetTimout;\n            }\n            try {\n              if (typeof clearTimeout === \"function\") {\n                cachedClearTimeout = clearTimeout;\n              } else {\n                cachedClearTimeout = defaultClearTimeout;\n              }\n            } catch (e) {\n              cachedClearTimeout = defaultClearTimeout;\n            }\n          })();\n          function runTimeout(fun) {\n            if (cachedSetTimeout === setTimeout) {\n              return setTimeout(fun, 0);\n            }\n            if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n              cachedSetTimeout = setTimeout;\n              return setTimeout(fun, 0);\n            }\n            try {\n              return cachedSetTimeout(fun, 0);\n            } catch (e) {\n              try {\n                return cachedSetTimeout.call(null, fun, 0);\n              } catch (e) {\n                return cachedSetTimeout.call(this, fun, 0);\n              }\n            }\n          }\n          function runClearTimeout(marker) {\n            if (cachedClearTimeout === clearTimeout) {\n              return clearTimeout(marker);\n            }\n            if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n              cachedClearTimeout = clearTimeout;\n              return clearTimeout(marker);\n            }\n            try {\n              return cachedClearTimeout(marker);\n            } catch (e) {\n              try {\n                return cachedClearTimeout.call(null, marker);\n              } catch (e) {\n                return cachedClearTimeout.call(this, marker);\n              }\n            }\n          }\n          var queue = [];\n          var draining = false;\n          var currentQueue;\n          var queueIndex = -1;\n          function cleanUpNextTick() {\n            if (!draining || !currentQueue) {\n              return;\n            }\n            draining = false;\n            if (currentQueue.length) {\n              queue = currentQueue.concat(queue);\n            } else {\n              queueIndex = -1;\n            }\n            if (queue.length) {\n              drainQueue();\n            }\n          }\n          function drainQueue() {\n            if (draining) {\n              return;\n            }\n            var timeout = runTimeout(cleanUpNextTick);\n            draining = true;\n            var len = queue.length;\n            while (len) {\n              currentQueue = queue;\n              queue = [];\n              while (++queueIndex < len) {\n                if (currentQueue) {\n                  currentQueue[queueIndex].run();\n                }\n              }\n              queueIndex = -1;\n              len = queue.length;\n            }\n            currentQueue = null;\n            draining = false;\n            runClearTimeout(timeout);\n          }\n          process.nextTick = function (fun) {\n            var args = new Array(arguments.length - 1);\n            if (arguments.length > 1) {\n              for (var i = 1; i < arguments.length; i++) {\n                args[i - 1] = arguments[i];\n              }\n            }\n            queue.push(new Item(fun, args));\n            if (queue.length === 1 && !draining) {\n              runTimeout(drainQueue);\n            }\n          };\n          function Item(fun, array) {\n            this.fun = fun;\n            this.array = array;\n          }\n          Item.prototype.run = function () {\n            this.fun.apply(null, this.array);\n          };\n          process.title = \"browser\";\n          process.browser = true;\n          process.env = {};\n          process.argv = [];\n          process.version = \"\";\n          process.versions = {};\n          function noop() {}\n          process.on = noop;\n          process.addListener = noop;\n          process.once = noop;\n          process.off = noop;\n          process.removeListener = noop;\n          process.removeAllListeners = noop;\n          process.emit = noop;\n          process.prependListener = noop;\n          process.prependOnceListener = noop;\n          process.listeners = function (name) {\n            return [];\n          };\n          process.binding = function (name) {\n            throw new Error(\"process.binding is not supported\");\n          };\n          process.cwd = function () {\n            return \"/\";\n          };\n          process.chdir = function (dir) {\n            throw new Error(\"process.chdir is not supported\");\n          };\n          process.umask = function () {\n            return 0;\n          };\n        }, {}],\n        6: [function (require, module, exports) {\n          module.exports = {\n            name: \"ejs\",\n            description: \"Embedded JavaScript templates\",\n            keywords: [\"template\", \"engine\", \"ejs\"],\n            version: \"3.1.9\",\n            author: \"Matthew Eernisse <mde@fleegix.org> (http://fleegix.org)\",\n            license: \"Apache-2.0\",\n            bin: {\n              ejs: \"./bin/cli.js\"\n            },\n            main: \"./lib/ejs.js\",\n            jsdelivr: \"ejs.min.js\",\n            unpkg: \"ejs.min.js\",\n            repository: {\n              type: \"git\",\n              url: \"git://github.com/mde/ejs.git\"\n            },\n            bugs: \"https://github.com/mde/ejs/issues\",\n            homepage: \"https://github.com/mde/ejs\",\n            dependencies: {\n              jake: \"^10.8.5\"\n            },\n            devDependencies: {\n              browserify: \"^16.5.1\",\n              eslint: \"^6.8.0\",\n              \"git-directory-deploy\": \"^1.5.1\",\n              jsdoc: \"^4.0.2\",\n              \"lru-cache\": \"^4.0.1\",\n              mocha: \"^10.2.0\",\n              \"uglify-js\": \"^3.3.16\"\n            },\n            engines: {\n              node: \">=0.10.0\"\n            },\n            scripts: {\n              test: \"npx jake test\"\n            }\n          };\n        }, {}]\n      }, {}, [1])(1);\n    });\n  })(ejs_min, ejs_min.exports);\n  ejs_min.exports;\n\n  /**\n   * Stores result from supportsCssVariables to avoid redundant processing to\n   * detect CSS custom variable support.\n   */\n  var supportsCssVariables_;\n  function supportsCssVariables(windowObj, forceRefresh) {\n    if (forceRefresh === void 0) {\n      forceRefresh = false;\n    }\n    var CSS = windowObj.CSS;\n    var supportsCssVars = supportsCssVariables_;\n    if (typeof supportsCssVariables_ === 'boolean' && !forceRefresh) {\n      return supportsCssVariables_;\n    }\n    var supportsFunctionPresent = CSS && typeof CSS.supports === 'function';\n    if (!supportsFunctionPresent) {\n      return false;\n    }\n    var explicitlySupportsCssVars = CSS.supports('--css-vars', 'yes');\n    // See: https://bugs.webkit.org/show_bug.cgi?id=154669\n    // See: README section on Safari\n    var weAreFeatureDetectingSafari10plus = CSS.supports('(--css-vars: yes)') && CSS.supports('color', '#00000000');\n    supportsCssVars = explicitlySupportsCssVars || weAreFeatureDetectingSafari10plus;\n    if (!forceRefresh) {\n      supportsCssVariables_ = supportsCssVars;\n    }\n    return supportsCssVars;\n  }\n  function getNormalizedEventCoords(evt, pageOffset, clientRect) {\n    if (!evt) {\n      return {\n        x: 0,\n        y: 0\n      };\n    }\n    var x = pageOffset.x,\n      y = pageOffset.y;\n    var documentX = x + clientRect.left;\n    var documentY = y + clientRect.top;\n    var normalizedX;\n    var normalizedY;\n    // Determine touch point relative to the ripple container.\n    if (evt.type === 'touchstart') {\n      var touchEvent = evt;\n      normalizedX = touchEvent.changedTouches[0].pageX - documentX;\n      normalizedY = touchEvent.changedTouches[0].pageY - documentY;\n    } else {\n      var mouseEvent = evt;\n      normalizedX = mouseEvent.pageX - documentX;\n      normalizedY = mouseEvent.pageY - documentY;\n    }\n    return {\n      x: normalizedX,\n      y: normalizedY\n    };\n  }\n\n  /**\n   * @license\n   * Copyright 2016 Google Inc.\n   *\n   * Permission is hereby granted, free of charge, to any person obtaining a copy\n   * of this software and associated documentation files (the \"Software\"), to deal\n   * in the Software without restriction, including without limitation the rights\n   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   * copies of the Software, and to permit persons to whom the Software is\n   * furnished to do so, subject to the following conditions:\n   *\n   * The above copyright notice and this permission notice shall be included in\n   * all copies or substantial portions of the Software.\n   *\n   * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n   * THE SOFTWARE.\n   */\n  var MDCFoundation = /** @class */function () {\n    function MDCFoundation(adapter) {\n      if (adapter === void 0) {\n        adapter = {};\n      }\n      this.adapter = adapter;\n    }\n    Object.defineProperty(MDCFoundation, \"cssClasses\", {\n      get: function () {\n        // Classes extending MDCFoundation should implement this method to return an object which exports every\n        // CSS class the foundation class needs as a property. e.g. {ACTIVE: 'mdc-component--active'}\n        return {};\n      },\n      enumerable: false,\n      configurable: true\n    });\n    Object.defineProperty(MDCFoundation, \"strings\", {\n      get: function () {\n        // Classes extending MDCFoundation should implement this method to return an object which exports all\n        // semantic strings as constants. e.g. {ARIA_ROLE: 'tablist'}\n        return {};\n      },\n      enumerable: false,\n      configurable: true\n    });\n    Object.defineProperty(MDCFoundation, \"numbers\", {\n      get: function () {\n        // Classes extending MDCFoundation should implement this method to return an object which exports all\n        // of its semantic numbers as constants. e.g. {ANIMATION_DELAY_MS: 350}\n        return {};\n      },\n      enumerable: false,\n      configurable: true\n    });\n    Object.defineProperty(MDCFoundation, \"defaultAdapter\", {\n      get: function () {\n        // Classes extending MDCFoundation may choose to implement this getter in order to provide a convenient\n        // way of viewing the necessary methods of an adapter. In the future, this could also be used for adapter\n        // validation.\n        return {};\n      },\n      enumerable: false,\n      configurable: true\n    });\n    MDCFoundation.prototype.init = function () {\n      // Subclasses should override this method to perform initialization routines (registering events, etc.)\n    };\n    MDCFoundation.prototype.destroy = function () {\n      // Subclasses should override this method to perform de-initialization routines (de-registering events, etc.)\n    };\n    return MDCFoundation;\n  }();\n\n  /**\n   * @license\n   * Copyright 2016 Google Inc.\n   *\n   * Permission is hereby granted, free of charge, to any person obtaining a copy\n   * of this software and associated documentation files (the \"Software\"), to deal\n   * in the Software without restriction, including without limitation the rights\n   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   * copies of the Software, and to permit persons to whom the Software is\n   * furnished to do so, subject to the following conditions:\n   *\n   * The above copyright notice and this permission notice shall be included in\n   * all copies or substantial portions of the Software.\n   *\n   * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n   * THE SOFTWARE.\n   */\n  var MDCComponent = /** @class */function () {\n    function MDCComponent(root, foundation) {\n      var args = [];\n      for (var _i = 2; _i < arguments.length; _i++) {\n        args[_i - 2] = arguments[_i];\n      }\n      this.root = root;\n      this.initialize.apply(this, __spreadArray([], __read(args)));\n      // Note that we initialize foundation here and not within the constructor's\n      // default param so that this.root is defined and can be used within the\n      // foundation class.\n      this.foundation = foundation === undefined ? this.getDefaultFoundation() : foundation;\n      this.foundation.init();\n      this.initialSyncWithDOM();\n    }\n    MDCComponent.attachTo = function (root) {\n      // Subclasses which extend MDCBase should provide an attachTo() method that takes a root element and\n      // returns an instantiated component with its root set to that element. Also note that in the cases of\n      // subclasses, an explicit foundation class will not have to be passed in; it will simply be initialized\n      // from getDefaultFoundation().\n      return new MDCComponent(root, new MDCFoundation({}));\n    };\n    /* istanbul ignore next: method param only exists for typing purposes; it does not need to be unit tested */\n    MDCComponent.prototype.initialize = function () {\n      // Subclasses can override this to do any additional setup work that would be considered part of a\n      // \"constructor\". Essentially, it is a hook into the parent constructor before the foundation is\n      // initialized. Any additional arguments besides root and foundation will be passed in here.\n    };\n\n    MDCComponent.prototype.getDefaultFoundation = function () {\n      // Subclasses must override this method to return a properly configured foundation class for the\n      // component.\n      throw new Error('Subclasses must override getDefaultFoundation to return a properly configured ' + 'foundation class');\n    };\n    MDCComponent.prototype.initialSyncWithDOM = function () {\n      // Subclasses should override this method if they need to perform work to synchronize with a host DOM\n      // object. An example of this would be a form control wrapper that needs to synchronize its internal state\n      // to some property or attribute of the host DOM. Please note: this is *not* the place to perform DOM\n      // reads/writes that would cause layout / paint, as this is called synchronously from within the constructor.\n    };\n    MDCComponent.prototype.destroy = function () {\n      // Subclasses may implement this method to release any resources / deregister any listeners they have\n      // attached. An example of this might be deregistering a resize event from the window object.\n      this.foundation.destroy();\n    };\n    MDCComponent.prototype.listen = function (evtType, handler, options) {\n      this.root.addEventListener(evtType, handler, options);\n    };\n    MDCComponent.prototype.unlisten = function (evtType, handler, options) {\n      this.root.removeEventListener(evtType, handler, options);\n    };\n    /**\n     * Fires a cross-browser-compatible custom event from the component root of the given type, with the given data.\n     */\n    MDCComponent.prototype.emit = function (evtType, evtData, shouldBubble) {\n      if (shouldBubble === void 0) {\n        shouldBubble = false;\n      }\n      var evt;\n      if (typeof CustomEvent === 'function') {\n        evt = new CustomEvent(evtType, {\n          bubbles: shouldBubble,\n          detail: evtData\n        });\n      } else {\n        evt = document.createEvent('CustomEvent');\n        evt.initCustomEvent(evtType, shouldBubble, false, evtData);\n      }\n      this.root.dispatchEvent(evt);\n    };\n    return MDCComponent;\n  }();\n\n  /**\n   * @license\n   * Copyright 2019 Google Inc.\n   *\n   * Permission is hereby granted, free of charge, to any person obtaining a copy\n   * of this software and associated documentation files (the \"Software\"), to deal\n   * in the Software without restriction, including without limitation the rights\n   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   * copies of the Software, and to permit persons to whom the Software is\n   * furnished to do so, subject to the following conditions:\n   *\n   * The above copyright notice and this permission notice shall be included in\n   * all copies or substantial portions of the Software.\n   *\n   * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n   * THE SOFTWARE.\n   */\n  /**\n   * Determine whether the current browser supports passive event listeners, and\n   * if so, use them.\n   */\n  function applyPassive(globalObj) {\n    if (globalObj === void 0) {\n      globalObj = window;\n    }\n    return supportsPassiveOption(globalObj) ? {\n      passive: true\n    } : false;\n  }\n  function supportsPassiveOption(globalObj) {\n    if (globalObj === void 0) {\n      globalObj = window;\n    }\n    // See\n    // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener\n    var passiveSupported = false;\n    try {\n      var options = {\n        // This function will be called when the browser\n        // attempts to access the passive property.\n        get passive() {\n          passiveSupported = true;\n          return false;\n        }\n      };\n      var handler = function () {};\n      globalObj.document.addEventListener('test', handler, options);\n      globalObj.document.removeEventListener('test', handler, options);\n    } catch (err) {\n      passiveSupported = false;\n    }\n    return passiveSupported;\n  }\n\n  /**\n   * @license\n   * Copyright 2018 Google Inc.\n   *\n   * Permission is hereby granted, free of charge, to any person obtaining a copy\n   * of this software and associated documentation files (the \"Software\"), to deal\n   * in the Software without restriction, including without limitation the rights\n   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   * copies of the Software, and to permit persons to whom the Software is\n   * furnished to do so, subject to the following conditions:\n   *\n   * The above copyright notice and this permission notice shall be included in\n   * all copies or substantial portions of the Software.\n   *\n   * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n   * THE SOFTWARE.\n   */\n  function matches(element, selector) {\n    var nativeMatches = element.matches || element.webkitMatchesSelector || element.msMatchesSelector;\n    return nativeMatches.call(element, selector);\n  }\n\n  /**\n   * @license\n   * Copyright 2016 Google Inc.\n   *\n   * Permission is hereby granted, free of charge, to any person obtaining a copy\n   * of this software and associated documentation files (the \"Software\"), to deal\n   * in the Software without restriction, including without limitation the rights\n   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   * copies of the Software, and to permit persons to whom the Software is\n   * furnished to do so, subject to the following conditions:\n   *\n   * The above copyright notice and this permission notice shall be included in\n   * all copies or substantial portions of the Software.\n   *\n   * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n   * THE SOFTWARE.\n   */\n  var cssClasses$1 = {\n    // Ripple is a special case where the \"root\" component is really a \"mixin\" of sorts,\n    // given that it's an 'upgrade' to an existing component. That being said it is the root\n    // CSS class that all other CSS classes derive from.\n    BG_FOCUSED: 'mdc-ripple-upgraded--background-focused',\n    FG_ACTIVATION: 'mdc-ripple-upgraded--foreground-activation',\n    FG_DEACTIVATION: 'mdc-ripple-upgraded--foreground-deactivation',\n    ROOT: 'mdc-ripple-upgraded',\n    UNBOUNDED: 'mdc-ripple-upgraded--unbounded'\n  };\n  var strings$1 = {\n    VAR_FG_SCALE: '--mdc-ripple-fg-scale',\n    VAR_FG_SIZE: '--mdc-ripple-fg-size',\n    VAR_FG_TRANSLATE_END: '--mdc-ripple-fg-translate-end',\n    VAR_FG_TRANSLATE_START: '--mdc-ripple-fg-translate-start',\n    VAR_LEFT: '--mdc-ripple-left',\n    VAR_TOP: '--mdc-ripple-top'\n  };\n  var numbers = {\n    DEACTIVATION_TIMEOUT_MS: 225,\n    FG_DEACTIVATION_MS: 150,\n    INITIAL_ORIGIN_SCALE: 0.6,\n    PADDING: 10,\n    TAP_DELAY_MS: 300 // Delay between touch and simulated mouse events on touch devices\n  };\n\n  /**\n   * @license\n   * Copyright 2016 Google Inc.\n   *\n   * Permission is hereby granted, free of charge, to any person obtaining a copy\n   * of this software and associated documentation files (the \"Software\"), to deal\n   * in the Software without restriction, including without limitation the rights\n   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   * copies of the Software, and to permit persons to whom the Software is\n   * furnished to do so, subject to the following conditions:\n   *\n   * The above copyright notice and this permission notice shall be included in\n   * all copies or substantial portions of the Software.\n   *\n   * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n   * THE SOFTWARE.\n   */\n  // Activation events registered on the root element of each instance for activation\n  var ACTIVATION_EVENT_TYPES = ['touchstart', 'pointerdown', 'mousedown', 'keydown'];\n  // Deactivation events registered on documentElement when a pointer-related down event occurs\n  var POINTER_DEACTIVATION_EVENT_TYPES = ['touchend', 'pointerup', 'mouseup', 'contextmenu'];\n  // simultaneous nested activations\n  var activatedTargets = [];\n  var MDCRippleFoundation = /** @class */function (_super) {\n    __extends(MDCRippleFoundation, _super);\n    function MDCRippleFoundation(adapter) {\n      var _this = _super.call(this, __assign(__assign({}, MDCRippleFoundation.defaultAdapter), adapter)) || this;\n      _this.activationAnimationHasEnded = false;\n      _this.activationTimer = 0;\n      _this.fgDeactivationRemovalTimer = 0;\n      _this.fgScale = '0';\n      _this.frame = {\n        width: 0,\n        height: 0\n      };\n      _this.initialSize = 0;\n      _this.layoutFrame = 0;\n      _this.maxRadius = 0;\n      _this.unboundedCoords = {\n        left: 0,\n        top: 0\n      };\n      _this.activationState = _this.defaultActivationState();\n      _this.activationTimerCallback = function () {\n        _this.activationAnimationHasEnded = true;\n        _this.runDeactivationUXLogicIfReady();\n      };\n      _this.activateHandler = function (e) {\n        _this.activateImpl(e);\n      };\n      _this.deactivateHandler = function () {\n        _this.deactivateImpl();\n      };\n      _this.focusHandler = function () {\n        _this.handleFocus();\n      };\n      _this.blurHandler = function () {\n        _this.handleBlur();\n      };\n      _this.resizeHandler = function () {\n        _this.layout();\n      };\n      return _this;\n    }\n    Object.defineProperty(MDCRippleFoundation, \"cssClasses\", {\n      get: function () {\n        return cssClasses$1;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    Object.defineProperty(MDCRippleFoundation, \"strings\", {\n      get: function () {\n        return strings$1;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    Object.defineProperty(MDCRippleFoundation, \"numbers\", {\n      get: function () {\n        return numbers;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    Object.defineProperty(MDCRippleFoundation, \"defaultAdapter\", {\n      get: function () {\n        return {\n          addClass: function () {\n            return undefined;\n          },\n          browserSupportsCssVars: function () {\n            return true;\n          },\n          computeBoundingRect: function () {\n            return {\n              top: 0,\n              right: 0,\n              bottom: 0,\n              left: 0,\n              width: 0,\n              height: 0\n            };\n          },\n          containsEventTarget: function () {\n            return true;\n          },\n          deregisterDocumentInteractionHandler: function () {\n            return undefined;\n          },\n          deregisterInteractionHandler: function () {\n            return undefined;\n          },\n          deregisterResizeHandler: function () {\n            return undefined;\n          },\n          getWindowPageOffset: function () {\n            return {\n              x: 0,\n              y: 0\n            };\n          },\n          isSurfaceActive: function () {\n            return true;\n          },\n          isSurfaceDisabled: function () {\n            return true;\n          },\n          isUnbounded: function () {\n            return true;\n          },\n          registerDocumentInteractionHandler: function () {\n            return undefined;\n          },\n          registerInteractionHandler: function () {\n            return undefined;\n          },\n          registerResizeHandler: function () {\n            return undefined;\n          },\n          removeClass: function () {\n            return undefined;\n          },\n          updateCssVariable: function () {\n            return undefined;\n          }\n        };\n      },\n      enumerable: false,\n      configurable: true\n    });\n    MDCRippleFoundation.prototype.init = function () {\n      var _this = this;\n      var supportsPressRipple = this.supportsPressRipple();\n      this.registerRootHandlers(supportsPressRipple);\n      if (supportsPressRipple) {\n        var _a = MDCRippleFoundation.cssClasses,\n          ROOT_1 = _a.ROOT,\n          UNBOUNDED_1 = _a.UNBOUNDED;\n        requestAnimationFrame(function () {\n          _this.adapter.addClass(ROOT_1);\n          if (_this.adapter.isUnbounded()) {\n            _this.adapter.addClass(UNBOUNDED_1);\n            // Unbounded ripples need layout logic applied immediately to set coordinates for both shade and ripple\n            _this.layoutInternal();\n          }\n        });\n      }\n    };\n    MDCRippleFoundation.prototype.destroy = function () {\n      var _this = this;\n      if (this.supportsPressRipple()) {\n        if (this.activationTimer) {\n          clearTimeout(this.activationTimer);\n          this.activationTimer = 0;\n          this.adapter.removeClass(MDCRippleFoundation.cssClasses.FG_ACTIVATION);\n        }\n        if (this.fgDeactivationRemovalTimer) {\n          clearTimeout(this.fgDeactivationRemovalTimer);\n          this.fgDeactivationRemovalTimer = 0;\n          this.adapter.removeClass(MDCRippleFoundation.cssClasses.FG_DEACTIVATION);\n        }\n        var _a = MDCRippleFoundation.cssClasses,\n          ROOT_2 = _a.ROOT,\n          UNBOUNDED_2 = _a.UNBOUNDED;\n        requestAnimationFrame(function () {\n          _this.adapter.removeClass(ROOT_2);\n          _this.adapter.removeClass(UNBOUNDED_2);\n          _this.removeCssVars();\n        });\n      }\n      this.deregisterRootHandlers();\n      this.deregisterDeactivationHandlers();\n    };\n    /**\n     * @param evt Optional event containing position information.\n     */\n    MDCRippleFoundation.prototype.activate = function (evt) {\n      this.activateImpl(evt);\n    };\n    MDCRippleFoundation.prototype.deactivate = function () {\n      this.deactivateImpl();\n    };\n    MDCRippleFoundation.prototype.layout = function () {\n      var _this = this;\n      if (this.layoutFrame) {\n        cancelAnimationFrame(this.layoutFrame);\n      }\n      this.layoutFrame = requestAnimationFrame(function () {\n        _this.layoutInternal();\n        _this.layoutFrame = 0;\n      });\n    };\n    MDCRippleFoundation.prototype.setUnbounded = function (unbounded) {\n      var UNBOUNDED = MDCRippleFoundation.cssClasses.UNBOUNDED;\n      if (unbounded) {\n        this.adapter.addClass(UNBOUNDED);\n      } else {\n        this.adapter.removeClass(UNBOUNDED);\n      }\n    };\n    MDCRippleFoundation.prototype.handleFocus = function () {\n      var _this = this;\n      requestAnimationFrame(function () {\n        return _this.adapter.addClass(MDCRippleFoundation.cssClasses.BG_FOCUSED);\n      });\n    };\n    MDCRippleFoundation.prototype.handleBlur = function () {\n      var _this = this;\n      requestAnimationFrame(function () {\n        return _this.adapter.removeClass(MDCRippleFoundation.cssClasses.BG_FOCUSED);\n      });\n    };\n    /**\n     * We compute this property so that we are not querying information about the client\n     * until the point in time where the foundation requests it. This prevents scenarios where\n     * client-side feature-detection may happen too early, such as when components are rendered on the server\n     * and then initialized at mount time on the client.\n     */\n    MDCRippleFoundation.prototype.supportsPressRipple = function () {\n      return this.adapter.browserSupportsCssVars();\n    };\n    MDCRippleFoundation.prototype.defaultActivationState = function () {\n      return {\n        activationEvent: undefined,\n        hasDeactivationUXRun: false,\n        isActivated: false,\n        isProgrammatic: false,\n        wasActivatedByPointer: false,\n        wasElementMadeActive: false\n      };\n    };\n    /**\n     * supportsPressRipple Passed from init to save a redundant function call\n     */\n    MDCRippleFoundation.prototype.registerRootHandlers = function (supportsPressRipple) {\n      var e_1, _a;\n      if (supportsPressRipple) {\n        try {\n          for (var ACTIVATION_EVENT_TYPES_1 = __values(ACTIVATION_EVENT_TYPES), ACTIVATION_EVENT_TYPES_1_1 = ACTIVATION_EVENT_TYPES_1.next(); !ACTIVATION_EVENT_TYPES_1_1.done; ACTIVATION_EVENT_TYPES_1_1 = ACTIVATION_EVENT_TYPES_1.next()) {\n            var evtType = ACTIVATION_EVENT_TYPES_1_1.value;\n            this.adapter.registerInteractionHandler(evtType, this.activateHandler);\n          }\n        } catch (e_1_1) {\n          e_1 = {\n            error: e_1_1\n          };\n        } finally {\n          try {\n            if (ACTIVATION_EVENT_TYPES_1_1 && !ACTIVATION_EVENT_TYPES_1_1.done && (_a = ACTIVATION_EVENT_TYPES_1.return)) _a.call(ACTIVATION_EVENT_TYPES_1);\n          } finally {\n            if (e_1) throw e_1.error;\n          }\n        }\n        if (this.adapter.isUnbounded()) {\n          this.adapter.registerResizeHandler(this.resizeHandler);\n        }\n      }\n      this.adapter.registerInteractionHandler('focus', this.focusHandler);\n      this.adapter.registerInteractionHandler('blur', this.blurHandler);\n    };\n    MDCRippleFoundation.prototype.registerDeactivationHandlers = function (evt) {\n      var e_2, _a;\n      if (evt.type === 'keydown') {\n        this.adapter.registerInteractionHandler('keyup', this.deactivateHandler);\n      } else {\n        try {\n          for (var POINTER_DEACTIVATION_EVENT_TYPES_1 = __values(POINTER_DEACTIVATION_EVENT_TYPES), POINTER_DEACTIVATION_EVENT_TYPES_1_1 = POINTER_DEACTIVATION_EVENT_TYPES_1.next(); !POINTER_DEACTIVATION_EVENT_TYPES_1_1.done; POINTER_DEACTIVATION_EVENT_TYPES_1_1 = POINTER_DEACTIVATION_EVENT_TYPES_1.next()) {\n            var evtType = POINTER_DEACTIVATION_EVENT_TYPES_1_1.value;\n            this.adapter.registerDocumentInteractionHandler(evtType, this.deactivateHandler);\n          }\n        } catch (e_2_1) {\n          e_2 = {\n            error: e_2_1\n          };\n        } finally {\n          try {\n            if (POINTER_DEACTIVATION_EVENT_TYPES_1_1 && !POINTER_DEACTIVATION_EVENT_TYPES_1_1.done && (_a = POINTER_DEACTIVATION_EVENT_TYPES_1.return)) _a.call(POINTER_DEACTIVATION_EVENT_TYPES_1);\n          } finally {\n            if (e_2) throw e_2.error;\n          }\n        }\n      }\n    };\n    MDCRippleFoundation.prototype.deregisterRootHandlers = function () {\n      var e_3, _a;\n      try {\n        for (var ACTIVATION_EVENT_TYPES_2 = __values(ACTIVATION_EVENT_TYPES), ACTIVATION_EVENT_TYPES_2_1 = ACTIVATION_EVENT_TYPES_2.next(); !ACTIVATION_EVENT_TYPES_2_1.done; ACTIVATION_EVENT_TYPES_2_1 = ACTIVATION_EVENT_TYPES_2.next()) {\n          var evtType = ACTIVATION_EVENT_TYPES_2_1.value;\n          this.adapter.deregisterInteractionHandler(evtType, this.activateHandler);\n        }\n      } catch (e_3_1) {\n        e_3 = {\n          error: e_3_1\n        };\n      } finally {\n        try {\n          if (ACTIVATION_EVENT_TYPES_2_1 && !ACTIVATION_EVENT_TYPES_2_1.done && (_a = ACTIVATION_EVENT_TYPES_2.return)) _a.call(ACTIVATION_EVENT_TYPES_2);\n        } finally {\n          if (e_3) throw e_3.error;\n        }\n      }\n      this.adapter.deregisterInteractionHandler('focus', this.focusHandler);\n      this.adapter.deregisterInteractionHandler('blur', this.blurHandler);\n      if (this.adapter.isUnbounded()) {\n        this.adapter.deregisterResizeHandler(this.resizeHandler);\n      }\n    };\n    MDCRippleFoundation.prototype.deregisterDeactivationHandlers = function () {\n      var e_4, _a;\n      this.adapter.deregisterInteractionHandler('keyup', this.deactivateHandler);\n      try {\n        for (var POINTER_DEACTIVATION_EVENT_TYPES_2 = __values(POINTER_DEACTIVATION_EVENT_TYPES), POINTER_DEACTIVATION_EVENT_TYPES_2_1 = POINTER_DEACTIVATION_EVENT_TYPES_2.next(); !POINTER_DEACTIVATION_EVENT_TYPES_2_1.done; POINTER_DEACTIVATION_EVENT_TYPES_2_1 = POINTER_DEACTIVATION_EVENT_TYPES_2.next()) {\n          var evtType = POINTER_DEACTIVATION_EVENT_TYPES_2_1.value;\n          this.adapter.deregisterDocumentInteractionHandler(evtType, this.deactivateHandler);\n        }\n      } catch (e_4_1) {\n        e_4 = {\n          error: e_4_1\n        };\n      } finally {\n        try {\n          if (POINTER_DEACTIVATION_EVENT_TYPES_2_1 && !POINTER_DEACTIVATION_EVENT_TYPES_2_1.done && (_a = POINTER_DEACTIVATION_EVENT_TYPES_2.return)) _a.call(POINTER_DEACTIVATION_EVENT_TYPES_2);\n        } finally {\n          if (e_4) throw e_4.error;\n        }\n      }\n    };\n    MDCRippleFoundation.prototype.removeCssVars = function () {\n      var _this = this;\n      var rippleStrings = MDCRippleFoundation.strings;\n      var keys = Object.keys(rippleStrings);\n      keys.forEach(function (key) {\n        if (key.indexOf('VAR_') === 0) {\n          _this.adapter.updateCssVariable(rippleStrings[key], null);\n        }\n      });\n    };\n    MDCRippleFoundation.prototype.activateImpl = function (evt) {\n      var _this = this;\n      if (this.adapter.isSurfaceDisabled()) {\n        return;\n      }\n      var activationState = this.activationState;\n      if (activationState.isActivated) {\n        return;\n      }\n      // Avoid reacting to follow-on events fired by touch device after an already-processed user interaction\n      var previousActivationEvent = this.previousActivationEvent;\n      var isSameInteraction = previousActivationEvent && evt !== undefined && previousActivationEvent.type !== evt.type;\n      if (isSameInteraction) {\n        return;\n      }\n      activationState.isActivated = true;\n      activationState.isProgrammatic = evt === undefined;\n      activationState.activationEvent = evt;\n      activationState.wasActivatedByPointer = activationState.isProgrammatic ? false : evt !== undefined && (evt.type === 'mousedown' || evt.type === 'touchstart' || evt.type === 'pointerdown');\n      var hasActivatedChild = evt !== undefined && activatedTargets.length > 0 && activatedTargets.some(function (target) {\n        return _this.adapter.containsEventTarget(target);\n      });\n      if (hasActivatedChild) {\n        // Immediately reset activation state, while preserving logic that prevents touch follow-on events\n        this.resetActivationState();\n        return;\n      }\n      if (evt !== undefined) {\n        activatedTargets.push(evt.target);\n        this.registerDeactivationHandlers(evt);\n      }\n      activationState.wasElementMadeActive = this.checkElementMadeActive(evt);\n      if (activationState.wasElementMadeActive) {\n        this.animateActivation();\n      }\n      requestAnimationFrame(function () {\n        // Reset array on next frame after the current event has had a chance to bubble to prevent ancestor ripples\n        activatedTargets = [];\n        if (!activationState.wasElementMadeActive && evt !== undefined && (evt.key === ' ' || evt.keyCode === 32)) {\n          // If space was pressed, try again within an rAF call to detect :active, because different UAs report\n          // active states inconsistently when they're called within event handling code:\n          // - https://bugs.chromium.org/p/chromium/issues/detail?id=635971\n          // - https://bugzilla.mozilla.org/show_bug.cgi?id=1293741\n          // We try first outside rAF to support Edge, which does not exhibit this problem, but will crash if a CSS\n          // variable is set within a rAF callback for a submit button interaction (#2241).\n          activationState.wasElementMadeActive = _this.checkElementMadeActive(evt);\n          if (activationState.wasElementMadeActive) {\n            _this.animateActivation();\n          }\n        }\n        if (!activationState.wasElementMadeActive) {\n          // Reset activation state immediately if element was not made active.\n          _this.activationState = _this.defaultActivationState();\n        }\n      });\n    };\n    MDCRippleFoundation.prototype.checkElementMadeActive = function (evt) {\n      return evt !== undefined && evt.type === 'keydown' ? this.adapter.isSurfaceActive() : true;\n    };\n    MDCRippleFoundation.prototype.animateActivation = function () {\n      var _this = this;\n      var _a = MDCRippleFoundation.strings,\n        VAR_FG_TRANSLATE_START = _a.VAR_FG_TRANSLATE_START,\n        VAR_FG_TRANSLATE_END = _a.VAR_FG_TRANSLATE_END;\n      var _b = MDCRippleFoundation.cssClasses,\n        FG_DEACTIVATION = _b.FG_DEACTIVATION,\n        FG_ACTIVATION = _b.FG_ACTIVATION;\n      var DEACTIVATION_TIMEOUT_MS = MDCRippleFoundation.numbers.DEACTIVATION_TIMEOUT_MS;\n      this.layoutInternal();\n      var translateStart = '';\n      var translateEnd = '';\n      if (!this.adapter.isUnbounded()) {\n        var _c = this.getFgTranslationCoordinates(),\n          startPoint = _c.startPoint,\n          endPoint = _c.endPoint;\n        translateStart = startPoint.x + \"px, \" + startPoint.y + \"px\";\n        translateEnd = endPoint.x + \"px, \" + endPoint.y + \"px\";\n      }\n      this.adapter.updateCssVariable(VAR_FG_TRANSLATE_START, translateStart);\n      this.adapter.updateCssVariable(VAR_FG_TRANSLATE_END, translateEnd);\n      // Cancel any ongoing activation/deactivation animations\n      clearTimeout(this.activationTimer);\n      clearTimeout(this.fgDeactivationRemovalTimer);\n      this.rmBoundedActivationClasses();\n      this.adapter.removeClass(FG_DEACTIVATION);\n      // Force layout in order to re-trigger the animation.\n      this.adapter.computeBoundingRect();\n      this.adapter.addClass(FG_ACTIVATION);\n      this.activationTimer = setTimeout(function () {\n        _this.activationTimerCallback();\n      }, DEACTIVATION_TIMEOUT_MS);\n    };\n    MDCRippleFoundation.prototype.getFgTranslationCoordinates = function () {\n      var _a = this.activationState,\n        activationEvent = _a.activationEvent,\n        wasActivatedByPointer = _a.wasActivatedByPointer;\n      var startPoint;\n      if (wasActivatedByPointer) {\n        startPoint = getNormalizedEventCoords(activationEvent, this.adapter.getWindowPageOffset(), this.adapter.computeBoundingRect());\n      } else {\n        startPoint = {\n          x: this.frame.width / 2,\n          y: this.frame.height / 2\n        };\n      }\n      // Center the element around the start point.\n      startPoint = {\n        x: startPoint.x - this.initialSize / 2,\n        y: startPoint.y - this.initialSize / 2\n      };\n      var endPoint = {\n        x: this.frame.width / 2 - this.initialSize / 2,\n        y: this.frame.height / 2 - this.initialSize / 2\n      };\n      return {\n        startPoint: startPoint,\n        endPoint: endPoint\n      };\n    };\n    MDCRippleFoundation.prototype.runDeactivationUXLogicIfReady = function () {\n      var _this = this;\n      // This method is called both when a pointing device is released, and when the activation animation ends.\n      // The deactivation animation should only run after both of those occur.\n      var FG_DEACTIVATION = MDCRippleFoundation.cssClasses.FG_DEACTIVATION;\n      var _a = this.activationState,\n        hasDeactivationUXRun = _a.hasDeactivationUXRun,\n        isActivated = _a.isActivated;\n      var activationHasEnded = hasDeactivationUXRun || !isActivated;\n      if (activationHasEnded && this.activationAnimationHasEnded) {\n        this.rmBoundedActivationClasses();\n        this.adapter.addClass(FG_DEACTIVATION);\n        this.fgDeactivationRemovalTimer = setTimeout(function () {\n          _this.adapter.removeClass(FG_DEACTIVATION);\n        }, numbers.FG_DEACTIVATION_MS);\n      }\n    };\n    MDCRippleFoundation.prototype.rmBoundedActivationClasses = function () {\n      var FG_ACTIVATION = MDCRippleFoundation.cssClasses.FG_ACTIVATION;\n      this.adapter.removeClass(FG_ACTIVATION);\n      this.activationAnimationHasEnded = false;\n      this.adapter.computeBoundingRect();\n    };\n    MDCRippleFoundation.prototype.resetActivationState = function () {\n      var _this = this;\n      this.previousActivationEvent = this.activationState.activationEvent;\n      this.activationState = this.defaultActivationState();\n      // Touch devices may fire additional events for the same interaction within a short time.\n      // Store the previous event until it's safe to assume that subsequent events are for new interactions.\n      setTimeout(function () {\n        return _this.previousActivationEvent = undefined;\n      }, MDCRippleFoundation.numbers.TAP_DELAY_MS);\n    };\n    MDCRippleFoundation.prototype.deactivateImpl = function () {\n      var _this = this;\n      var activationState = this.activationState;\n      // This can happen in scenarios such as when you have a keyup event that blurs the element.\n      if (!activationState.isActivated) {\n        return;\n      }\n      var state = __assign({}, activationState);\n      if (activationState.isProgrammatic) {\n        requestAnimationFrame(function () {\n          _this.animateDeactivation(state);\n        });\n        this.resetActivationState();\n      } else {\n        this.deregisterDeactivationHandlers();\n        requestAnimationFrame(function () {\n          _this.activationState.hasDeactivationUXRun = true;\n          _this.animateDeactivation(state);\n          _this.resetActivationState();\n        });\n      }\n    };\n    MDCRippleFoundation.prototype.animateDeactivation = function (_a) {\n      var wasActivatedByPointer = _a.wasActivatedByPointer,\n        wasElementMadeActive = _a.wasElementMadeActive;\n      if (wasActivatedByPointer || wasElementMadeActive) {\n        this.runDeactivationUXLogicIfReady();\n      }\n    };\n    MDCRippleFoundation.prototype.layoutInternal = function () {\n      var _this = this;\n      this.frame = this.adapter.computeBoundingRect();\n      var maxDim = Math.max(this.frame.height, this.frame.width);\n      // Surface diameter is treated differently for unbounded vs. bounded ripples.\n      // Unbounded ripple diameter is calculated smaller since the surface is expected to already be padded appropriately\n      // to extend the hitbox, and the ripple is expected to meet the edges of the padded hitbox (which is typically\n      // square). Bounded ripples, on the other hand, are fully expected to expand beyond the surface's longest diameter\n      // (calculated based on the diagonal plus a constant padding), and are clipped at the surface's border via\n      // `overflow: hidden`.\n      var getBoundedRadius = function () {\n        var hypotenuse = Math.sqrt(Math.pow(_this.frame.width, 2) + Math.pow(_this.frame.height, 2));\n        return hypotenuse + MDCRippleFoundation.numbers.PADDING;\n      };\n      this.maxRadius = this.adapter.isUnbounded() ? maxDim : getBoundedRadius();\n      // Ripple is sized as a fraction of the largest dimension of the surface, then scales up using a CSS scale transform\n      var initialSize = Math.floor(maxDim * MDCRippleFoundation.numbers.INITIAL_ORIGIN_SCALE);\n      // Unbounded ripple size should always be even number to equally center align.\n      if (this.adapter.isUnbounded() && initialSize % 2 !== 0) {\n        this.initialSize = initialSize - 1;\n      } else {\n        this.initialSize = initialSize;\n      }\n      this.fgScale = \"\" + this.maxRadius / this.initialSize;\n      this.updateLayoutCssVars();\n    };\n    MDCRippleFoundation.prototype.updateLayoutCssVars = function () {\n      var _a = MDCRippleFoundation.strings,\n        VAR_FG_SIZE = _a.VAR_FG_SIZE,\n        VAR_LEFT = _a.VAR_LEFT,\n        VAR_TOP = _a.VAR_TOP,\n        VAR_FG_SCALE = _a.VAR_FG_SCALE;\n      this.adapter.updateCssVariable(VAR_FG_SIZE, this.initialSize + \"px\");\n      this.adapter.updateCssVariable(VAR_FG_SCALE, this.fgScale);\n      if (this.adapter.isUnbounded()) {\n        this.unboundedCoords = {\n          left: Math.round(this.frame.width / 2 - this.initialSize / 2),\n          top: Math.round(this.frame.height / 2 - this.initialSize / 2)\n        };\n        this.adapter.updateCssVariable(VAR_LEFT, this.unboundedCoords.left + \"px\");\n        this.adapter.updateCssVariable(VAR_TOP, this.unboundedCoords.top + \"px\");\n      }\n    };\n    return MDCRippleFoundation;\n  }(MDCFoundation);\n\n  /**\n   * @license\n   * Copyright 2016 Google Inc.\n   *\n   * Permission is hereby granted, free of charge, to any person obtaining a copy\n   * of this software and associated documentation files (the \"Software\"), to deal\n   * in the Software without restriction, including without limitation the rights\n   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   * copies of the Software, and to permit persons to whom the Software is\n   * furnished to do so, subject to the following conditions:\n   *\n   * The above copyright notice and this permission notice shall be included in\n   * all copies or substantial portions of the Software.\n   *\n   * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n   * THE SOFTWARE.\n   */\n  var MDCRipple = /** @class */function (_super) {\n    __extends(MDCRipple, _super);\n    function MDCRipple() {\n      var _this = _super !== null && _super.apply(this, arguments) || this;\n      _this.disabled = false;\n      return _this;\n    }\n    MDCRipple.attachTo = function (root, opts) {\n      if (opts === void 0) {\n        opts = {\n          isUnbounded: undefined\n        };\n      }\n      var ripple = new MDCRipple(root);\n      // Only override unbounded behavior if option is explicitly specified\n      if (opts.isUnbounded !== undefined) {\n        ripple.unbounded = opts.isUnbounded;\n      }\n      return ripple;\n    };\n    MDCRipple.createAdapter = function (instance) {\n      return {\n        addClass: function (className) {\n          return instance.root.classList.add(className);\n        },\n        browserSupportsCssVars: function () {\n          return supportsCssVariables(window);\n        },\n        computeBoundingRect: function () {\n          return instance.root.getBoundingClientRect();\n        },\n        containsEventTarget: function (target) {\n          return instance.root.contains(target);\n        },\n        deregisterDocumentInteractionHandler: function (evtType, handler) {\n          return document.documentElement.removeEventListener(evtType, handler, applyPassive());\n        },\n        deregisterInteractionHandler: function (evtType, handler) {\n          return instance.root.removeEventListener(evtType, handler, applyPassive());\n        },\n        deregisterResizeHandler: function (handler) {\n          return window.removeEventListener('resize', handler);\n        },\n        getWindowPageOffset: function () {\n          return {\n            x: window.pageXOffset,\n            y: window.pageYOffset\n          };\n        },\n        isSurfaceActive: function () {\n          return matches(instance.root, ':active');\n        },\n        isSurfaceDisabled: function () {\n          return Boolean(instance.disabled);\n        },\n        isUnbounded: function () {\n          return Boolean(instance.unbounded);\n        },\n        registerDocumentInteractionHandler: function (evtType, handler) {\n          return document.documentElement.addEventListener(evtType, handler, applyPassive());\n        },\n        registerInteractionHandler: function (evtType, handler) {\n          return instance.root.addEventListener(evtType, handler, applyPassive());\n        },\n        registerResizeHandler: function (handler) {\n          return window.addEventListener('resize', handler);\n        },\n        removeClass: function (className) {\n          return instance.root.classList.remove(className);\n        },\n        updateCssVariable: function (varName, value) {\n          return instance.root.style.setProperty(varName, value);\n        }\n      };\n    };\n    Object.defineProperty(MDCRipple.prototype, \"unbounded\", {\n      get: function () {\n        return Boolean(this.isUnbounded);\n      },\n      set: function (unbounded) {\n        this.isUnbounded = Boolean(unbounded);\n        this.setUnbounded();\n      },\n      enumerable: false,\n      configurable: true\n    });\n    MDCRipple.prototype.activate = function () {\n      this.foundation.activate();\n    };\n    MDCRipple.prototype.deactivate = function () {\n      this.foundation.deactivate();\n    };\n    MDCRipple.prototype.layout = function () {\n      this.foundation.layout();\n    };\n    MDCRipple.prototype.getDefaultFoundation = function () {\n      return new MDCRippleFoundation(MDCRipple.createAdapter(this));\n    };\n    MDCRipple.prototype.initialSyncWithDOM = function () {\n      var root = this.root;\n      this.isUnbounded = 'mdcRippleIsUnbounded' in root.dataset;\n    };\n    /**\n     * Closure Compiler throws an access control error when directly accessing a\n     * protected or private property inside a getter/setter, like unbounded above.\n     * By accessing the protected property inside a method, we solve that problem.\n     * That's why this function exists.\n     */\n    MDCRipple.prototype.setUnbounded = function () {\n      this.foundation.setUnbounded(Boolean(this.isUnbounded));\n    };\n    return MDCRipple;\n  }(MDCComponent);\n\n  /**\n   * @license\n   * Copyright 2016 Google Inc.\n   *\n   * Permission is hereby granted, free of charge, to any person obtaining a copy\n   * of this software and associated documentation files (the \"Software\"), to deal\n   * in the Software without restriction, including without limitation the rights\n   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   * copies of the Software, and to permit persons to whom the Software is\n   * furnished to do so, subject to the following conditions:\n   *\n   * The above copyright notice and this permission notice shall be included in\n   * all copies or substantial portions of the Software.\n   *\n   * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n   * THE SOFTWARE.\n   */\n  var cssPropertyNameMap = {\n    animation: {\n      prefixed: '-webkit-animation',\n      standard: 'animation'\n    },\n    transform: {\n      prefixed: '-webkit-transform',\n      standard: 'transform'\n    },\n    transition: {\n      prefixed: '-webkit-transition',\n      standard: 'transition'\n    }\n  };\n  function isWindow(windowObj) {\n    return Boolean(windowObj.document) && typeof windowObj.document.createElement === 'function';\n  }\n  function getCorrectPropertyName(windowObj, cssProperty) {\n    if (isWindow(windowObj) && cssProperty in cssPropertyNameMap) {\n      var el = windowObj.document.createElement('div');\n      var _a = cssPropertyNameMap[cssProperty],\n        standard = _a.standard,\n        prefixed = _a.prefixed;\n      var isStandard = (standard in el.style);\n      return isStandard ? standard : prefixed;\n    }\n    return cssProperty;\n  }\n\n  /**\n   * @license\n   * Copyright 2017 Google Inc.\n   *\n   * Permission is hereby granted, free of charge, to any person obtaining a copy\n   * of this software and associated documentation files (the \"Software\"), to deal\n   * in the Software without restriction, including without limitation the rights\n   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   * copies of the Software, and to permit persons to whom the Software is\n   * furnished to do so, subject to the following conditions:\n   *\n   * The above copyright notice and this permission notice shall be included in\n   * all copies or substantial portions of the Software.\n   *\n   * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n   * THE SOFTWARE.\n   */\n  var cssClasses = {\n    CLOSED_CLASS: 'mdc-linear-progress--closed',\n    CLOSED_ANIMATION_OFF_CLASS: 'mdc-linear-progress--closed-animation-off',\n    INDETERMINATE_CLASS: 'mdc-linear-progress--indeterminate',\n    REVERSED_CLASS: 'mdc-linear-progress--reversed',\n    ANIMATION_READY_CLASS: 'mdc-linear-progress--animation-ready'\n  };\n  var strings = {\n    ARIA_HIDDEN: 'aria-hidden',\n    ARIA_VALUEMAX: 'aria-valuemax',\n    ARIA_VALUEMIN: 'aria-valuemin',\n    ARIA_VALUENOW: 'aria-valuenow',\n    BUFFER_BAR_SELECTOR: '.mdc-linear-progress__buffer-bar',\n    FLEX_BASIS: 'flex-basis',\n    PRIMARY_BAR_SELECTOR: '.mdc-linear-progress__primary-bar'\n  };\n  // these are percentages pulled from keyframes.scss\n  var animationDimensionPercentages = {\n    PRIMARY_HALF: .8367142,\n    PRIMARY_FULL: 2.00611057,\n    SECONDARY_QUARTER: .37651913,\n    SECONDARY_HALF: .84386165,\n    SECONDARY_FULL: 1.60277782\n  };\n\n  /**\n   * @license\n   * Copyright 2017 Google Inc.\n   *\n   * Permission is hereby granted, free of charge, to any person obtaining a copy\n   * of this software and associated documentation files (the \"Software\"), to deal\n   * in the Software without restriction, including without limitation the rights\n   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   * copies of the Software, and to permit persons to whom the Software is\n   * furnished to do so, subject to the following conditions:\n   *\n   * The above copyright notice and this permission notice shall be included in\n   * all copies or substantial portions of the Software.\n   *\n   * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n   * THE SOFTWARE.\n   */\n  var MDCLinearProgressFoundation = /** @class */function (_super) {\n    __extends(MDCLinearProgressFoundation, _super);\n    function MDCLinearProgressFoundation(adapter) {\n      var _this = _super.call(this, __assign(__assign({}, MDCLinearProgressFoundation.defaultAdapter), adapter)) || this;\n      _this.observer = null;\n      return _this;\n    }\n    Object.defineProperty(MDCLinearProgressFoundation, \"cssClasses\", {\n      get: function () {\n        return cssClasses;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    Object.defineProperty(MDCLinearProgressFoundation, \"strings\", {\n      get: function () {\n        return strings;\n      },\n      enumerable: false,\n      configurable: true\n    });\n    Object.defineProperty(MDCLinearProgressFoundation, \"defaultAdapter\", {\n      get: function () {\n        return {\n          addClass: function () {\n            return undefined;\n          },\n          attachResizeObserver: function () {\n            return null;\n          },\n          forceLayout: function () {\n            return undefined;\n          },\n          getWidth: function () {\n            return 0;\n          },\n          hasClass: function () {\n            return false;\n          },\n          setBufferBarStyle: function () {\n            return null;\n          },\n          setPrimaryBarStyle: function () {\n            return null;\n          },\n          setStyle: function () {\n            return undefined;\n          },\n          removeAttribute: function () {\n            return undefined;\n          },\n          removeClass: function () {\n            return undefined;\n          },\n          setAttribute: function () {\n            return undefined;\n          }\n        };\n      },\n      enumerable: false,\n      configurable: true\n    });\n    MDCLinearProgressFoundation.prototype.init = function () {\n      var _this = this;\n      this.determinate = !this.adapter.hasClass(cssClasses.INDETERMINATE_CLASS);\n      this.adapter.addClass(cssClasses.ANIMATION_READY_CLASS);\n      this.progress = 0;\n      this.buffer = 1;\n      this.observer = this.adapter.attachResizeObserver(function (entries) {\n        var e_1, _a;\n        if (_this.determinate) {\n          return;\n        }\n        try {\n          for (var entries_1 = __values(entries), entries_1_1 = entries_1.next(); !entries_1_1.done; entries_1_1 = entries_1.next()) {\n            var entry = entries_1_1.value;\n            if (entry.contentRect) {\n              _this.calculateAndSetDimensions(entry.contentRect.width);\n            }\n          }\n        } catch (e_1_1) {\n          e_1 = {\n            error: e_1_1\n          };\n        } finally {\n          try {\n            if (entries_1_1 && !entries_1_1.done && (_a = entries_1.return)) _a.call(entries_1);\n          } finally {\n            if (e_1) throw e_1.error;\n          }\n        }\n      });\n      if (!this.determinate && this.observer) {\n        this.calculateAndSetDimensions(this.adapter.getWidth());\n      }\n    };\n    MDCLinearProgressFoundation.prototype.setDeterminate = function (isDeterminate) {\n      this.determinate = isDeterminate;\n      if (this.determinate) {\n        this.adapter.removeClass(cssClasses.INDETERMINATE_CLASS);\n        this.adapter.setAttribute(strings.ARIA_VALUENOW, this.progress.toString());\n        this.adapter.setAttribute(strings.ARIA_VALUEMAX, '1');\n        this.adapter.setAttribute(strings.ARIA_VALUEMIN, '0');\n        this.setPrimaryBarProgress(this.progress);\n        this.setBufferBarProgress(this.buffer);\n        return;\n      }\n      if (this.observer) {\n        this.calculateAndSetDimensions(this.adapter.getWidth());\n      }\n      this.adapter.addClass(cssClasses.INDETERMINATE_CLASS);\n      this.adapter.removeAttribute(strings.ARIA_VALUENOW);\n      this.adapter.removeAttribute(strings.ARIA_VALUEMAX);\n      this.adapter.removeAttribute(strings.ARIA_VALUEMIN);\n      this.setPrimaryBarProgress(1);\n      this.setBufferBarProgress(1);\n    };\n    MDCLinearProgressFoundation.prototype.isDeterminate = function () {\n      return this.determinate;\n    };\n    MDCLinearProgressFoundation.prototype.setProgress = function (value) {\n      this.progress = value;\n      if (this.determinate) {\n        this.setPrimaryBarProgress(value);\n        this.adapter.setAttribute(strings.ARIA_VALUENOW, value.toString());\n      }\n    };\n    MDCLinearProgressFoundation.prototype.getProgress = function () {\n      return this.progress;\n    };\n    MDCLinearProgressFoundation.prototype.setBuffer = function (value) {\n      this.buffer = value;\n      if (this.determinate) {\n        this.setBufferBarProgress(value);\n      }\n    };\n    MDCLinearProgressFoundation.prototype.getBuffer = function () {\n      return this.buffer;\n    };\n    MDCLinearProgressFoundation.prototype.open = function () {\n      this.adapter.removeClass(cssClasses.CLOSED_CLASS);\n      this.adapter.removeClass(cssClasses.CLOSED_ANIMATION_OFF_CLASS);\n      this.adapter.removeAttribute(strings.ARIA_HIDDEN);\n    };\n    MDCLinearProgressFoundation.prototype.close = function () {\n      this.adapter.addClass(cssClasses.CLOSED_CLASS);\n      this.adapter.setAttribute(strings.ARIA_HIDDEN, 'true');\n    };\n    MDCLinearProgressFoundation.prototype.isClosed = function () {\n      return this.adapter.hasClass(cssClasses.CLOSED_CLASS);\n    };\n    /**\n     * Handles the transitionend event emitted after `close()` is called and the\n     * opacity fades out. This is so that animations are removed only after the\n     * progress indicator is completely hidden.\n     */\n    MDCLinearProgressFoundation.prototype.handleTransitionEnd = function () {\n      if (this.adapter.hasClass(cssClasses.CLOSED_CLASS)) {\n        this.adapter.addClass(cssClasses.CLOSED_ANIMATION_OFF_CLASS);\n      }\n    };\n    MDCLinearProgressFoundation.prototype.destroy = function () {\n      _super.prototype.destroy.call(this);\n      if (this.observer) {\n        this.observer.disconnect();\n      }\n    };\n    MDCLinearProgressFoundation.prototype.restartAnimation = function () {\n      this.adapter.removeClass(cssClasses.ANIMATION_READY_CLASS);\n      this.adapter.forceLayout();\n      this.adapter.addClass(cssClasses.ANIMATION_READY_CLASS);\n    };\n    MDCLinearProgressFoundation.prototype.setPrimaryBarProgress = function (progressValue) {\n      var value = \"scaleX(\" + progressValue + \")\";\n      // Accessing `window` without a `typeof` check will throw on Node\n      // environments.\n      var transformProp = typeof window !== 'undefined' ? getCorrectPropertyName(window, 'transform') : 'transform';\n      this.adapter.setPrimaryBarStyle(transformProp, value);\n    };\n    MDCLinearProgressFoundation.prototype.setBufferBarProgress = function (progressValue) {\n      var value = progressValue * 100 + \"%\";\n      this.adapter.setBufferBarStyle(strings.FLEX_BASIS, value);\n    };\n    MDCLinearProgressFoundation.prototype.calculateAndSetDimensions = function (width) {\n      var primaryHalf = width * animationDimensionPercentages.PRIMARY_HALF;\n      var primaryFull = width * animationDimensionPercentages.PRIMARY_FULL;\n      var secondaryQuarter = width * animationDimensionPercentages.SECONDARY_QUARTER;\n      var secondaryHalf = width * animationDimensionPercentages.SECONDARY_HALF;\n      var secondaryFull = width * animationDimensionPercentages.SECONDARY_FULL;\n      this.adapter.setStyle('--mdc-linear-progress-primary-half', primaryHalf + \"px\");\n      this.adapter.setStyle('--mdc-linear-progress-primary-half-neg', -primaryHalf + \"px\");\n      this.adapter.setStyle('--mdc-linear-progress-primary-full', primaryFull + \"px\");\n      this.adapter.setStyle('--mdc-linear-progress-primary-full-neg', -primaryFull + \"px\");\n      this.adapter.setStyle('--mdc-linear-progress-secondary-quarter', secondaryQuarter + \"px\");\n      this.adapter.setStyle('--mdc-linear-progress-secondary-quarter-neg', -secondaryQuarter + \"px\");\n      this.adapter.setStyle('--mdc-linear-progress-secondary-half', secondaryHalf + \"px\");\n      this.adapter.setStyle('--mdc-linear-progress-secondary-half-neg', -secondaryHalf + \"px\");\n      this.adapter.setStyle('--mdc-linear-progress-secondary-full', secondaryFull + \"px\");\n      this.adapter.setStyle('--mdc-linear-progress-secondary-full-neg', -secondaryFull + \"px\");\n      // need to restart animation for custom props to apply to keyframes\n      this.restartAnimation();\n    };\n    return MDCLinearProgressFoundation;\n  }(MDCFoundation);\n\n  /**\n   * @license\n   * Copyright 2017 Google Inc.\n   *\n   * Permission is hereby granted, free of charge, to any person obtaining a copy\n   * of this software and associated documentation files (the \"Software\"), to deal\n   * in the Software without restriction, including without limitation the rights\n   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   * copies of the Software, and to permit persons to whom the Software is\n   * furnished to do so, subject to the following conditions:\n   *\n   * The above copyright notice and this permission notice shall be included in\n   * all copies or substantial portions of the Software.\n   *\n   * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n   * THE SOFTWARE.\n   */\n  var MDCLinearProgress = /** @class */function (_super) {\n    __extends(MDCLinearProgress, _super);\n    function MDCLinearProgress() {\n      return _super !== null && _super.apply(this, arguments) || this;\n    }\n    MDCLinearProgress.attachTo = function (root) {\n      return new MDCLinearProgress(root);\n    };\n    Object.defineProperty(MDCLinearProgress.prototype, \"determinate\", {\n      set: function (value) {\n        this.foundation.setDeterminate(value);\n      },\n      enumerable: false,\n      configurable: true\n    });\n    Object.defineProperty(MDCLinearProgress.prototype, \"progress\", {\n      set: function (value) {\n        this.foundation.setProgress(value);\n      },\n      enumerable: false,\n      configurable: true\n    });\n    Object.defineProperty(MDCLinearProgress.prototype, \"buffer\", {\n      set: function (value) {\n        this.foundation.setBuffer(value);\n      },\n      enumerable: false,\n      configurable: true\n    });\n    MDCLinearProgress.prototype.open = function () {\n      this.foundation.open();\n    };\n    MDCLinearProgress.prototype.close = function () {\n      this.foundation.close();\n    };\n    MDCLinearProgress.prototype.initialSyncWithDOM = function () {\n      var _this = this;\n      this.root.addEventListener('transitionend', function () {\n        _this.foundation.handleTransitionEnd();\n      });\n    };\n    MDCLinearProgress.prototype.getDefaultFoundation = function () {\n      var _this = this;\n      // DO NOT INLINE this variable. For backward compatibility, foundations take\n      // a Partial<MDCFooAdapter>. To ensure we don't accidentally omit any\n      // methods, we need a separate, strongly typed adapter variable.\n      var adapter = {\n        addClass: function (className) {\n          _this.root.classList.add(className);\n        },\n        forceLayout: function () {\n          _this.root.getBoundingClientRect();\n        },\n        setBufferBarStyle: function (styleProperty, value) {\n          var bufferBar = _this.root.querySelector(MDCLinearProgressFoundation.strings.BUFFER_BAR_SELECTOR);\n          if (bufferBar) {\n            bufferBar.style.setProperty(styleProperty, value);\n          }\n        },\n        setPrimaryBarStyle: function (styleProperty, value) {\n          var primaryBar = _this.root.querySelector(MDCLinearProgressFoundation.strings.PRIMARY_BAR_SELECTOR);\n          if (primaryBar) {\n            primaryBar.style.setProperty(styleProperty, value);\n          }\n        },\n        hasClass: function (className) {\n          return _this.root.classList.contains(className);\n        },\n        removeAttribute: function (attributeName) {\n          _this.root.removeAttribute(attributeName);\n        },\n        removeClass: function (className) {\n          _this.root.classList.remove(className);\n        },\n        setAttribute: function (attributeName, value) {\n          _this.root.setAttribute(attributeName, value);\n        },\n        setStyle: function (name, value) {\n          _this.root.style.setProperty(name, value);\n        },\n        attachResizeObserver: function (callback) {\n          var RO = window.ResizeObserver;\n          if (RO) {\n            var ro = new RO(callback);\n            ro.observe(_this.root);\n            return ro;\n          }\n          return null;\n        },\n        getWidth: function () {\n          return _this.root.offsetWidth;\n        }\n      };\n      return new MDCLinearProgressFoundation(adapter);\n    };\n    return MDCLinearProgress;\n  }(MDCComponent);\n\n  var inherits$1 = {exports: {}};\n\n  var inherits_browser = {exports: {}};\n\n  var hasRequiredInherits_browser;\n  function requireInherits_browser() {\n    if (hasRequiredInherits_browser) return inherits_browser.exports;\n    hasRequiredInherits_browser = 1;\n    if (typeof Object.create === 'function') {\n      // implementation from standard node.js 'util' module\n      inherits_browser.exports = function inherits(ctor, superCtor) {\n        if (superCtor) {\n          ctor.super_ = superCtor;\n          ctor.prototype = Object.create(superCtor.prototype, {\n            constructor: {\n              value: ctor,\n              enumerable: false,\n              writable: true,\n              configurable: true\n            }\n          });\n        }\n      };\n    } else {\n      // old school shim for old browsers\n      inherits_browser.exports = function inherits(ctor, superCtor) {\n        if (superCtor) {\n          ctor.super_ = superCtor;\n          var TempCtor = function () {};\n          TempCtor.prototype = superCtor.prototype;\n          ctor.prototype = new TempCtor();\n          ctor.prototype.constructor = ctor;\n        }\n      };\n    }\n    return inherits_browser.exports;\n  }\n\n  try {\n    var util = require('util');\n    /* istanbul ignore next */\n    if (typeof util.inherits !== 'function') throw '';\n    inherits$1.exports = util.inherits;\n  } catch (e) {\n    /* istanbul ignore next */\n    inherits$1.exports = requireInherits_browser();\n  }\n  var inheritsExports = inherits$1.exports;\n\n  var client_base = {};\n\n  var implementation$1 = commonjsGlobal;\n\n  var implementation = implementation$1;\n  var polyfill = function getPolyfill() {\n    if (typeof commonjsGlobal !== 'object' || !commonjsGlobal || commonjsGlobal.Math !== Math || commonjsGlobal.Array !== Array) {\n      return implementation;\n    }\n    return commonjsGlobal;\n  };\n\n  var murmurhash3_gc = {exports: {}};\n\n  /**\n   * JS Implementation of MurmurHash3 (r136) (as of May 20, 2011)\n   * \n   * @author <a href=\"mailto:gary.court@gmail.com\">Gary Court</a>\n   * @see http://github.com/garycourt/murmurhash-js\n   * @author <a href=\"mailto:aappleby@gmail.com\">Austin Appleby</a>\n   * @see http://sites.google.com/site/murmurhash/\n   * \n   * @param {string} key ASCII only\n   * @param {number} seed Positive integer only\n   * @return {number} 32-bit positive integer hash \n   */\n  murmurhash3_gc.exports;\n  (function (module) {\n    function murmurhash3_32_gc(key, seed) {\n      var remainder, bytes, h1, h1b, c1, c2, k1, i;\n      remainder = key.length & 3; // key.length % 4\n      bytes = key.length - remainder;\n      h1 = seed;\n      c1 = 0xcc9e2d51;\n      c2 = 0x1b873593;\n      i = 0;\n      while (i < bytes) {\n        k1 = key.charCodeAt(i) & 0xff | (key.charCodeAt(++i) & 0xff) << 8 | (key.charCodeAt(++i) & 0xff) << 16 | (key.charCodeAt(++i) & 0xff) << 24;\n        ++i;\n        k1 = (k1 & 0xffff) * c1 + (((k1 >>> 16) * c1 & 0xffff) << 16) & 0xffffffff;\n        k1 = k1 << 15 | k1 >>> 17;\n        k1 = (k1 & 0xffff) * c2 + (((k1 >>> 16) * c2 & 0xffff) << 16) & 0xffffffff;\n        h1 ^= k1;\n        h1 = h1 << 13 | h1 >>> 19;\n        h1b = (h1 & 0xffff) * 5 + (((h1 >>> 16) * 5 & 0xffff) << 16) & 0xffffffff;\n        h1 = (h1b & 0xffff) + 0x6b64 + (((h1b >>> 16) + 0xe654 & 0xffff) << 16);\n      }\n      k1 = 0;\n      switch (remainder) {\n        case 3:\n          k1 ^= (key.charCodeAt(i + 2) & 0xff) << 16;\n        case 2:\n          k1 ^= (key.charCodeAt(i + 1) & 0xff) << 8;\n        case 1:\n          k1 ^= key.charCodeAt(i) & 0xff;\n          k1 = (k1 & 0xffff) * c1 + (((k1 >>> 16) * c1 & 0xffff) << 16) & 0xffffffff;\n          k1 = k1 << 15 | k1 >>> 17;\n          k1 = (k1 & 0xffff) * c2 + (((k1 >>> 16) * c2 & 0xffff) << 16) & 0xffffffff;\n          h1 ^= k1;\n      }\n      h1 ^= key.length;\n      h1 ^= h1 >>> 16;\n      h1 = (h1 & 0xffff) * 0x85ebca6b + (((h1 >>> 16) * 0x85ebca6b & 0xffff) << 16) & 0xffffffff;\n      h1 ^= h1 >>> 13;\n      h1 = (h1 & 0xffff) * 0xc2b2ae35 + (((h1 >>> 16) * 0xc2b2ae35 & 0xffff) << 16) & 0xffffffff;\n      h1 ^= h1 >>> 16;\n      return h1 >>> 0;\n    }\n    {\n      module.exports = murmurhash3_32_gc;\n    }\n  })(murmurhash3_gc);\n  var murmurhash3_gcExports = murmurhash3_gc.exports;\n\n  var uaParser = {exports: {}};\n\n  uaParser.exports;\n  (function (module, exports) {\n    /////////////////////////////////////////////////////////////////////////////////\n    /* UAParser.js v0.7.39\n       Copyright © 2012-2021 Faisal Salman <f@faisalman.com>\n       MIT License */ /*\n                      Detect Browser, Engine, OS, CPU, and Device type/model from User-Agent data.\n                      Supports browser & node.js environment. \n                      Demo   : https://faisalman.github.io/ua-parser-js\n                      Source : https://github.com/faisalman/ua-parser-js */\n    /////////////////////////////////////////////////////////////////////////////////\n\n    (function (window, undefined$1) {\n\n      //////////////\n      // Constants\n      /////////////\n      var LIBVERSION = '0.7.39',\n        EMPTY = '',\n        UNKNOWN = '?',\n        FUNC_TYPE = 'function',\n        UNDEF_TYPE = 'undefined',\n        OBJ_TYPE = 'object',\n        STR_TYPE = 'string',\n        MAJOR = 'major',\n        MODEL = 'model',\n        NAME = 'name',\n        TYPE = 'type',\n        VENDOR = 'vendor',\n        VERSION = 'version',\n        ARCHITECTURE = 'architecture',\n        CONSOLE = 'console',\n        MOBILE = 'mobile',\n        TABLET = 'tablet',\n        SMARTTV = 'smarttv',\n        WEARABLE = 'wearable',\n        EMBEDDED = 'embedded',\n        UA_MAX_LENGTH = 500;\n      var AMAZON = 'Amazon',\n        APPLE = 'Apple',\n        ASUS = 'ASUS',\n        BLACKBERRY = 'BlackBerry',\n        BROWSER = 'Browser',\n        CHROME = 'Chrome',\n        EDGE = 'Edge',\n        FIREFOX = 'Firefox',\n        GOOGLE = 'Google',\n        HUAWEI = 'Huawei',\n        LG = 'LG',\n        MICROSOFT = 'Microsoft',\n        MOTOROLA = 'Motorola',\n        OPERA = 'Opera',\n        SAMSUNG = 'Samsung',\n        SHARP = 'Sharp',\n        SONY = 'Sony',\n        XIAOMI = 'Xiaomi',\n        ZEBRA = 'Zebra',\n        FACEBOOK = 'Facebook',\n        CHROMIUM_OS = 'Chromium OS',\n        MAC_OS = 'Mac OS',\n        SUFFIX_BROWSER = ' Browser';\n\n      ///////////\n      // Helper\n      //////////\n\n      var extend = function (regexes, extensions) {\n          var mergedRegexes = {};\n          for (var i in regexes) {\n            if (extensions[i] && extensions[i].length % 2 === 0) {\n              mergedRegexes[i] = extensions[i].concat(regexes[i]);\n            } else {\n              mergedRegexes[i] = regexes[i];\n            }\n          }\n          return mergedRegexes;\n        },\n        enumerize = function (arr) {\n          var enums = {};\n          for (var i = 0; i < arr.length; i++) {\n            enums[arr[i].toUpperCase()] = arr[i];\n          }\n          return enums;\n        },\n        has = function (str1, str2) {\n          return typeof str1 === STR_TYPE ? lowerize(str2).indexOf(lowerize(str1)) !== -1 : false;\n        },\n        lowerize = function (str) {\n          return str.toLowerCase();\n        },\n        majorize = function (version) {\n          return typeof version === STR_TYPE ? version.replace(/[^\\d\\.]/g, EMPTY).split('.')[0] : undefined$1;\n        },\n        trim = function (str, len) {\n          if (typeof str === STR_TYPE) {\n            str = str.replace(/^\\s\\s*/, EMPTY);\n            return typeof len === UNDEF_TYPE ? str : str.substring(0, UA_MAX_LENGTH);\n          }\n        };\n\n      ///////////////\n      // Map helper\n      //////////////\n\n      var rgxMapper = function (ua, arrays) {\n          var i = 0,\n            j,\n            k,\n            p,\n            q,\n            matches,\n            match;\n\n          // loop through all regexes maps\n          while (i < arrays.length && !matches) {\n            var regex = arrays[i],\n              // even sequence (0,2,4,..)\n              props = arrays[i + 1]; // odd sequence (1,3,5,..)\n            j = k = 0;\n\n            // try matching uastring with regexes\n            while (j < regex.length && !matches) {\n              if (!regex[j]) {\n                break;\n              }\n              matches = regex[j++].exec(ua);\n              if (!!matches) {\n                for (p = 0; p < props.length; p++) {\n                  match = matches[++k];\n                  q = props[p];\n                  // check if given property is actually array\n                  if (typeof q === OBJ_TYPE && q.length > 0) {\n                    if (q.length === 2) {\n                      if (typeof q[1] == FUNC_TYPE) {\n                        // assign modified match\n                        this[q[0]] = q[1].call(this, match);\n                      } else {\n                        // assign given value, ignore regex match\n                        this[q[0]] = q[1];\n                      }\n                    } else if (q.length === 3) {\n                      // check whether function or regex\n                      if (typeof q[1] === FUNC_TYPE && !(q[1].exec && q[1].test)) {\n                        // call function (usually string mapper)\n                        this[q[0]] = match ? q[1].call(this, match, q[2]) : undefined$1;\n                      } else {\n                        // sanitize match using given regex\n                        this[q[0]] = match ? match.replace(q[1], q[2]) : undefined$1;\n                      }\n                    } else if (q.length === 4) {\n                      this[q[0]] = match ? q[3].call(this, match.replace(q[1], q[2])) : undefined$1;\n                    }\n                  } else {\n                    this[q] = match ? match : undefined$1;\n                  }\n                }\n              }\n            }\n            i += 2;\n          }\n        },\n        strMapper = function (str, map) {\n          for (var i in map) {\n            // check if current value is array\n            if (typeof map[i] === OBJ_TYPE && map[i].length > 0) {\n              for (var j = 0; j < map[i].length; j++) {\n                if (has(map[i][j], str)) {\n                  return i === UNKNOWN ? undefined$1 : i;\n                }\n              }\n            } else if (has(map[i], str)) {\n              return i === UNKNOWN ? undefined$1 : i;\n            }\n          }\n          return map.hasOwnProperty('*') ? map['*'] : str;\n        };\n\n      ///////////////\n      // String map\n      //////////////\n\n      // Safari < 3.0\n      var oldSafariMap = {\n          '1.0': '/8',\n          '1.2': '/1',\n          '1.3': '/3',\n          '2.0': '/412',\n          '2.0.2': '/416',\n          '2.0.3': '/417',\n          '2.0.4': '/419',\n          '?': '/'\n        },\n        windowsVersionMap = {\n          'ME': '4.90',\n          'NT 3.11': 'NT3.51',\n          'NT 4.0': 'NT4.0',\n          '2000': 'NT 5.0',\n          'XP': ['NT 5.1', 'NT 5.2'],\n          'Vista': 'NT 6.0',\n          '7': 'NT 6.1',\n          '8': 'NT 6.2',\n          '8.1': 'NT 6.3',\n          '10': ['NT 6.4', 'NT 10.0'],\n          'RT': 'ARM'\n        };\n\n      //////////////\n      // Regex map\n      /////////////\n\n      var regexes = {\n        browser: [[/\\b(?:crmo|crios)\\/([\\w\\.]+)/i // Chrome for Android/iOS\n        ], [VERSION, [NAME, 'Chrome']], [/edg(?:e|ios|a)?\\/([\\w\\.]+)/i // Microsoft Edge\n        ], [VERSION, [NAME, 'Edge']], [\n        // Presto based\n        /(opera mini)\\/([-\\w\\.]+)/i,\n        // Opera Mini\n        /(opera [mobiletab]{3,6})\\b.+version\\/([-\\w\\.]+)/i,\n        // Opera Mobi/Tablet\n        /(opera)(?:.+version\\/|[\\/ ]+)([\\w\\.]+)/i // Opera\n        ], [NAME, VERSION], [/opios[\\/ ]+([\\w\\.]+)/i // Opera mini on iphone >= 8.0\n        ], [VERSION, [NAME, OPERA + ' Mini']], [/\\bop(?:rg)?x\\/([\\w\\.]+)/i // Opera GX\n        ], [VERSION, [NAME, OPERA + ' GX']], [/\\bopr\\/([\\w\\.]+)/i // Opera Webkit\n        ], [VERSION, [NAME, OPERA]], [\n        // Mixed\n        /\\bb[ai]*d(?:uhd|[ub]*[aekoprswx]{5,6})[\\/ ]?([\\w\\.]+)/i // Baidu\n        ], [VERSION, [NAME, 'Baidu']], [/(kindle)\\/([\\w\\.]+)/i,\n        // Kindle\n        /(lunascape|maxthon|netfront|jasmine|blazer|sleipnir)[\\/ ]?([\\w\\.]*)/i,\n        // Lunascape/Maxthon/Netfront/Jasmine/Blazer/Sleipnir\n        // Trident based\n        /(avant|iemobile|slim)\\s?(?:browser)?[\\/ ]?([\\w\\.]*)/i,\n        // Avant/IEMobile/SlimBrowser\n        /(?:ms|\\()(ie) ([\\w\\.]+)/i,\n        // Internet Explorer\n\n        // Webkit/KHTML based                                               // Flock/RockMelt/Midori/Epiphany/Silk/Skyfire/Bolt/Iron/Iridium/PhantomJS/Bowser/QupZilla/Falkon\n        /(flock|rockmelt|midori|epiphany|silk|skyfire|ovibrowser|bolt|iron|vivaldi|iridium|phantomjs|bowser|qupzilla|falkon|rekonq|puffin|brave|whale(?!.+naver)|qqbrowserlite|duckduckgo|klar|helio)\\/([-\\w\\.]+)/i,\n        // Rekonq/Puffin/Brave/Whale/QQBrowserLite/QQ//Vivaldi/DuckDuckGo/Klar/Helio\n        /(heytap|ovi)browser\\/([\\d\\.]+)/i,\n        // HeyTap/Ovi\n        /(weibo)__([\\d\\.]+)/i // Weibo\n        ], [NAME, VERSION], [/quark(?:pc)?\\/([-\\w\\.]+)/i // Quark\n        ], [VERSION, [NAME, 'Quark']], [/\\bddg\\/([\\w\\.]+)/i // DuckDuckGo\n        ], [VERSION, [NAME, 'DuckDuckGo']], [/(?:\\buc? ?browser|(?:juc.+)ucweb)[\\/ ]?([\\w\\.]+)/i // UCBrowser\n        ], [VERSION, [NAME, 'UC' + BROWSER]], [/microm.+\\bqbcore\\/([\\w\\.]+)/i,\n        // WeChat Desktop for Windows Built-in Browser\n        /\\bqbcore\\/([\\w\\.]+).+microm/i, /micromessenger\\/([\\w\\.]+)/i // WeChat\n        ], [VERSION, [NAME, 'WeChat']], [/konqueror\\/([\\w\\.]+)/i // Konqueror\n        ], [VERSION, [NAME, 'Konqueror']], [/trident.+rv[: ]([\\w\\.]{1,9})\\b.+like gecko/i // IE11\n        ], [VERSION, [NAME, 'IE']], [/ya(?:search)?browser\\/([\\w\\.]+)/i // Yandex\n        ], [VERSION, [NAME, 'Yandex']], [/slbrowser\\/([\\w\\.]+)/i // Smart Lenovo Browser\n        ], [VERSION, [NAME, 'Smart Lenovo ' + BROWSER]], [/(avast|avg)\\/([\\w\\.]+)/i // Avast/AVG Secure Browser\n        ], [[NAME, /(.+)/, '$1 Secure ' + BROWSER], VERSION], [/\\bfocus\\/([\\w\\.]+)/i // Firefox Focus\n        ], [VERSION, [NAME, FIREFOX + ' Focus']], [/\\bopt\\/([\\w\\.]+)/i // Opera Touch\n        ], [VERSION, [NAME, OPERA + ' Touch']], [/coc_coc\\w+\\/([\\w\\.]+)/i // Coc Coc Browser\n        ], [VERSION, [NAME, 'Coc Coc']], [/dolfin\\/([\\w\\.]+)/i // Dolphin\n        ], [VERSION, [NAME, 'Dolphin']], [/coast\\/([\\w\\.]+)/i // Opera Coast\n        ], [VERSION, [NAME, OPERA + ' Coast']], [/miuibrowser\\/([\\w\\.]+)/i // MIUI Browser\n        ], [VERSION, [NAME, 'MIUI ' + BROWSER]], [/fxios\\/([-\\w\\.]+)/i // Firefox for iOS\n        ], [VERSION, [NAME, FIREFOX]], [/\\bqihu|(qi?ho?o?|360)browser/i // 360\n        ], [[NAME, '360' + SUFFIX_BROWSER]], [/\\b(qq)\\/([\\w\\.]+)/i // QQ\n        ], [[NAME, /(.+)/, '$1Browser'], VERSION], [/(oculus|sailfish|huawei|vivo|pico)browser\\/([\\w\\.]+)/i], [[NAME, /(.+)/, '$1' + SUFFIX_BROWSER], VERSION], [\n        // Oculus/Sailfish/HuaweiBrowser/VivoBrowser/PicoBrowser\n        /samsungbrowser\\/([\\w\\.]+)/i // Samsung Internet\n        ], [VERSION, [NAME, SAMSUNG + ' Internet']], [/(comodo_dragon)\\/([\\w\\.]+)/i // Comodo Dragon\n        ], [[NAME, /_/g, ' '], VERSION], [/metasr[\\/ ]?([\\d\\.]+)/i // Sogou Explorer\n        ], [VERSION, [NAME, 'Sogou Explorer']], [/(sogou)mo\\w+\\/([\\d\\.]+)/i // Sogou Mobile\n        ], [[NAME, 'Sogou Mobile'], VERSION], [/(electron)\\/([\\w\\.]+) safari/i,\n        // Electron-based App\n        /(tesla)(?: qtcarbrowser|\\/(20\\d\\d\\.[-\\w\\.]+))/i,\n        // Tesla\n        /m?(qqbrowser|2345Explorer)[\\/ ]?([\\w\\.]+)/i // QQBrowser/2345 Browser\n        ], [NAME, VERSION], [/(lbbrowser|rekonq)/i,\n        // LieBao Browser/Rekonq\n        /\\[(linkedin)app\\]/i // LinkedIn App for iOS & Android\n        ], [NAME], [\n        // WebView\n        /((?:fban\\/fbios|fb_iab\\/fb4a)(?!.+fbav)|;fbav\\/([\\w\\.]+);)/i // Facebook App for iOS & Android\n        ], [[NAME, FACEBOOK], VERSION], [/(Klarna)\\/([\\w\\.]+)/i,\n        // Klarna Shopping Browser for iOS & Android\n        /(kakao(?:talk|story))[\\/ ]([\\w\\.]+)/i,\n        // Kakao App\n        /(naver)\\(.*?(\\d+\\.[\\w\\.]+).*\\)/i,\n        // Naver InApp\n        /safari (line)\\/([\\w\\.]+)/i,\n        // Line App for iOS\n        /\\b(line)\\/([\\w\\.]+)\\/iab/i,\n        // Line App for Android\n        /(alipay)client\\/([\\w\\.]+)/i,\n        // Alipay\n        /(twitter)(?:and| f.+e\\/([\\w\\.]+))/i,\n        // Twitter\n        /(chromium|instagram|snapchat)[\\/ ]([-\\w\\.]+)/i // Chromium/Instagram/Snapchat\n        ], [NAME, VERSION], [/\\bgsa\\/([\\w\\.]+) .*safari\\//i // Google Search Appliance on iOS\n        ], [VERSION, [NAME, 'GSA']], [/musical_ly(?:.+app_?version\\/|_)([\\w\\.]+)/i // TikTok\n        ], [VERSION, [NAME, 'TikTok']], [/headlesschrome(?:\\/([\\w\\.]+)| )/i // Chrome Headless\n        ], [VERSION, [NAME, CHROME + ' Headless']], [/ wv\\).+(chrome)\\/([\\w\\.]+)/i // Chrome WebView\n        ], [[NAME, CHROME + ' WebView'], VERSION], [/droid.+ version\\/([\\w\\.]+)\\b.+(?:mobile safari|safari)/i // Android Browser\n        ], [VERSION, [NAME, 'Android ' + BROWSER]], [/(chrome|omniweb|arora|[tizenoka]{5} ?browser)\\/v?([\\w\\.]+)/i // Chrome/OmniWeb/Arora/Tizen/Nokia\n        ], [NAME, VERSION], [/version\\/([\\w\\.\\,]+) .*mobile\\/\\w+ (safari)/i // Mobile Safari\n        ], [VERSION, [NAME, 'Mobile Safari']], [/version\\/([\\w(\\.|\\,)]+) .*(mobile ?safari|safari)/i // Safari & Safari Mobile\n        ], [VERSION, NAME], [/webkit.+?(mobile ?safari|safari)(\\/[\\w\\.]+)/i // Safari < 3.0\n        ], [NAME, [VERSION, strMapper, oldSafariMap]], [/(webkit|khtml)\\/([\\w\\.]+)/i], [NAME, VERSION], [\n        // Gecko based\n        /(navigator|netscape\\d?)\\/([-\\w\\.]+)/i // Netscape\n        ], [[NAME, 'Netscape'], VERSION], [/(wolvic)\\/([\\w\\.]+)/i // Wolvic\n        ], [NAME, VERSION], [/mobile vr; rv:([\\w\\.]+)\\).+firefox/i // Firefox Reality\n        ], [VERSION, [NAME, FIREFOX + ' Reality']], [/ekiohf.+(flow)\\/([\\w\\.]+)/i,\n        // Flow\n        /(swiftfox)/i,\n        // Swiftfox\n        /(icedragon|iceweasel|camino|chimera|fennec|maemo browser|minimo|conkeror)[\\/ ]?([\\w\\.\\+]+)/i,\n        // IceDragon/Iceweasel/Camino/Chimera/Fennec/Maemo/Minimo/Conkeror\n        /(seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\\/([-\\w\\.]+)$/i,\n        // Firefox/SeaMonkey/K-Meleon/IceCat/IceApe/Firebird/Phoenix\n        /(firefox)\\/([\\w\\.]+)/i,\n        // Other Firefox-based\n        /(mozilla)\\/([\\w\\.]+) .+rv\\:.+gecko\\/\\d+/i,\n        // Mozilla\n\n        // Other\n        /(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|obigo|mosaic|(?:go|ice|up)[\\. ]?browser)[-\\/ ]?v?([\\w\\.]+)/i,\n        // Polaris/Lynx/Dillo/iCab/Doris/Amaya/w3m/NetSurf/Obigo/Mosaic/Go/ICE/UP.Browser\n        /(links) \\(([\\w\\.]+)/i // Links\n        ], [NAME, [VERSION, /_/g, '.']], [/(cobalt)\\/([\\w\\.]+)/i // Cobalt\n        ], [NAME, [VERSION, /master.|lts./, \"\"]]],\n        cpu: [[/(?:(amd|x(?:(?:86|64)[-_])?|wow|win)64)[;\\)]/i // AMD64 (x64)\n        ], [[ARCHITECTURE, 'amd64']], [/(ia32(?=;))/i // IA32 (quicktime)\n        ], [[ARCHITECTURE, lowerize]], [/((?:i[346]|x)86)[;\\)]/i // IA32 (x86)\n        ], [[ARCHITECTURE, 'ia32']], [/\\b(aarch64|arm(v?8e?l?|_?64))\\b/i // ARM64\n        ], [[ARCHITECTURE, 'arm64']], [/\\b(arm(?:v[67])?ht?n?[fl]p?)\\b/i // ARMHF\n        ], [[ARCHITECTURE, 'armhf']], [\n        // PocketPC mistakenly identified as PowerPC\n        /windows (ce|mobile); ppc;/i], [[ARCHITECTURE, 'arm']], [/((?:ppc|powerpc)(?:64)?)(?: mac|;|\\))/i // PowerPC\n        ], [[ARCHITECTURE, /ower/, EMPTY, lowerize]], [/(sun4\\w)[;\\)]/i // SPARC\n        ], [[ARCHITECTURE, 'sparc']], [/((?:avr32|ia64(?=;))|68k(?=\\))|\\barm(?=v(?:[1-7]|[5-7]1)l?|;|eabi)|(?=atmel )avr|(?:irix|mips|sparc)(?:64)?\\b|pa-risc)/i\n        // IA64, 68K, ARM/64, AVR/32, IRIX/64, MIPS/64, SPARC/64, PA-RISC\n        ], [[ARCHITECTURE, lowerize]]],\n        device: [[\n        //////////////////////////\n        // MOBILES & TABLETS\n        /////////////////////////\n\n        // Samsung\n        /\\b(sch-i[89]0\\d|shw-m380s|sm-[ptx]\\w{2,4}|gt-[pn]\\d{2,4}|sgh-t8[56]9|nexus 10)/i], [MODEL, [VENDOR, SAMSUNG], [TYPE, TABLET]], [/\\b((?:s[cgp]h|gt|sm)-(?![lr])\\w+|sc[g-]?[\\d]+a?|galaxy nexus)/i, /samsung[- ]((?!sm-[lr])[-\\w]+)/i, /sec-(sgh\\w+)/i], [MODEL, [VENDOR, SAMSUNG], [TYPE, MOBILE]], [\n        // Apple\n        /(?:\\/|\\()(ip(?:hone|od)[\\w, ]*)(?:\\/|;)/i // iPod/iPhone\n        ], [MODEL, [VENDOR, APPLE], [TYPE, MOBILE]], [/\\((ipad);[-\\w\\),; ]+apple/i,\n        // iPad\n        /applecoremedia\\/[\\w\\.]+ \\((ipad)/i, /\\b(ipad)\\d\\d?,\\d\\d?[;\\]].+ios/i], [MODEL, [VENDOR, APPLE], [TYPE, TABLET]], [/(macintosh);/i], [MODEL, [VENDOR, APPLE]], [\n        // Sharp\n        /\\b(sh-?[altvz]?\\d\\d[a-ekm]?)/i], [MODEL, [VENDOR, SHARP], [TYPE, MOBILE]], [\n        // Huawei\n        /\\b((?:ag[rs][23]?|bah2?|sht?|btv)-a?[lw]\\d{2})\\b(?!.+d\\/s)/i], [MODEL, [VENDOR, HUAWEI], [TYPE, TABLET]], [/(?:huawei|honor)([-\\w ]+)[;\\)]/i, /\\b(nexus 6p|\\w{2,4}e?-[atu]?[ln][\\dx][012359c][adn]?)\\b(?!.+d\\/s)/i], [MODEL, [VENDOR, HUAWEI], [TYPE, MOBILE]], [\n        // Xiaomi\n        /\\b(poco[\\w ]+|m2\\d{3}j\\d\\d[a-z]{2})(?: bui|\\))/i,\n        // Xiaomi POCO\n        /\\b; (\\w+) build\\/hm\\1/i,\n        // Xiaomi Hongmi 'numeric' models\n        /\\b(hm[-_ ]?note?[_ ]?(?:\\d\\w)?) bui/i,\n        // Xiaomi Hongmi\n        /\\b(redmi[\\-_ ]?(?:note|k)?[\\w_ ]+)(?: bui|\\))/i,\n        // Xiaomi Redmi\n        /oid[^\\)]+; (m?[12][0-389][01]\\w{3,6}[c-y])( bui|; wv|\\))/i,\n        // Xiaomi Redmi 'numeric' models\n        /\\b(mi[-_ ]?(?:a\\d|one|one[_ ]plus|note lte|max|cc)?[_ ]?(?:\\d?\\w?)[_ ]?(?:plus|se|lite|pro)?)(?: bui|\\))/i // Xiaomi Mi\n        ], [[MODEL, /_/g, ' '], [VENDOR, XIAOMI], [TYPE, MOBILE]], [/oid[^\\)]+; (2\\d{4}(283|rpbf)[cgl])( bui|\\))/i,\n        // Redmi Pad\n        /\\b(mi[-_ ]?(?:pad)(?:[\\w_ ]+))(?: bui|\\))/i // Mi Pad tablets\n        ], [[MODEL, /_/g, ' '], [VENDOR, XIAOMI], [TYPE, TABLET]], [\n        // OPPO\n        /; (\\w+) bui.+ oppo/i, /\\b(cph[12]\\d{3}|p(?:af|c[al]|d\\w|e[ar])[mt]\\d0|x9007|a101op)\\b/i], [MODEL, [VENDOR, 'OPPO'], [TYPE, MOBILE]], [/\\b(opd2\\d{3}a?) bui/i], [MODEL, [VENDOR, 'OPPO'], [TYPE, TABLET]], [\n        // Vivo\n        /vivo (\\w+)(?: bui|\\))/i, /\\b(v[12]\\d{3}\\w?[at])(?: bui|;)/i], [MODEL, [VENDOR, 'Vivo'], [TYPE, MOBILE]], [\n        // Realme\n        /\\b(rmx[1-3]\\d{3})(?: bui|;|\\))/i], [MODEL, [VENDOR, 'Realme'], [TYPE, MOBILE]], [\n        // Motorola\n        /\\b(milestone|droid(?:[2-4x]| (?:bionic|x2|pro|razr))?:?( 4g)?)\\b[\\w ]+build\\//i, /\\bmot(?:orola)?[- ](\\w*)/i, /((?:moto[\\w\\(\\) ]+|xt\\d{3,4}|nexus 6)(?= bui|\\)))/i], [MODEL, [VENDOR, MOTOROLA], [TYPE, MOBILE]], [/\\b(mz60\\d|xoom[2 ]{0,2}) build\\//i], [MODEL, [VENDOR, MOTOROLA], [TYPE, TABLET]], [\n        // LG\n        /((?=lg)?[vl]k\\-?\\d{3}) bui| 3\\.[-\\w; ]{10}lg?-([06cv9]{3,4})/i], [MODEL, [VENDOR, LG], [TYPE, TABLET]], [/(lm(?:-?f100[nv]?|-[\\w\\.]+)(?= bui|\\))|nexus [45])/i, /\\blg[-e;\\/ ]+((?!browser|netcast|android tv)\\w+)/i, /\\blg-?([\\d\\w]+) bui/i], [MODEL, [VENDOR, LG], [TYPE, MOBILE]], [\n        // Lenovo\n        /(ideatab[-\\w ]+)/i, /lenovo ?(s[56]000[-\\w]+|tab(?:[\\w ]+)|yt[-\\d\\w]{6}|tb[-\\d\\w]{6})/i], [MODEL, [VENDOR, 'Lenovo'], [TYPE, TABLET]], [\n        // Nokia\n        /(?:maemo|nokia).*(n900|lumia \\d+)/i, /nokia[-_ ]?([-\\w\\.]*)/i], [[MODEL, /_/g, ' '], [VENDOR, 'Nokia'], [TYPE, MOBILE]], [\n        // Google\n        /(pixel c)\\b/i // Google Pixel C\n        ], [MODEL, [VENDOR, GOOGLE], [TYPE, TABLET]], [/droid.+; (pixel[\\daxl ]{0,6})(?: bui|\\))/i // Google Pixel\n        ], [MODEL, [VENDOR, GOOGLE], [TYPE, MOBILE]], [\n        // Sony\n        /droid.+ (a?\\d[0-2]{2}so|[c-g]\\d{4}|so[-gl]\\w+|xq-a\\w[4-7][12])(?= bui|\\).+chrome\\/(?![1-6]{0,1}\\d\\.))/i], [MODEL, [VENDOR, SONY], [TYPE, MOBILE]], [/sony tablet [ps]/i, /\\b(?:sony)?sgp\\w+(?: bui|\\))/i], [[MODEL, 'Xperia Tablet'], [VENDOR, SONY], [TYPE, TABLET]], [\n        // OnePlus\n        / (kb2005|in20[12]5|be20[12][59])\\b/i, /(?:one)?(?:plus)? (a\\d0\\d\\d)(?: b|\\))/i], [MODEL, [VENDOR, 'OnePlus'], [TYPE, MOBILE]], [\n        // Amazon\n        /(alexa)webm/i, /(kf[a-z]{2}wi|aeo(?!bc)\\w\\w)( bui|\\))/i,\n        // Kindle Fire without Silk / Echo Show\n        /(kf[a-z]+)( bui|\\)).+silk\\//i // Kindle Fire HD\n        ], [MODEL, [VENDOR, AMAZON], [TYPE, TABLET]], [/((?:sd|kf)[0349hijorstuw]+)( bui|\\)).+silk\\//i // Fire Phone\n        ], [[MODEL, /(.+)/g, 'Fire Phone $1'], [VENDOR, AMAZON], [TYPE, MOBILE]], [\n        // BlackBerry\n        /(playbook);[-\\w\\),; ]+(rim)/i // BlackBerry PlayBook\n        ], [MODEL, VENDOR, [TYPE, TABLET]], [/\\b((?:bb[a-f]|st[hv])100-\\d)/i, /\\(bb10; (\\w+)/i // BlackBerry 10\n        ], [MODEL, [VENDOR, BLACKBERRY], [TYPE, MOBILE]], [\n        // Asus\n        /(?:\\b|asus_)(transfo[prime ]{4,10} \\w+|eeepc|slider \\w+|nexus 7|padfone|p00[cj])/i], [MODEL, [VENDOR, ASUS], [TYPE, TABLET]], [/ (z[bes]6[027][012][km][ls]|zenfone \\d\\w?)\\b/i], [MODEL, [VENDOR, ASUS], [TYPE, MOBILE]], [\n        // HTC\n        /(nexus 9)/i // HTC Nexus 9\n        ], [MODEL, [VENDOR, 'HTC'], [TYPE, TABLET]], [/(htc)[-;_ ]{1,2}([\\w ]+(?=\\)| bui)|\\w+)/i,\n        // HTC\n\n        // ZTE\n        /(zte)[- ]([\\w ]+?)(?: bui|\\/|\\))/i, /(alcatel|geeksphone|nexian|panasonic(?!(?:;|\\.))|sony(?!-bra))[-_ ]?([-\\w]*)/i // Alcatel/GeeksPhone/Nexian/Panasonic/Sony\n        ], [VENDOR, [MODEL, /_/g, ' '], [TYPE, MOBILE]], [\n        // TCL\n        /droid [\\w\\.]+; ((?:8[14]9[16]|9(?:0(?:48|60|8[01])|1(?:3[27]|66)|2(?:6[69]|9[56])|466))[gqswx])\\w*(\\)| bui)/i], [MODEL, [VENDOR, 'TCL'], [TYPE, TABLET]], [\n        // itel\n        /(itel) ((\\w+))/i], [[VENDOR, lowerize], MODEL, [TYPE, strMapper, {\n          'tablet': ['p10001l', 'w7001'],\n          '*': 'mobile'\n        }]], [\n        // Acer\n        /droid.+; ([ab][1-7]-?[0178a]\\d\\d?)/i], [MODEL, [VENDOR, 'Acer'], [TYPE, TABLET]], [\n        // Meizu\n        /droid.+; (m[1-5] note) bui/i, /\\bmz-([-\\w]{2,})/i], [MODEL, [VENDOR, 'Meizu'], [TYPE, MOBILE]], [\n        // Ulefone\n        /; ((?:power )?armor(?:[\\w ]{0,8}))(?: bui|\\))/i], [MODEL, [VENDOR, 'Ulefone'], [TYPE, MOBILE]], [\n        // Nothing\n        /droid.+; (a(?:015|06[35]|142p?))/i], [MODEL, [VENDOR, 'Nothing'], [TYPE, MOBILE]], [\n        // MIXED\n        /(blackberry|benq|palm(?=\\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron|infinix|tecno)[-_ ]?([-\\w]*)/i,\n        // BlackBerry/BenQ/Palm/Sony-Ericsson/Acer/Asus/Dell/Meizu/Motorola/Polytron\n        /(hp) ([\\w ]+\\w)/i,\n        // HP iPAQ\n        /(asus)-?(\\w+)/i,\n        // Asus\n        /(microsoft); (lumia[\\w ]+)/i,\n        // Microsoft Lumia\n        /(lenovo)[-_ ]?([-\\w]+)/i,\n        // Lenovo\n        /(jolla)/i,\n        // Jolla\n        /(oppo) ?([\\w ]+) bui/i // OPPO\n        ], [VENDOR, MODEL, [TYPE, MOBILE]], [/(kobo)\\s(ereader|touch)/i,\n        // Kobo\n        /(archos) (gamepad2?)/i,\n        // Archos\n        /(hp).+(touchpad(?!.+tablet)|tablet)/i,\n        // HP TouchPad\n        /(kindle)\\/([\\w\\.]+)/i,\n        // Kindle\n        /(nook)[\\w ]+build\\/(\\w+)/i,\n        // Nook\n        /(dell) (strea[kpr\\d ]*[\\dko])/i,\n        // Dell Streak\n        /(le[- ]+pan)[- ]+(\\w{1,9}) bui/i,\n        // Le Pan Tablets\n        /(trinity)[- ]*(t\\d{3}) bui/i,\n        // Trinity Tablets\n        /(gigaset)[- ]+(q\\w{1,9}) bui/i,\n        // Gigaset Tablets\n        /(vodafone) ([\\w ]+)(?:\\)| bui)/i // Vodafone\n        ], [VENDOR, MODEL, [TYPE, TABLET]], [/(surface duo)/i // Surface Duo\n        ], [MODEL, [VENDOR, MICROSOFT], [TYPE, TABLET]], [/droid [\\d\\.]+; (fp\\du?)(?: b|\\))/i // Fairphone\n        ], [MODEL, [VENDOR, 'Fairphone'], [TYPE, MOBILE]], [/(u304aa)/i // AT&T\n        ], [MODEL, [VENDOR, 'AT&T'], [TYPE, MOBILE]], [/\\bsie-(\\w*)/i // Siemens\n        ], [MODEL, [VENDOR, 'Siemens'], [TYPE, MOBILE]], [/\\b(rct\\w+) b/i // RCA Tablets\n        ], [MODEL, [VENDOR, 'RCA'], [TYPE, TABLET]], [/\\b(venue[\\d ]{2,7}) b/i // Dell Venue Tablets\n        ], [MODEL, [VENDOR, 'Dell'], [TYPE, TABLET]], [/\\b(q(?:mv|ta)\\w+) b/i // Verizon Tablet\n        ], [MODEL, [VENDOR, 'Verizon'], [TYPE, TABLET]], [/\\b(?:barnes[& ]+noble |bn[rt])([\\w\\+ ]*) b/i // Barnes & Noble Tablet\n        ], [MODEL, [VENDOR, 'Barnes & Noble'], [TYPE, TABLET]], [/\\b(tm\\d{3}\\w+) b/i], [MODEL, [VENDOR, 'NuVision'], [TYPE, TABLET]], [/\\b(k88) b/i // ZTE K Series Tablet\n        ], [MODEL, [VENDOR, 'ZTE'], [TYPE, TABLET]], [/\\b(nx\\d{3}j) b/i // ZTE Nubia\n        ], [MODEL, [VENDOR, 'ZTE'], [TYPE, MOBILE]], [/\\b(gen\\d{3}) b.+49h/i // Swiss GEN Mobile\n        ], [MODEL, [VENDOR, 'Swiss'], [TYPE, MOBILE]], [/\\b(zur\\d{3}) b/i // Swiss ZUR Tablet\n        ], [MODEL, [VENDOR, 'Swiss'], [TYPE, TABLET]], [/\\b((zeki)?tb.*\\b) b/i // Zeki Tablets\n        ], [MODEL, [VENDOR, 'Zeki'], [TYPE, TABLET]], [/\\b([yr]\\d{2}) b/i, /\\b(dragon[- ]+touch |dt)(\\w{5}) b/i // Dragon Touch Tablet\n        ], [[VENDOR, 'Dragon Touch'], MODEL, [TYPE, TABLET]], [/\\b(ns-?\\w{0,9}) b/i // Insignia Tablets\n        ], [MODEL, [VENDOR, 'Insignia'], [TYPE, TABLET]], [/\\b((nxa|next)-?\\w{0,9}) b/i // NextBook Tablets\n        ], [MODEL, [VENDOR, 'NextBook'], [TYPE, TABLET]], [/\\b(xtreme\\_)?(v(1[045]|2[015]|[3469]0|7[05])) b/i // Voice Xtreme Phones\n        ], [[VENDOR, 'Voice'], MODEL, [TYPE, MOBILE]], [/\\b(lvtel\\-)?(v1[12]) b/i // LvTel Phones\n        ], [[VENDOR, 'LvTel'], MODEL, [TYPE, MOBILE]], [/\\b(ph-1) /i // Essential PH-1\n        ], [MODEL, [VENDOR, 'Essential'], [TYPE, MOBILE]], [/\\b(v(100md|700na|7011|917g).*\\b) b/i // Envizen Tablets\n        ], [MODEL, [VENDOR, 'Envizen'], [TYPE, TABLET]], [/\\b(trio[-\\w\\. ]+) b/i // MachSpeed Tablets\n        ], [MODEL, [VENDOR, 'MachSpeed'], [TYPE, TABLET]], [/\\btu_(1491) b/i // Rotor Tablets\n        ], [MODEL, [VENDOR, 'Rotor'], [TYPE, TABLET]], [/(shield[\\w ]+) b/i // Nvidia Shield Tablets\n        ], [MODEL, [VENDOR, 'Nvidia'], [TYPE, TABLET]], [/(sprint) (\\w+)/i // Sprint Phones\n        ], [VENDOR, MODEL, [TYPE, MOBILE]], [/(kin\\.[onetw]{3})/i // Microsoft Kin\n        ], [[MODEL, /\\./g, ' '], [VENDOR, MICROSOFT], [TYPE, MOBILE]], [/droid.+; (cc6666?|et5[16]|mc[239][23]x?|vc8[03]x?)\\)/i // Zebra\n        ], [MODEL, [VENDOR, ZEBRA], [TYPE, TABLET]], [/droid.+; (ec30|ps20|tc[2-8]\\d[kx])\\)/i], [MODEL, [VENDOR, ZEBRA], [TYPE, MOBILE]], [\n        ///////////////////\n        // SMARTTVS\n        ///////////////////\n\n        /smart-tv.+(samsung)/i // Samsung\n        ], [VENDOR, [TYPE, SMARTTV]], [/hbbtv.+maple;(\\d+)/i], [[MODEL, /^/, 'SmartTV'], [VENDOR, SAMSUNG], [TYPE, SMARTTV]], [/(nux; netcast.+smarttv|lg (netcast\\.tv-201\\d|android tv))/i // LG SmartTV\n        ], [[VENDOR, LG], [TYPE, SMARTTV]], [/(apple) ?tv/i // Apple TV\n        ], [VENDOR, [MODEL, APPLE + ' TV'], [TYPE, SMARTTV]], [/crkey/i // Google Chromecast\n        ], [[MODEL, CHROME + 'cast'], [VENDOR, GOOGLE], [TYPE, SMARTTV]], [/droid.+aft(\\w+)( bui|\\))/i // Fire TV\n        ], [MODEL, [VENDOR, AMAZON], [TYPE, SMARTTV]], [/\\(dtv[\\);].+(aquos)/i, /(aquos-tv[\\w ]+)\\)/i // Sharp\n        ], [MODEL, [VENDOR, SHARP], [TYPE, SMARTTV]], [/(bravia[\\w ]+)( bui|\\))/i // Sony\n        ], [MODEL, [VENDOR, SONY], [TYPE, SMARTTV]], [/(mitv-\\w{5}) bui/i // Xiaomi\n        ], [MODEL, [VENDOR, XIAOMI], [TYPE, SMARTTV]], [/Hbbtv.*(technisat) (.*);/i // TechniSAT\n        ], [VENDOR, MODEL, [TYPE, SMARTTV]], [/\\b(roku)[\\dx]*[\\)\\/]((?:dvp-)?[\\d\\.]*)/i,\n        // Roku\n        /hbbtv\\/\\d+\\.\\d+\\.\\d+ +\\([\\w\\+ ]*; *([\\w\\d][^;]*);([^;]*)/i // HbbTV devices\n        ], [[VENDOR, trim], [MODEL, trim], [TYPE, SMARTTV]], [/\\b(android tv|smart[- ]?tv|opera tv|tv; rv:)\\b/i // SmartTV from Unidentified Vendors\n        ], [[TYPE, SMARTTV]], [\n        ///////////////////\n        // CONSOLES\n        ///////////////////\n\n        /(ouya)/i,\n        // Ouya\n        /(nintendo) ([wids3utch]+)/i // Nintendo\n        ], [VENDOR, MODEL, [TYPE, CONSOLE]], [/droid.+; (shield) bui/i // Nvidia\n        ], [MODEL, [VENDOR, 'Nvidia'], [TYPE, CONSOLE]], [/(playstation [345portablevi]+)/i // Playstation\n        ], [MODEL, [VENDOR, SONY], [TYPE, CONSOLE]], [/\\b(xbox(?: one)?(?!; xbox))[\\); ]/i // Microsoft Xbox\n        ], [MODEL, [VENDOR, MICROSOFT], [TYPE, CONSOLE]], [\n        ///////////////////\n        // WEARABLES\n        ///////////////////\n\n        /\\b(sm-[lr]\\d\\d[05][fnuw]?s?)\\b/i // Samsung Galaxy Watch\n        ], [MODEL, [VENDOR, SAMSUNG], [TYPE, WEARABLE]], [/((pebble))app/i // Pebble\n        ], [VENDOR, MODEL, [TYPE, WEARABLE]], [/(watch)(?: ?os[,\\/]|\\d,\\d\\/)[\\d\\.]+/i // Apple Watch\n        ], [MODEL, [VENDOR, APPLE], [TYPE, WEARABLE]], [/droid.+; (glass) \\d/i // Google Glass\n        ], [MODEL, [VENDOR, GOOGLE], [TYPE, WEARABLE]], [/droid.+; (wt63?0{2,3})\\)/i], [MODEL, [VENDOR, ZEBRA], [TYPE, WEARABLE]], [/(quest( \\d| pro)?)/i // Oculus Quest\n        ], [MODEL, [VENDOR, FACEBOOK], [TYPE, WEARABLE]], [\n        ///////////////////\n        // EMBEDDED\n        ///////////////////\n\n        /(tesla)(?: qtcarbrowser|\\/[-\\w\\.]+)/i // Tesla\n        ], [VENDOR, [TYPE, EMBEDDED]], [/(aeobc)\\b/i // Echo Dot\n        ], [MODEL, [VENDOR, AMAZON], [TYPE, EMBEDDED]], [\n        ////////////////////\n        // MIXED (GENERIC)\n        ///////////////////\n\n        /droid .+?; ([^;]+?)(?: bui|; wv\\)|\\) applew).+? mobile safari/i // Android Phones from Unidentified Vendors\n        ], [MODEL, [TYPE, MOBILE]], [/droid .+?; ([^;]+?)(?: bui|\\) applew).+?(?! mobile) safari/i // Android Tablets from Unidentified Vendors\n        ], [MODEL, [TYPE, TABLET]], [/\\b((tablet|tab)[;\\/]|focus\\/\\d(?!.+mobile))/i // Unidentifiable Tablet\n        ], [[TYPE, TABLET]], [/(phone|mobile(?:[;\\/]| [ \\w\\/\\.]*safari)|pda(?=.+windows ce))/i // Unidentifiable Mobile\n        ], [[TYPE, MOBILE]], [/(android[-\\w\\. ]{0,9});.+buil/i // Generic Android Device\n        ], [MODEL, [VENDOR, 'Generic']]],\n        engine: [[/windows.+ edge\\/([\\w\\.]+)/i // EdgeHTML\n        ], [VERSION, [NAME, EDGE + 'HTML']], [/webkit\\/537\\.36.+chrome\\/(?!27)([\\w\\.]+)/i // Blink\n        ], [VERSION, [NAME, 'Blink']], [/(presto)\\/([\\w\\.]+)/i,\n        // Presto\n        /(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna)\\/([\\w\\.]+)/i,\n        // WebKit/Trident/NetFront/NetSurf/Amaya/Lynx/w3m/Goanna\n        /ekioh(flow)\\/([\\w\\.]+)/i,\n        // Flow\n        /(khtml|tasman|links)[\\/ ]\\(?([\\w\\.]+)/i,\n        // KHTML/Tasman/Links\n        /(icab)[\\/ ]([23]\\.[\\d\\.]+)/i,\n        // iCab\n        /\\b(libweb)/i], [NAME, VERSION], [/rv\\:([\\w\\.]{1,9})\\b.+(gecko)/i // Gecko\n        ], [VERSION, NAME]],\n        os: [[\n        // Windows\n        /microsoft (windows) (vista|xp)/i // Windows (iTunes)\n        ], [NAME, VERSION], [/(windows (?:phone(?: os)?|mobile))[\\/ ]?([\\d\\.\\w ]*)/i // Windows Phone\n        ], [NAME, [VERSION, strMapper, windowsVersionMap]], [/windows nt 6\\.2; (arm)/i,\n        // Windows RT\n        /windows[\\/ ]?([ntce\\d\\. ]+\\w)(?!.+xbox)/i, /(?:win(?=3|9|n)|win 9x )([nt\\d\\.]+)/i], [[VERSION, strMapper, windowsVersionMap], [NAME, 'Windows']], [\n        // iOS/macOS\n        /ip[honead]{2,4}\\b(?:.*os ([\\w]+) like mac|; opera)/i,\n        // iOS\n        /(?:ios;fbsv\\/|iphone.+ios[\\/ ])([\\d\\.]+)/i, /cfnetwork\\/.+darwin/i], [[VERSION, /_/g, '.'], [NAME, 'iOS']], [/(mac os x) ?([\\w\\. ]*)/i, /(macintosh|mac_powerpc\\b)(?!.+haiku)/i // Mac OS\n        ], [[NAME, MAC_OS], [VERSION, /_/g, '.']], [\n        // Mobile OSes\n        /droid ([\\w\\.]+)\\b.+(android[- ]x86|harmonyos)/i // Android-x86/HarmonyOS\n        ], [VERSION, NAME], [\n        // Android/WebOS/QNX/Bada/RIM/Maemo/MeeGo/Sailfish OS\n        /(android|webos|qnx|bada|rim tablet os|maemo|meego|sailfish)[-\\/ ]?([\\w\\.]*)/i, /(blackberry)\\w*\\/([\\w\\.]*)/i,\n        // Blackberry\n        /(tizen|kaios)[\\/ ]([\\w\\.]+)/i,\n        // Tizen/KaiOS\n        /\\((series40);/i // Series 40\n        ], [NAME, VERSION], [/\\(bb(10);/i // BlackBerry 10\n        ], [VERSION, [NAME, BLACKBERRY]], [/(?:symbian ?os|symbos|s60(?=;)|series60)[-\\/ ]?([\\w\\.]*)/i // Symbian\n        ], [VERSION, [NAME, 'Symbian']], [/mozilla\\/[\\d\\.]+ \\((?:mobile|tablet|tv|mobile; [\\w ]+); rv:.+ gecko\\/([\\w\\.]+)/i // Firefox OS\n        ], [VERSION, [NAME, FIREFOX + ' OS']], [/web0s;.+rt(tv)/i, /\\b(?:hp)?wos(?:browser)?\\/([\\w\\.]+)/i // WebOS\n        ], [VERSION, [NAME, 'webOS']], [/watch(?: ?os[,\\/]|\\d,\\d\\/)([\\d\\.]+)/i // watchOS\n        ], [VERSION, [NAME, 'watchOS']], [\n        // Google Chromecast\n        /crkey\\/([\\d\\.]+)/i // Google Chromecast\n        ], [VERSION, [NAME, CHROME + 'cast']], [/(cros) [\\w]+(?:\\)| ([\\w\\.]+)\\b)/i // Chromium OS\n        ], [[NAME, CHROMIUM_OS], VERSION], [\n        // Smart TVs\n        /panasonic;(viera)/i,\n        // Panasonic Viera\n        /(netrange)mmh/i,\n        // Netrange\n        /(nettv)\\/(\\d+\\.[\\w\\.]+)/i,\n        // NetTV\n\n        // Console\n        /(nintendo|playstation) ([wids345portablevuch]+)/i,\n        // Nintendo/Playstation\n        /(xbox); +xbox ([^\\);]+)/i,\n        // Microsoft Xbox (360, One, X, S, Series X, Series S)\n\n        // Other\n        /\\b(joli|palm)\\b ?(?:os)?\\/?([\\w\\.]*)/i,\n        // Joli/Palm\n        /(mint)[\\/\\(\\) ]?(\\w*)/i,\n        // Mint\n        /(mageia|vectorlinux)[; ]/i,\n        // Mageia/VectorLinux\n        /([kxln]?ubuntu|debian|suse|opensuse|gentoo|arch(?= linux)|slackware|fedora|mandriva|centos|pclinuxos|red ?hat|zenwalk|linpus|raspbian|plan 9|minix|risc os|contiki|deepin|manjaro|elementary os|sabayon|linspire)(?: gnu\\/linux)?(?: enterprise)?(?:[- ]linux)?(?:-gnu)?[-\\/ ]?(?!chrom|package)([-\\w\\.]*)/i,\n        // Ubuntu/Debian/SUSE/Gentoo/Arch/Slackware/Fedora/Mandriva/CentOS/PCLinuxOS/RedHat/Zenwalk/Linpus/Raspbian/Plan9/Minix/RISCOS/Contiki/Deepin/Manjaro/elementary/Sabayon/Linspire\n        /(hurd|linux) ?([\\w\\.]*)/i,\n        // Hurd/Linux\n        /(gnu) ?([\\w\\.]*)/i,\n        // GNU\n        /\\b([-frentopcghs]{0,5}bsd|dragonfly)[\\/ ]?(?!amd|[ix346]{1,2}86)([\\w\\.]*)/i,\n        // FreeBSD/NetBSD/OpenBSD/PC-BSD/GhostBSD/DragonFly\n        /(haiku) (\\w+)/i // Haiku\n        ], [NAME, VERSION], [/(sunos) ?([\\w\\.\\d]*)/i // Solaris\n        ], [[NAME, 'Solaris'], VERSION], [/((?:open)?solaris)[-\\/ ]?([\\w\\.]*)/i,\n        // Solaris\n        /(aix) ((\\d)(?=\\.|\\)| )[\\w\\.])*/i,\n        // AIX\n        /\\b(beos|os\\/2|amigaos|morphos|openvms|fuchsia|hp-ux|serenityos)/i,\n        // BeOS/OS2/AmigaOS/MorphOS/OpenVMS/Fuchsia/HP-UX/SerenityOS\n        /(unix) ?([\\w\\.]*)/i // UNIX\n        ], [NAME, VERSION]]\n      };\n\n      /////////////////\n      // Constructor\n      ////////////////\n\n      var UAParser = function (ua, extensions) {\n        if (typeof ua === OBJ_TYPE) {\n          extensions = ua;\n          ua = undefined$1;\n        }\n        if (!(this instanceof UAParser)) {\n          return new UAParser(ua, extensions).getResult();\n        }\n        var _navigator = typeof window !== UNDEF_TYPE && window.navigator ? window.navigator : undefined$1;\n        var _ua = ua || (_navigator && _navigator.userAgent ? _navigator.userAgent : EMPTY);\n        var _uach = _navigator && _navigator.userAgentData ? _navigator.userAgentData : undefined$1;\n        var _rgxmap = extensions ? extend(regexes, extensions) : regexes;\n        var _isSelfNav = _navigator && _navigator.userAgent == _ua;\n        this.getBrowser = function () {\n          var _browser = {};\n          _browser[NAME] = undefined$1;\n          _browser[VERSION] = undefined$1;\n          rgxMapper.call(_browser, _ua, _rgxmap.browser);\n          _browser[MAJOR] = majorize(_browser[VERSION]);\n          // Brave-specific detection\n          if (_isSelfNav && _navigator && _navigator.brave && typeof _navigator.brave.isBrave == FUNC_TYPE) {\n            _browser[NAME] = 'Brave';\n          }\n          return _browser;\n        };\n        this.getCPU = function () {\n          var _cpu = {};\n          _cpu[ARCHITECTURE] = undefined$1;\n          rgxMapper.call(_cpu, _ua, _rgxmap.cpu);\n          return _cpu;\n        };\n        this.getDevice = function () {\n          var _device = {};\n          _device[VENDOR] = undefined$1;\n          _device[MODEL] = undefined$1;\n          _device[TYPE] = undefined$1;\n          rgxMapper.call(_device, _ua, _rgxmap.device);\n          if (_isSelfNav && !_device[TYPE] && _uach && _uach.mobile) {\n            _device[TYPE] = MOBILE;\n          }\n          // iPadOS-specific detection: identified as Mac, but has some iOS-only properties\n          if (_isSelfNav && _device[MODEL] == 'Macintosh' && _navigator && typeof _navigator.standalone !== UNDEF_TYPE && _navigator.maxTouchPoints && _navigator.maxTouchPoints > 2) {\n            _device[MODEL] = 'iPad';\n            _device[TYPE] = TABLET;\n          }\n          return _device;\n        };\n        this.getEngine = function () {\n          var _engine = {};\n          _engine[NAME] = undefined$1;\n          _engine[VERSION] = undefined$1;\n          rgxMapper.call(_engine, _ua, _rgxmap.engine);\n          return _engine;\n        };\n        this.getOS = function () {\n          var _os = {};\n          _os[NAME] = undefined$1;\n          _os[VERSION] = undefined$1;\n          rgxMapper.call(_os, _ua, _rgxmap.os);\n          if (_isSelfNav && !_os[NAME] && _uach && _uach.platform && _uach.platform != 'Unknown') {\n            _os[NAME] = _uach.platform.replace(/chrome os/i, CHROMIUM_OS).replace(/macos/i, MAC_OS); // backward compatibility\n          }\n\n          return _os;\n        };\n        this.getResult = function () {\n          return {\n            ua: this.getUA(),\n            browser: this.getBrowser(),\n            engine: this.getEngine(),\n            os: this.getOS(),\n            device: this.getDevice(),\n            cpu: this.getCPU()\n          };\n        };\n        this.getUA = function () {\n          return _ua;\n        };\n        this.setUA = function (ua) {\n          _ua = typeof ua === STR_TYPE && ua.length > UA_MAX_LENGTH ? trim(ua, UA_MAX_LENGTH) : ua;\n          return this;\n        };\n        this.setUA(_ua);\n        return this;\n      };\n      UAParser.VERSION = LIBVERSION;\n      UAParser.BROWSER = enumerize([NAME, VERSION, MAJOR]);\n      UAParser.CPU = enumerize([ARCHITECTURE]);\n      UAParser.DEVICE = enumerize([MODEL, VENDOR, TYPE, CONSOLE, MOBILE, SMARTTV, TABLET, WEARABLE, EMBEDDED]);\n      UAParser.ENGINE = UAParser.OS = enumerize([NAME, VERSION]);\n\n      ///////////\n      // Export\n      //////////\n\n      // check js environment\n      {\n        // nodejs env\n        if (module.exports) {\n          exports = module.exports = UAParser;\n        }\n        exports.UAParser = UAParser;\n      }\n\n      // jQuery/Zepto specific (optional)\n      // Note:\n      //   In AMD env the global scope should be kept clean, but jQuery is an exception.\n      //   jQuery always exports to global scope, unless jQuery.noConflict(true) is used,\n      //   and we should catch that.\n      var $ = typeof window !== UNDEF_TYPE && (window.jQuery || window.Zepto);\n      if ($ && !$.ua) {\n        var parser = new UAParser();\n        $.ua = parser.getResult();\n        $.ua.get = function () {\n          return parser.getUA();\n        };\n        $.ua.set = function (ua) {\n          parser.setUA(ua);\n          var result = parser.getResult();\n          for (var prop in result) {\n            $.ua[prop] = result[prop];\n          }\n        };\n      }\n    })(typeof window === 'object' ? window : commonjsGlobal);\n  })(uaParser, uaParser.exports);\n  var uaParserExports = uaParser.exports;\n\n  /* eslint-disable strict */\n\n  /**\n   * JavaScript code to detect available availability of a\n   * particular font in a browser using JavaScript and CSS.\n   *\n   * Author : Lalit Patel\n   * Website: http://www.lalit.org/lab/javascript-css-font-detect/\n   * License: Apache Software License 2.0\n   *          http://www.apache.org/licenses/LICENSE-2.0\n   * Version: 0.15 (21 Sep 2009)\n   *          Changed comparision font to default from sans-default-default,\n   *          as in FF3.0 font of child element didn't fallback\n   *          to parent element if the font is missing.\n   * Version: 0.2 (04 Mar 2012)\n   *          Comparing font against all the 3 generic font families ie,\n   *          'monospace', 'sans-serif' and 'sans'. If it doesn't match all 3\n   *          then that font is 100% not available in the system\n   * Version: 0.3 (24 Mar 2012)\n   *          Replaced sans with serif in the list of baseFonts\n   */\n\n  /**\n   * Usage: d = new Detector();\n   *        d.detect('font name');\n   */\n  var fontdetect = function Detector() {\n    // a font will be compared against all the three default fonts.\n    // and if it doesn't match all 3 then that font is not available.\n    var baseFonts = ['monospace', 'sans-serif', 'serif'];\n\n    //we use m or w because these two characters take up the maximum width.\n    // And we use a LLi so that the same matching fonts can get separated\n    var testString = \"mmmmmmmmmmlli\";\n\n    //we test using 72px font size, we may use any size. I guess larger the better.\n    var testSize = '72px';\n    var h = document.getElementsByTagName(\"body\")[0];\n\n    // create a SPAN in the document to get the width of the text we use to test\n    var s = document.createElement(\"span\");\n    s.style.fontSize = testSize;\n    s.innerHTML = testString;\n    var defaultWidth = {};\n    var defaultHeight = {};\n    for (var index in baseFonts) {\n      //get the default width for the three base fonts\n      s.style.fontFamily = baseFonts[index];\n      h.appendChild(s);\n      defaultWidth[baseFonts[index]] = s.offsetWidth; //width for the default font\n      defaultHeight[baseFonts[index]] = s.offsetHeight; //height for the defualt font\n      h.removeChild(s);\n    }\n    function detect(font) {\n      var detected = false;\n      for (var index in baseFonts) {\n        s.style.fontFamily = font + ',' + baseFonts[index]; // name of the font along with the base font for fallback.\n        h.appendChild(s);\n        var matched = s.offsetWidth != defaultWidth[baseFonts[index]] || s.offsetHeight != defaultHeight[baseFonts[index]];\n        h.removeChild(s);\n        detected = detected || matched;\n      }\n      return detected;\n    }\n    this.detect = detect;\n  };\n\n  var globalThis$1 = polyfill();\n  var murmurhash3_32_gc = murmurhash3_gcExports;\n  var UAParser = uaParserExports;\n  var Detector = fontdetect;\n  var browserData; // Global user agent browser object.\n  var fontDetective; // Global font detective object.\n\n  // ClientJS constructor which sets the browserData object and returs the client object.\n  var ClientJS$1 = function () {\n    var parser = new UAParser();\n    browserData = parser.getResult();\n    fontDetective = new Detector();\n    return this;\n  };\n\n  // ClientJS prototype which contains all methods.\n  ClientJS$1.prototype = {\n    //\n    // MAIN METHODS\n    //\n\n    // Get Software Version.  Return a string containing this software version number.\n    getSoftwareVersion: function () {\n      var version = \"0.1.11\";\n      return version;\n    },\n    // Get Browser Data.  Return an object containing browser user agent.\n    getBrowserData: function () {\n      return browserData;\n    },\n    // Get Fingerprint.  Return a 32-bit integer representing the browsers fingerprint.\n    getFingerprint: function () {\n      var bar = '|';\n      var userAgent = browserData.ua;\n      var screenPrint = this.getScreenPrint();\n      var pluginList = this.getPlugins();\n      var fontList = this.getFonts();\n      var localStorage = this.isLocalStorage();\n      var sessionStorage = this.isSessionStorage();\n      var timeZone = this.getTimeZone();\n      var language = this.getLanguage();\n      var systemLanguage = this.getSystemLanguage();\n      var cookies = this.isCookie();\n      var canvasPrint = this.getCanvasPrint();\n      var key = userAgent + bar + screenPrint + bar + pluginList + bar + fontList + bar + localStorage + bar + sessionStorage + bar + timeZone + bar + language + bar + systemLanguage + bar + cookies + bar + canvasPrint;\n      var seed = 256;\n      return murmurhash3_32_gc(key, seed);\n    },\n    // Get Custom Fingerprint.  Take a string of datapoints and eturn a 32-bit integer representing the browsers fingerprint.\n    getCustomFingerprint: function () {\n      var bar = '|';\n      var key = \"\";\n      for (var i = 0; i < arguments.length; i++) {\n        key += arguments[i] + bar;\n      }\n      return murmurhash3_32_gc(key, 256);\n    },\n    //\n    // USER AGENT METHODS\n    //\n\n    // Get User Agent.  Return a string containing unparsed user agent.\n    getUserAgent: function () {\n      return browserData.ua;\n    },\n    // Get User Agent Lower Case.  Return a lowercase string containing the user agent.\n    getUserAgentLowerCase: function () {\n      return browserData.ua.toLowerCase();\n    },\n    //\n    // BROWSER METHODS\n    //\n\n    // Get Browser.  Return a string containing the browser name.\n    getBrowser: function () {\n      return browserData.browser.name;\n    },\n    // Get Browser Version.  Return a string containing the browser version.\n    getBrowserVersion: function () {\n      return browserData.browser.version;\n    },\n    // Get Browser Major Version.  Return a string containing the major browser version.\n    getBrowserMajorVersion: function () {\n      return browserData.browser.major;\n    },\n    // Is IE.  Check if the browser is IE.\n    isIE: function () {\n      return /IE/i.test(browserData.browser.name);\n    },\n    // Is Chrome.  Check if the browser is Chrome.\n    isChrome: function () {\n      return /Chrome/i.test(browserData.browser.name);\n    },\n    // Is Firefox.  Check if the browser is Firefox.\n    isFirefox: function () {\n      return /Firefox/i.test(browserData.browser.name);\n    },\n    // Is Safari.  Check if the browser is Safari.\n    isSafari: function () {\n      return /Safari/i.test(browserData.browser.name);\n    },\n    // Is Mobile Safari.  Check if the browser is Safari.\n    isMobileSafari: function () {\n      return /Mobile\\sSafari/i.test(browserData.browser.name);\n    },\n    // Is Opera.  Check if the browser is Opera.\n    isOpera: function () {\n      return /Opera/i.test(browserData.browser.name);\n    },\n    //\n    // ENGINE METHODS\n    //\n\n    // Get Engine.  Return a string containing the browser engine.\n    getEngine: function () {\n      return browserData.engine.name;\n    },\n    // Get Engine Version.  Return a string containing the browser engine version.\n    getEngineVersion: function () {\n      return browserData.engine.version;\n    },\n    //\n    // OS METHODS\n    //\n\n    // Get OS.  Return a string containing the OS.\n    getOS: function () {\n      return browserData.os.name;\n    },\n    // Get OS Version.  Return a string containing the OS Version.\n    getOSVersion: function () {\n      return browserData.os.version;\n    },\n    // Is Windows.  Check if the OS is Windows.\n    isWindows: function () {\n      return /Windows/i.test(browserData.os.name);\n    },\n    // Is Mac.  Check if the OS is Mac.\n    isMac: function () {\n      return /Mac/i.test(browserData.os.name);\n    },\n    // Is Linux.  Check if the OS is Linux.\n    isLinux: function () {\n      return /Linux/i.test(browserData.os.name);\n    },\n    // Is Ubuntu.  Check if the OS is Ubuntu.\n    isUbuntu: function () {\n      return /Ubuntu/i.test(browserData.os.name);\n    },\n    // Is Solaris.  Check if the OS is Solaris.\n    isSolaris: function () {\n      return /Solaris/i.test(browserData.os.name);\n    },\n    //\n    // DEVICE METHODS\n    //\n\n    // Get Device.  Return a string containing the device.\n    getDevice: function () {\n      return browserData.device.model;\n    },\n    // Get Device Type.  Return a string containing the device type.\n    getDeviceType: function () {\n      return browserData.device.type;\n    },\n    // Get Device Vendor.  Return a string containing the device vendor.\n    getDeviceVendor: function () {\n      return browserData.device.vendor;\n    },\n    //\n    // CPU METHODS\n    //\n\n    // Get CPU.  Return a string containing the CPU architecture.\n    getCPU: function () {\n      return browserData.cpu.architecture;\n    },\n    //\n    // MOBILE METHODS\n    //\n\n    // Is Mobile.  Check if the browser is on a mobile device.\n    isMobile: function () {\n      // detectmobilebrowsers.com JavaScript Mobile Detection Script\n      var dataString = browserData.ua || navigator.vendor || window.opera;\n      // eslint-disable-next-line no-useless-escape\n      return /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(dataString) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(dataString.substr(0, 4));\n    },\n    // Is Mobile Major.  Check if the browser is on a major mobile device.\n    isMobileMajor: function () {\n      return this.isMobileAndroid() || this.isMobileBlackBerry() || this.isMobileIOS() || this.isMobileOpera() || this.isMobileWindows();\n    },\n    // Is Mobile.  Check if the browser is on an android mobile device.\n    isMobileAndroid: function () {\n      if (browserData.ua.match(/Android/i)) {\n        return true;\n      }\n      return false;\n    },\n    // Is Mobile Opera.  Check if the browser is on an opera mobile device.\n    isMobileOpera: function () {\n      if (browserData.ua.match(/Opera Mini/i)) {\n        return true;\n      }\n      return false;\n    },\n    // Is Mobile Windows.  Check if the browser is on a windows mobile device.\n    isMobileWindows: function () {\n      if (browserData.ua.match(/IEMobile/i)) {\n        return true;\n      }\n      return false;\n    },\n    // Is Mobile BlackBerry.  Check if the browser is on a blackberry mobile device.\n    isMobileBlackBerry: function () {\n      if (browserData.ua.match(/BlackBerry/i)) {\n        return true;\n      }\n      return false;\n    },\n    //\n    // MOBILE APPLE METHODS\n    //\n\n    // Is Mobile iOS.  Check if the browser is on an Apple iOS device.\n    isMobileIOS: function () {\n      if (browserData.ua.match(/iPhone|iPad|iPod/i)) {\n        return true;\n      }\n      return false;\n    },\n    // Is Iphone.  Check if the browser is on an Apple iPhone.\n    isIphone: function () {\n      if (browserData.ua.match(/iPhone/i)) {\n        return true;\n      }\n      return false;\n    },\n    // Is Ipad.  Check if the browser is on an Apple iPad.\n    isIpad: function () {\n      if (browserData.ua.match(/iPad/i)) {\n        return true;\n      }\n      return false;\n    },\n    // Is Ipod.  Check if the browser is on an Apple iPod.\n    isIpod: function () {\n      if (browserData.ua.match(/iPod/i)) {\n        return true;\n      }\n      return false;\n    },\n    //\n    // SCREEN METHODS\n    //\n\n    // Get Screen Print.  Return a string containing screen information.\n    getScreenPrint: function () {\n      return \"Current Resolution: \" + this.getCurrentResolution() + \", Available Resolution: \" + this.getAvailableResolution() + \", Color Depth: \" + this.getColorDepth() + \", Device XDPI: \" + this.getDeviceXDPI() + \", Device YDPI: \" + this.getDeviceYDPI();\n    },\n    // Get Color Depth.  Return a string containing the color depth.\n    getColorDepth: function () {\n      return screen.colorDepth;\n    },\n    // Get Current Resolution.  Return a string containing the current resolution.\n    getCurrentResolution: function () {\n      return screen.width + \"x\" + screen.height;\n    },\n    // Get Available Resolution.  Return a string containing the available resolution.\n    getAvailableResolution: function () {\n      return screen.availWidth + \"x\" + screen.availHeight;\n    },\n    // Get Device XPDI.  Return a string containing the device XPDI.\n    getDeviceXDPI: function () {\n      return screen.deviceXDPI;\n    },\n    // Get Device YDPI.  Return a string containing the device YDPI.\n    getDeviceYDPI: function () {\n      return screen.deviceYDPI;\n    },\n    //\n    // PLUGIN METHODS\n    //\n\n    // Get Plugins.  Return a string containing a list of installed plugins.\n    getPlugins: function () {\n      var pluginsList = \"\";\n      for (var i = 0; i < navigator.plugins.length; i++) {\n        if (i == navigator.plugins.length - 1) {\n          pluginsList += navigator.plugins[i].name;\n        } else {\n          pluginsList += navigator.plugins[i].name + \", \";\n        }\n      }\n      return pluginsList;\n    },\n    // Is Java.  Check if Java is installed.\n    isJava: function () {\n      return navigator.javaEnabled();\n    },\n    // Get Java Version.  Return a string containing the Java Version.\n    getJavaVersion: function () {\n      throw new Error('Please use client.java.js or client.js if you need this functionality!');\n    },\n    // Is Flash.  Check if Flash is installed.\n    isFlash: function () {\n      var objPlugin = navigator.plugins[\"Shockwave Flash\"];\n      if (objPlugin) {\n        return true;\n      }\n      return false;\n    },\n    // Get Flash Version.  Return a string containing the Flash Version.\n    getFlashVersion: function () {\n      throw new Error('Please use client.flash.js or client.js if you need this functionality!');\n    },\n    // Is Silverlight.  Check if Silverlight is installed.\n    isSilverlight: function () {\n      var objPlugin = navigator.plugins[\"Silverlight Plug-In\"];\n      if (objPlugin) {\n        return true;\n      }\n      return false;\n    },\n    // Get Silverlight Version.  Return a string containing the Silverlight Version.\n    getSilverlightVersion: function () {\n      if (this.isSilverlight()) {\n        var objPlugin = navigator.plugins[\"Silverlight Plug-In\"];\n        return objPlugin.description;\n      }\n      return \"\";\n    },\n    //\n    // MIME TYPE METHODS\n    //\n\n    // Is Mime Types.  Check if a mime type is installed.\n    isMimeTypes: function () {\n      if (navigator.mimeTypes && navigator.mimeTypes.length) {\n        return true;\n      }\n      return false;\n    },\n    // Get Mime Types.  Return a string containing a list of installed mime types.\n    getMimeTypes: function () {\n      var mimeTypeList = \"\";\n      if (navigator.mimeTypes) {\n        for (var i = 0; i < navigator.mimeTypes.length; i++) {\n          if (i == navigator.mimeTypes.length - 1) {\n            mimeTypeList += navigator.mimeTypes[i].description;\n          } else {\n            mimeTypeList += navigator.mimeTypes[i].description + \", \";\n          }\n        }\n      }\n      return mimeTypeList;\n    },\n    //\n    // FONT METHODS\n    //\n\n    // Is Font.  Check if a font is installed.\n    isFont: function (font) {\n      return fontDetective.detect(font);\n    },\n    // Get Fonts.  Return a string containing a list of installed fonts.\n    getFonts: function () {\n      var fontArray = [\"Abadi MT Condensed Light\", \"Adobe Fangsong Std\", \"Adobe Hebrew\", \"Adobe Ming Std\", \"Agency FB\", \"Aharoni\", \"Andalus\", \"Angsana New\", \"AngsanaUPC\", \"Aparajita\", \"Arab\", \"Arabic Transparent\", \"Arabic Typesetting\", \"Arial Baltic\", \"Arial Black\", \"Arial CE\", \"Arial CYR\", \"Arial Greek\", \"Arial TUR\", \"Arial\", \"Batang\", \"BatangChe\", \"Bauhaus 93\", \"Bell MT\", \"Bitstream Vera Serif\", \"Bodoni MT\", \"Bookman Old Style\", \"Braggadocio\", \"Broadway\", \"Browallia New\", \"BrowalliaUPC\", \"Calibri Light\", \"Calibri\", \"Californian FB\", \"Cambria Math\", \"Cambria\", \"Candara\", \"Castellar\", \"Casual\", \"Centaur\", \"Century Gothic\", \"Chalkduster\", \"Colonna MT\", \"Comic Sans MS\", \"Consolas\", \"Constantia\", \"Copperplate Gothic Light\", \"Corbel\", \"Cordia New\", \"CordiaUPC\", \"Courier New Baltic\", \"Courier New CE\", \"Courier New CYR\", \"Courier New Greek\", \"Courier New TUR\", \"Courier New\", \"DFKai-SB\", \"DaunPenh\", \"David\", \"DejaVu LGC Sans Mono\", \"Desdemona\", \"DilleniaUPC\", \"DokChampa\", \"Dotum\", \"DotumChe\", \"Ebrima\", \"Engravers MT\", \"Eras Bold ITC\", \"Estrangelo Edessa\", \"EucrosiaUPC\", \"Euphemia\", \"Eurostile\", \"FangSong\", \"Forte\", \"FrankRuehl\", \"Franklin Gothic Heavy\", \"Franklin Gothic Medium\", \"FreesiaUPC\", \"French Script MT\", \"Gabriola\", \"Gautami\", \"Georgia\", \"Gigi\", \"Gisha\", \"Goudy Old Style\", \"Gulim\", \"GulimChe\", \"GungSeo\", \"Gungsuh\", \"GungsuhChe\", \"Haettenschweiler\", \"Harrington\", \"Hei S\", \"HeiT\", \"Heisei Kaku Gothic\", \"Hiragino Sans GB\", \"Impact\", \"Informal Roman\", \"IrisUPC\", \"Iskoola Pota\", \"JasmineUPC\", \"KacstOne\", \"KaiTi\", \"Kalinga\", \"Kartika\", \"Khmer UI\", \"Kino MT\", \"KodchiangUPC\", \"Kokila\", \"Kozuka Gothic Pr6N\", \"Lao UI\", \"Latha\", \"Leelawadee\", \"Levenim MT\", \"LilyUPC\", \"Lohit Gujarati\", \"Loma\", \"Lucida Bright\", \"Lucida Console\", \"Lucida Fax\", \"Lucida Sans Unicode\", \"MS Gothic\", \"MS Mincho\", \"MS PGothic\", \"MS PMincho\", \"MS Reference Sans Serif\", \"MS UI Gothic\", \"MV Boli\", \"Magneto\", \"Malgun Gothic\", \"Mangal\", \"Marlett\", \"Matura MT Script Capitals\", \"Meiryo UI\", \"Meiryo\", \"Menlo\", \"Microsoft Himalaya\", \"Microsoft JhengHei\", \"Microsoft New Tai Lue\", \"Microsoft PhagsPa\", \"Microsoft Sans Serif\", \"Microsoft Tai Le\", \"Microsoft Uighur\", \"Microsoft YaHei\", \"Microsoft Yi Baiti\", \"MingLiU\", \"MingLiU-ExtB\", \"MingLiU_HKSCS\", \"MingLiU_HKSCS-ExtB\", \"Miriam Fixed\", \"Miriam\", \"Mongolian Baiti\", \"MoolBoran\", \"NSimSun\", \"Narkisim\", \"News Gothic MT\", \"Niagara Solid\", \"Nyala\", \"PMingLiU\", \"PMingLiU-ExtB\", \"Palace Script MT\", \"Palatino Linotype\", \"Papyrus\", \"Perpetua\", \"Plantagenet Cherokee\", \"Playbill\", \"Prelude Bold\", \"Prelude Condensed Bold\", \"Prelude Condensed Medium\", \"Prelude Medium\", \"PreludeCompressedWGL Black\", \"PreludeCompressedWGL Bold\", \"PreludeCompressedWGL Light\", \"PreludeCompressedWGL Medium\", \"PreludeCondensedWGL Black\", \"PreludeCondensedWGL Bold\", \"PreludeCondensedWGL Light\", \"PreludeCondensedWGL Medium\", \"PreludeWGL Black\", \"PreludeWGL Bold\", \"PreludeWGL Light\", \"PreludeWGL Medium\", \"Raavi\", \"Rachana\", \"Rockwell\", \"Rod\", \"Sakkal Majalla\", \"Sawasdee\", \"Script MT Bold\", \"Segoe Print\", \"Segoe Script\", \"Segoe UI Light\", \"Segoe UI Semibold\", \"Segoe UI Symbol\", \"Segoe UI\", \"Shonar Bangla\", \"Showcard Gothic\", \"Shruti\", \"SimHei\", \"SimSun\", \"SimSun-ExtB\", \"Simplified Arabic Fixed\", \"Simplified Arabic\", \"Snap ITC\", \"Sylfaen\", \"Symbol\", \"Tahoma\", \"Times New Roman Baltic\", \"Times New Roman CE\", \"Times New Roman CYR\", \"Times New Roman Greek\", \"Times New Roman TUR\", \"Times New Roman\", \"TlwgMono\", \"Traditional Arabic\", \"Trebuchet MS\", \"Tunga\", \"Tw Cen MT Condensed Extra Bold\", \"Ubuntu\", \"Umpush\", \"Univers\", \"Utopia\", \"Utsaah\", \"Vani\", \"Verdana\", \"Vijaya\", \"Vladimir Script\", \"Vrinda\", \"Webdings\", \"Wide Latin\", \"Wingdings\"];\n      var fontString = \"\";\n      for (var i = 0; i < fontArray.length; i++) {\n        if (fontDetective.detect(fontArray[i])) {\n          if (i == fontArray.length - 1) {\n            fontString += fontArray[i];\n          } else {\n            fontString += fontArray[i] + \", \";\n          }\n        }\n      }\n      return fontString;\n    },\n    //\n    // STORAGE METHODS\n    //\n\n    // Is Local Storage.  Check if local storage is enabled.\n    isLocalStorage: function () {\n      try {\n        return !!globalThis$1.localStorage;\n      } catch (e) {\n        return true; // SecurityError when referencing it means it exists\n      }\n    },\n\n    // Is Session Storage.  Check if session storage is enabled.\n    isSessionStorage: function () {\n      try {\n        return !!globalThis$1.sessionStorage;\n      } catch (e) {\n        return true; // SecurityError when referencing it means it exists\n      }\n    },\n\n    // Is Cookie.  Check if cookies are enabled.\n    isCookie: function () {\n      return navigator.cookieEnabled;\n    },\n    //\n    // TIME METHODS\n    //\n\n    // Get Time Zone.  Return a string containing the time zone.\n    getTimeZone: function () {\n      var rightNow, myNumber, formattedNumber, result;\n      rightNow = new Date();\n      myNumber = String(-(rightNow.getTimezoneOffset() / 60));\n      if (myNumber < 0) {\n        myNumber = myNumber * -1;\n        formattedNumber = (\"0\" + myNumber).slice(-2);\n        result = \"-\" + formattedNumber;\n      } else {\n        formattedNumber = (\"0\" + myNumber).slice(-2);\n        result = \"+\" + formattedNumber;\n      }\n      return result;\n    },\n    //\n    // LANGUAGE METHODS\n    //\n\n    // Get Language.  Return a string containing the user language.\n    getLanguage: function () {\n      return navigator.language;\n    },\n    // Get System Language.  Return a string containing the system language.\n    getSystemLanguage: function () {\n      return navigator.systemLanguage || window.navigator.language;\n    },\n    //\n    // CANVAS METHODS\n    //\n\n    // Is Canvas.  Check if the canvas element is enabled.\n    isCanvas: function () {\n      // create a canvas element\n      var elem = document.createElement('canvas');\n\n      // try/catch for older browsers that don't support the canvas element\n      try {\n        // check if context and context 2d exists\n        return !!(elem.getContext && elem.getContext('2d'));\n      } catch (e) {\n        // catch if older browser\n        return false;\n      }\n    },\n    // Get Canvas Print.  Return a string containing the canvas URI data.\n    getCanvasPrint: function () {\n      // create a canvas element\n      var canvas = document.createElement('canvas');\n\n      // define a context var that will be used for browsers with canvas support\n      var ctx;\n\n      // try/catch for older browsers that don't support the canvas element\n      try {\n        // attempt to give ctx a 2d canvas context value\n        ctx = canvas.getContext('2d');\n      } catch (e) {\n        // return empty string if canvas element not supported\n        return \"\";\n      }\n\n      // https://www.browserleaks.com/canvas#how-does-it-work\n      // Text with lowercase/uppercase/punctuation symbols\n      var txt = 'ClientJS,org <canvas> 1.0';\n      ctx.textBaseline = \"top\";\n      // The most common type\n      ctx.font = \"14px 'Arial'\";\n      ctx.textBaseline = \"alphabetic\";\n      ctx.fillStyle = \"#f60\";\n      ctx.fillRect(125, 1, 62, 20);\n      // Some tricks for color mixing to increase the difference in rendering\n      ctx.fillStyle = \"#069\";\n      ctx.fillText(txt, 2, 15);\n      ctx.fillStyle = \"rgba(102, 204, 0, 0.7)\";\n      ctx.fillText(txt, 4, 17);\n      return canvas.toDataURL();\n    }\n  };\n  client_base.ClientJS = ClientJS$1;\n\n  /* globals ActiveXObject:readonly, oClientCaps:readonly */\n  var version_regex_base = '^(\\\\d+)(?:\\\\.(\\\\d+)(?:\\\\.(\\\\d+)(?:[_\\\\.](\\\\d+))?)?)?';\n\n  /*\n   *           version_regex_base - see version_regex_base comment above\n   *           $                  - End of the string\n   *\n   */\n\n  var version_regex_strict = version_regex_base + '$';\n\n  /*\n   *           version_regex_base - see version_regex_base comment above\n   *           (                  - Capturing group 5\n   *             \\\\*              - Match '*'\n   *             |                - OR\n   *             \\\\+              - Match '+'\n   *           )?                 - Match zero or one time\n   *           $                  - End of string\n   *\n   */\n  var version_regex_with_family_modifier = version_regex_base + '(\\\\*|\\\\+)?$';\n\n  /** HTML attribute filter implementation */\n  var hattrs = {\n    core: ['id', 'class', 'title', 'style'],\n    applet: ['codebase', 'code', 'name', 'archive', 'object', 'width', 'height', 'alt', 'align', 'hspace', 'vspace']\n  };\n  var applet_valid_attrs = hattrs.applet.concat(hattrs.core);\n\n  // startsWith() is not supported by IE\n  if (typeof String.prototype.startsWith !== 'function') {\n    String.prototype.startsWith = function (searchString, position) {\n      position = position || 0;\n      return this.indexOf(searchString, position) === position;\n    };\n  }\n\n  // generic log function, use console.log unless it isn't available\n  // then revert to alert()\n  function log(message) {\n    if (!deployJava$1.debug) {\n      return;\n    }\n    if (console.log) {\n      console.log(message);\n    } else {\n      alert(message);\n    }\n  }\n  function showMessageBox() {\n    var message = 'Java Plug-in is not supported by this browser. <a href=\"https://java.com/dt-redirect\">More info</a>';\n    var mbStyle = 'background-color: #ffffce;text-align: left;border: solid 1px #f0c000; padding: 1.65em 1.65em .75em 0.5em; font-family: Helvetica, Arial, sans-serif; font-size: 75%; bottom:0; left:0; right:0; position:fixed; margin:auto; opacity:0.9; width:400px;';\n    var messageStyle = 'border: .85px; margin:-2.2em 0 0.55em 2.5em;';\n    var closeButtonStyle = 'margin-left:10px;font-weight:bold;float:right;font-size:22px;line-height:20px;cursor:pointer;color:red;';\n    var messageBox = '<span style=\"' + closeButtonStyle + '\" onclick=\"this.parentElement.style.display=\\'none\\';\">&times;</span><img src=\"https://java.com/js/alert_16.png\"><div style=\"' + messageStyle + '\"><p>' + message + '</p>';\n    var divTag = document.createElement('div');\n    divTag.id = 'messagebox';\n    divTag.setAttribute('style', mbStyle);\n    divTag.innerHTML = messageBox;\n    document.body.appendChild(divTag);\n  }\n\n  //checks where given version string matches query\n  //\n  //NB: assume format is correct. Can add format check later if needed\n  // from dtjava.js\n  function versionCheckEx(query, version) {\n    if (query == null || query.length == 0) return true;\n    var c = query.charAt(query.length - 1);\n\n    //if it is not explicit pattern but does not have update version then need to append *\n    if (c != '+' && c != '*' && query.indexOf('_') != -1 && c != '_') {\n      query = query + '*';\n      c = '*';\n    }\n    query = query.substring(0, query.length - 1);\n    //if query ends with \".\", \"_\" then we want to strip it to allow match of \"1.6.*\" to shorter form such as \"1.6\"\n    //TODO: add support for match of \"1.7.0*\" to \"1.7\"?\n    if (query.length > 0) {\n      var z = query.charAt(query.length - 1);\n      if (z == '.' || z == '_') {\n        query = query.substring(0, query.length - 1);\n      }\n    }\n    if (c == '*') {\n      //it is match if version starts from it\n      return version.indexOf(query) == 0;\n    } else if (c == '+') {\n      //match if query string is lexicographically smaller\n      return query <= version;\n    }\n    return false;\n  }\n  function doVersionCheck(versionPattern, noplugin) {\n    var index = 0;\n    var matchData = versionPattern.match(version_regex_with_family_modifier);\n    if (matchData != null) {\n      if (noplugin) {\n        return true;\n      }\n      // default is exact version match\n      // examples:\n      //    local machine has 1.7.0_04 only installed\n      //    exact match request is \"1.7.0_05\":  return false\n      //    family match request is \"1.7.0*\":   return true\n      //    minimum match request is \"1.6+\":    return true\n      var familyMatch = false;\n      var minMatch = false;\n      var patternArray = new Array();\n      for (var i = 1; i < matchData.length; ++i) {\n        // browser dependency here.\n        // Fx sets 'undefined', IE sets '' string for unmatched groups\n        if (typeof matchData[i] == 'string' && matchData[i] != '') {\n          patternArray[index] = matchData[i];\n          index++;\n        }\n      }\n      if (patternArray[patternArray.length - 1] == '+') {\n        // + specified in request - doing a minimum match\n        minMatch = true;\n        familyMatch = false;\n        patternArray.length--;\n      } else if (patternArray[patternArray.length - 1] == '*') {\n        // * specified in request - doing a family match\n        minMatch = false;\n        familyMatch = true;\n        patternArray.length--;\n      } else if (patternArray.length < 4) {\n        // versionPattern does not include all four version components\n        // and does not end with a star or plus, it will be treated as\n        // if it ended with a star. (family match)\n        minMatch = false;\n        familyMatch = true;\n      }\n      var list = deployJava$1.getJREs();\n      for (var j = 0; j < list.length; ++j) {\n        if (deployJava$1.compareVersionToPattern(list[j], patternArray, familyMatch, minMatch)) {\n          return true;\n        }\n      }\n      return false;\n    } else {\n      var msg = 'Invalid versionPattern passed to versionCheck: ' + versionPattern;\n      log('[versionCheck()] ' + msg);\n      alert(msg);\n      return false;\n    }\n  }\n  function isWebStartFound() {\n    return doVersionCheck('1.7.0+', false);\n  }\n  function isAbsoluteUrl(url) {\n    var protocols = ['http://', 'https://', 'file://'];\n    for (var i = 0; i < protocols.length; i++) {\n      if (url.toLowerCase().startsWith(protocols[i])) {\n        return true;\n      }\n    }\n    return false;\n  }\n  function getAbsoluteUrl(jnlp) {\n    var absoluteUrl;\n    if (isAbsoluteUrl(jnlp)) {\n      absoluteUrl = jnlp;\n    } else {\n      var location = window.location.href;\n      var pos = location.lastIndexOf('/');\n      var docbase = pos > -1 ? location.substring(0, pos + 1) : location + '/';\n      absoluteUrl = docbase + jnlp;\n    }\n    return absoluteUrl;\n  }\n  function launchWithJnlpProtocol(jnlp) {\n    document.location = 'jnlp:' + getAbsoluteUrl(jnlp);\n  }\n  function isNoPluginWebBrowser() {\n    var browser = deployJava$1.getBrowser();\n    if (browser == 'Edge' || deployJava$1.browserName2 == 'Chrome' || deployJava$1.browserName2 == 'FirefoxNoPlugin' && !doVersionCheck('1.8*', false) || deployJava$1.browserName2 == 'NoActiveX') {\n      return true;\n    }\n    return false;\n  }\n  function getWebStartLaunchIconURL() {\n    var imageUrl = '//java.com/js/webstart.png';\n    try {\n      // for http/https; use protocol less url; use http for all other protocol\n      return document.location.protocol.indexOf('http') != -1 ? imageUrl : 'https:' + imageUrl;\n    } catch (err) {\n      return 'https:' + imageUrl;\n    }\n  }\n\n  // GetJava page\n  function constructGetJavaURL(query) {\n    var getJavaURL = 'https://java.com/dt-redirect';\n    if (query == null || query.length == 0) return getJavaURL;\n    if (query.charAt(0) == '&') {\n      query = query.substring(1, query.length);\n    }\n    return getJavaURL + '?' + query;\n  }\n  function arHas(ar, attr) {\n    var len = ar.length;\n    for (var i = 0; i < len; i++) {\n      if (ar[i] === attr) return true;\n    }\n    return false;\n  }\n  function isValidAppletAttr(attr) {\n    return arHas(applet_valid_attrs, attr.toLowerCase());\n  }\n\n  /**\n   * returns true if we can enable DT plugin auto-install without chance of\n   * deadlock on cert mismatch dialog\n   *\n   * requestedJREVersion param is optional - if null, it will be\n   * treated as installing any JRE version\n   *\n   * DT plugin for 6uX only knows about JRE installer signed by SUN cert.\n   * If it encounter Oracle signed JRE installer, it will have chance of\n   * deadlock when running with IE.  This function is to guard against this.\n   */\n  function enableWithoutCertMisMatchWorkaround(requestedJREVersion) {\n    // Non-IE browser are okay\n    if ('MSIE' != deployJava$1.browserName) return true;\n\n    // if DT plugin is 10.0.0 or above, return true\n    // This is because they are aware of both SUN and Oracle signature and\n    // will not show cert mismatch dialog that might cause deadlock\n    if (deployJava$1.compareVersionToPattern(deployJava$1.getPlugin().version, ['10', '0', '0'], false, true)) {\n      return true;\n    }\n\n    // If we got there, DT plugin is 6uX\n\n    if (requestedJREVersion == null) {\n      // if requestedJREVersion is not defined - it means ANY.\n      // can not guarantee it is safe to install ANY version because 6uX\n      // DT does not know about Oracle certificates and may deadlock\n      return false;\n    }\n\n    // 6u32 or earlier JRE installer used Sun certificate\n    // 6u33+ uses Oracle's certificate\n    // DT in JRE6 does not know about Oracle certificate => can only\n    // install 6u32 or earlier without risk of deadlock\n    return !versionCheckEx('1.6.0_33+', requestedJREVersion);\n  }\n\n  /* HTML attribute filters */\n\n  var deployJava$1 = {\n    debug: null,\n    /* version of deployJava.js */\n    version: '20120801',\n    firefoxJavaVersion: null,\n    useStaticMimeType: false,\n    myInterval: null,\n    preInstallJREList: null,\n    brand: null,\n    locale: null,\n    installType: null,\n    EAInstallEnabled: false,\n    EarlyAccessURL: null,\n    // mime-type of the DeployToolkit plugin object\n    oldMimeType: 'application/npruntime-scriptable-plugin;DeploymentToolkit',\n    mimeType: 'application/java-deployment-toolkit',\n    /* location of the Java Web Start launch button graphic is right next to\n     * deployJava.js at:\n     *    https://java.com/js/webstart.png\n     *\n     * Use protocol less url here for http/https support\n     */\n    launchButtonPNG: getWebStartLaunchIconURL(),\n    browserName: null,\n    browserName2: null,\n    /**\n     * Returns an array of currently-installed JRE version strings.\n     * Version strings are of the form #.#[.#[_#]], with the function returning\n     * as much version information as it can determine, from just family\n     * versions (\"1.4.2\", \"1.5\") through the full version (\"1.5.0_06\").\n     *\n     * Detection is done on a best-effort basis.  Under some circumstances\n     * only the highest installed JRE version will be detected, and\n     * JREs older than 1.4.2 will not always be detected.\n     */\n    getJREs: function () {\n      var list = new Array();\n      if (this.isPluginInstalled()) {\n        var plugin = this.getPlugin();\n        var VMs = plugin.jvms;\n        for (var i = 0; i < VMs.getLength(); i++) {\n          list[i] = VMs.get(i).version;\n        }\n      } else {\n        var browser = this.getBrowser();\n        if (browser == 'MSIE') {\n          if (this.testUsingActiveX('9')) {\n            list[0] = '9';\n          } else if (this.testUsingActiveX('1.8.0')) {\n            list[0] = '1.8.0';\n          } else if (this.testUsingActiveX('1.7.0')) {\n            list[0] = '1.7.0';\n          } else if (this.testUsingActiveX('1.6.0')) {\n            list[0] = '1.6.0';\n          } else if (this.testUsingActiveX('1.5.0')) {\n            list[0] = '1.5.0';\n          } else if (this.testUsingActiveX('1.4.2')) {\n            list[0] = '1.4.2';\n          } else if (this.testForMSVM()) {\n            list[0] = '1.1';\n          }\n        } else if (browser == 'Netscape Family') {\n          this.getJPIVersionUsingMimeType();\n          if (this.firefoxJavaVersion != null) {\n            list[0] = this.firefoxJavaVersion;\n          } else if (this.testUsingMimeTypes('9')) {\n            list[0] = '9';\n          } else if (this.testUsingMimeTypes('1.8')) {\n            list[0] = '1.8.0';\n          } else if (this.testUsingMimeTypes('1.7')) {\n            list[0] = '1.7.0';\n          } else if (this.testUsingMimeTypes('1.6')) {\n            list[0] = '1.6.0';\n          } else if (this.testUsingMimeTypes('1.5')) {\n            list[0] = '1.5.0';\n          } else if (this.testUsingMimeTypes('1.4.2')) {\n            list[0] = '1.4.2';\n          } else if (this.browserName2 == 'Safari') {\n            if (this.testUsingPluginsArray('9')) {\n              list[0] = '9';\n            } else if (this.testUsingPluginsArray('1.8')) {\n              list[0] = '1.8.0';\n            } else if (this.testUsingPluginsArray('1.7')) {\n              list[0] = '1.7.0';\n            } else if (this.testUsingPluginsArray('1.6')) {\n              list[0] = '1.6.0';\n            } else if (this.testUsingPluginsArray('1.5')) {\n              list[0] = '1.5.0';\n            } else if (this.testUsingPluginsArray('1.4.2')) {\n              list[0] = '1.4.2';\n            }\n          }\n        }\n      }\n      if (this.debug) {\n        for (var j = 0; j < list.length; ++j) {\n          log('[getJREs()] We claim to have detected Java SE ' + list[j]);\n        }\n      }\n      return list;\n    },\n    /**\n     * Calls this.installLatestJRE() if the requested version of JRE is not installed.\n     *\n     * The requestVersion string is of the form #[.#[.#[_#]]][+|*],\n     * which includes strings such as \"1.4\", \"1.5.0*\", and \"1.6.0_02+\".\n     * A star (*) means \"any version starting within this family\" and\n     * a plus (+) means \"any version greater or equal to this\".\n     * \"1.5.0*\" * matches 1.5.0_06 but not 1.6.0_01, whereas\n     * \"1.5.0+\" matches both.\n     *\n     */\n    installJRE: function (requestVersion) {\n      log('The Deployment Toolkit installJRE()  method no longer installs JRE. It just checks ' + 'if the requested version of JRE is installed and calls installLatestJRE() otherwise. ' + 'More Information on usage of the Deployment Toolkit can be found in the ' + 'Deployment Guide at https://docs.oracle.com/javase/8/docs/technotes/guides/deploy/');\n      if (requestVersion == 'undefined' || requestVersion == null) {\n        requestVersion = '1.1';\n      }\n      var matchData = requestVersion.match(version_regex_with_family_modifier);\n      if (matchData == null) {\n        log('Invalid requestVersion argument to installJRE(): ' + requestVersion);\n        requestVersion = '1.6';\n      }\n      if (!this.versionCheck(requestVersion)) {\n        return this.installLatestJRE();\n      }\n      return true;\n    },\n    /**\n     * returns true if jre auto install for the requestedJREVersion is enabled\n     * for the local system; false otherwise\n     *\n     * requestedJREVersion param is optional - if not specified, it will be\n     * treated as installing any JRE version\n     *\n     * DT plugin for 6uX only knows about JRE installer signed by SUN cert.\n     * If it encounter Oracle signed JRE installer, it will have chance of\n     * deadlock when running with IE.  This function is to guard against this.\n     */\n    isAutoInstallEnabled: function (requestedJREVersion) {\n      // if no DT plugin, return false\n      if (!this.isPluginInstalled()) return false;\n      if (typeof requestedJREVersion == 'undefined') {\n        requestedJREVersion = null;\n      }\n      return enableWithoutCertMisMatchWorkaround(requestedJREVersion);\n    },\n    /**\n     * returns true if jre install callback is supported\n     * callback support is added since dt plugin version 10.2.0 or above\n     */\n    isCallbackSupported: function () {\n      return this.isPluginInstalled() && this.compareVersionToPattern(this.getPlugin().version, ['10', '2', '0'], false, true);\n    },\n    /**\n     * Redirects the browser window to the java.com JRE installation page,\n     * and (if possible) redirects back to the current URL upon successful\n     * installation, if the installed version of JRE is below the security\n     * baseline or Deployment Toolkit plugin is not installed or disabled.\n     *\n     */\n    installLatestJRE: function () {\n      log(\"The Deployment Toolkit installLatestJRE() method no longer installs JRE. If user's version of \" + 'Java is below the security baseline it redirects user to java.com to get an updated JRE. ' + 'More Information on usage of the Deployment Toolkit can be found in the Deployment Guide at ' + '://docs.oracle.com/javase/8/docs/technotes/guides/deploy/');\n      if (!this.isPluginInstalled() || !this.getPlugin().installLatestJRE()) {\n        var browser = this.getBrowser();\n        var platform = navigator.platform.toLowerCase();\n        if (browser == 'MSIE') {\n          return this.IEInstall();\n        } else if (browser == 'Netscape Family' && platform.indexOf('win32') != -1) {\n          return this.FFInstall();\n        } else {\n          location.href = constructGetJavaURL((this.locale != null ? '&locale=' + this.locale : '') + (this.brand != null ? '&brand=' + this.brand : ''));\n        }\n        // we have to return false although there may be an install\n        // in progress now, when complete it may go to return page\n        return false;\n      }\n      return true;\n    },\n    /**\n     * Ensures that an appropriate JRE is installed and then runs an applet.\n     * minimumVersion is of the form #[.#[.#[_#]]], and is the minimum\n     * JRE version necessary to run this applet.  minimumVersion is optional,\n     * defaulting to the value \"1.1\" (which matches any JRE).\n     * If an equal or greater JRE is detected, runApplet() will call\n     * writeAppletTag(attributes, parameters) to output the applet tag,\n     * otherwise it will call installJRE(minimumVersion + '+').\n     *\n     * After installJRE() is called, the script will attempt to detect that the\n     * JRE installation has completed and begin running the applet, but there\n     * are circumstances (such as when the JRE installation requires a browser\n     * restart) when this cannot be fulfilled.\n     *\n     * As with writeAppletTag(), this function should only be called prior to\n     * the web page being completely rendered.  Note that version wildcards\n     * (star (*) and plus (+)) are not supported, and including them in the\n     * minimumVersion will result in an error message.\n     */\n    runApplet: function (attributes, parameters, minimumVersion) {\n      if (minimumVersion == 'undefined' || minimumVersion == null) {\n        minimumVersion = '1.1';\n      }\n      var matchData = minimumVersion.match(version_regex_strict);\n      if (matchData != null) {\n        var browser = this.getBrowser();\n        if (browser != '?') {\n          if (isNoPluginWebBrowser()) {\n            var readyStateCheck = setInterval(function () {\n              if (document.readyState == 'complete') {\n                clearInterval(readyStateCheck);\n                showMessageBox();\n              }\n            }, 15);\n            log('[runApplet()] Java Plug-in is not supported by this browser');\n            return;\n          }\n          if (this.versionCheck(minimumVersion + '+')) {\n            this.writeAppletTag(attributes, parameters);\n          } else if (this.installJRE(minimumVersion + '+')) {\n            this.writeAppletTag(attributes, parameters);\n          }\n        } else {\n          // for unknown or Safari - just try to show applet\n          this.writeAppletTag(attributes, parameters);\n        }\n      } else {\n        log('[runApplet()] Invalid minimumVersion argument to runApplet():' + minimumVersion);\n      }\n    },\n    /**\n     * Outputs an applet tag with the specified attributes and parameters, where\n     * both attributes and parameters are associative arrays.  Each key/value\n     * pair in attributes becomes an attribute of the applet tag itself, while\n     * key/value pairs in parameters become <PARAM> tags.  No version checking\n     * or other special behaviors are performed; the tag is simply written to\n     * the page using document.writeln().\n     *\n     * As document.writeln() is generally only safe to use while the page is\n     * being rendered, you should never call this function after the page\n     * has been completed.\n     */\n    writeAppletTag: function (attributes, parameters) {\n      var startApplet = '<' + 'applet ';\n      var params = '';\n      var endApplet = '<' + '/' + 'applet' + '>';\n      var addCodeAttribute = true;\n      if (null == parameters || typeof parameters != 'object') {\n        parameters = new Object();\n      }\n      for (var attribute in attributes) {\n        if (!isValidAppletAttr(attribute)) {\n          parameters[attribute] = attributes[attribute];\n        } else {\n          startApplet += ' ' + attribute + '=\"' + attributes[attribute] + '\"';\n          if (attribute == 'code') {\n            addCodeAttribute = false;\n          }\n        }\n      }\n      var codebaseParam = false;\n      for (var parameter in parameters) {\n        if (parameter == 'codebase_lookup') {\n          codebaseParam = true;\n        }\n        // Originally, parameter 'object' was used for serialized\n        // applets, later, to avoid confusion with object tag in IE\n        // the 'java_object' was added.  Plugin supports both.\n        if (parameter == 'object' || parameter == 'java_object' || parameter == 'java_code') {\n          addCodeAttribute = false;\n        }\n        params += '<param name=\"' + parameter + '\" value=\"' + parameters[parameter] + '\"/>';\n      }\n      if (!codebaseParam) {\n        params += '<param name=\"codebase_lookup\" value=\"false\"/>';\n      }\n      if (addCodeAttribute) {\n        startApplet += ' code=\"dummy\"';\n      }\n      startApplet += '>';\n      document.write(startApplet + '\\n' + params + '\\n' + endApplet);\n    },\n    /**\n     * Returns true if there is a matching JRE version currently installed\n     * (among those detected by getJREs()).  The versionPattern string is\n     * of the form #[.#[.#[_#]]][+|*], which includes strings such as \"1.4\",\n     * \"1.5.0*\", and \"1.6.0_02+\".\n     * A star (*) means \"any version within this family\" and a plus (+) means\n     * \"any version greater or equal to the specified version\".  \"1.5.0*\"\n     * matches 1.5.0_06 but not 1.6.0_01, whereas \"1.5.0+\" matches both.\n     *\n     * If the versionPattern does not include all four version components\n     * but does not end with a star or plus, it will be treated as if it\n     * ended with a star.  \"1.5\" is exactly equivalent to \"1.5*\", and will\n     * match any version number beginning with \"1.5\".\n     *\n     * If getJREs() is unable to detect the precise version number, a match\n     * could be ambiguous.  For example if getJREs() detects \"1.5\", there is\n     * no way to know whether the JRE matches \"1.5.0_06+\".  versionCheck()\n     * compares only as much of the version information as could be detected,\n     * so versionCheck(\"1.5.0_06+\") would return true in in this case.\n     *\n     * Invalid versionPattern will result in a JavaScript error alert.\n     * versionPatterns which are valid but do not match any existing JRE\n     * release (e.g. \"32.65+\") will always return false.\n     */\n    versionCheck: function (versionPattern) {\n      return doVersionCheck(versionPattern, isNoPluginWebBrowser());\n    },\n    /**\n     * Returns true if an installation of Java Web Start of the specified\n     * minimumVersion can be detected.  minimumVersion is optional, and\n     * if not specified, '1.4.2' will be used.\n     * (Versions earlier than 1.4.2 may not be detected.)\n     */\n    isWebStartInstalled: function (minimumVersion) {\n      if (isNoPluginWebBrowser()) {\n        return true;\n      }\n      var browser = this.getBrowser();\n      if (browser == '?') {\n        // we really don't know - better to try to use it than reinstall\n        return true;\n      }\n      if (minimumVersion == 'undefined' || minimumVersion == null) {\n        minimumVersion = '1.4.2';\n      }\n      var retval = false;\n      var matchData = minimumVersion.match(version_regex_strict);\n      if (matchData != null) {\n        retval = this.versionCheck(minimumVersion + '+');\n      } else {\n        log('[isWebStartInstaller()] Invalid minimumVersion argument to isWebStartInstalled(): ' + minimumVersion);\n        retval = this.versionCheck('1.4.2+');\n      }\n      return retval;\n    },\n    // obtain JPI version using navigator.mimeTypes array\n    // if found, set the version to this.firefoxJavaVersion\n    getJPIVersionUsingMimeType: function () {\n      var i, s, m;\n      // Walk through the full list of mime types.\n      // Try static MIME type first (for JRE versions earlier than JRE 9)\n      for (i = 0; i < navigator.mimeTypes.length; ++i) {\n        s = navigator.mimeTypes[i].type;\n        m = s.match(/^application\\/x-java-applet;jpi-version=(.*)$/);\n        if (m != null) {\n          this.firefoxJavaVersion = m[1];\n          this.useStaticMimeType = true;\n          return;\n        }\n      }\n      for (i = 0; i < navigator.mimeTypes.length; ++i) {\n        s = navigator.mimeTypes[i].type;\n        m = s.match(/^application\\/x-java-applet;version=(.*)$/);\n        if (m != null) {\n          if (this.firefoxJavaVersion == null || this.compareVersions(m[1], this.firefoxJavaVersion)) {\n            this.firefoxJavaVersion = m[1];\n          }\n        }\n      }\n    },\n    // launch the specified JNLP application using the passed in jnlp file\n    // the jnlp file does not need to have a codebase\n    // this requires JRE 7 or above to work\n    // if machine has no JRE 7 or above, we will try to auto-install and then launch\n    // (function will return false if JRE auto-install failed)\n    launchWebStartApplication: function (jnlp) {\n      this.getJPIVersionUsingMimeType();\n\n      // make sure we are JRE 7 or above\n      if (isWebStartFound() == false) {\n        if (isNoPluginWebBrowser()) {\n          launchWithJnlpProtocol(jnlp);\n        } else if (this.installJRE('1.7.0+') == false || this.isWebStartInstalled('1.7.0') == false) {\n          return false;\n        }\n      }\n      var jnlpDocbase = null;\n\n      // use document.documentURI for docbase\n      if (document.documentURI) {\n        jnlpDocbase = document.documentURI;\n      }\n\n      // fallback to document.URL if documentURI not available\n      if (jnlpDocbase == null) {\n        jnlpDocbase = document.URL;\n      }\n      var browser = this.getBrowser();\n      var launchTag;\n      if (browser == 'MSIE') {\n        launchTag = '<' + 'object classid=\"clsid:8AD9C840-044E-11D1-B3E9-00805F499D93\" ' + 'width=\"0\" height=\"0\">' + '<' + 'PARAM name=\"launchjnlp\" value=\"' + jnlp + '\"' + '>' + '<' + 'PARAM name=\"docbase\" value=\"' + encodeURIComponent(jnlpDocbase) + '\"' + '>' + '<' + '/' + 'object' + '>';\n      } else if (browser == 'Netscape Family') {\n        launchTag = '<embed type=\"' + (this.useStaticMimeType ? 'application/x-java-applet;jpi-version=' : 'application/x-java-applet;version=') + this.firefoxJavaVersion + '\" ' + 'width=\"0\" height=\"0\" ' + 'launchjnlp=\"' + jnlp + '\"' + 'docbase=\"' + encodeURIComponent(jnlpDocbase) + '\"' + ' />';\n      }\n      if (document.body == 'undefined' || document.body == null) {\n        document.write(launchTag);\n        // go back to original page, otherwise current page becomes blank\n        document.location = jnlpDocbase;\n      } else {\n        var divTag = document.createElement('div');\n        divTag.id = 'div1';\n        divTag.style.position = 'relative';\n        divTag.style.left = '-10000px';\n        divTag.style.margin = '0px auto';\n        divTag.className = 'dynamicDiv';\n        divTag.innerHTML = launchTag;\n        document.body.appendChild(divTag);\n      }\n    },\n    createWebStartLaunchButtonEx: function (jnlp) {\n      var url = \"javascript:deployJava.launchWebStartApplication('\" + jnlp + \"');\";\n      document.write('<' + 'a href=\"' + url + '\" onMouseOver=\"window.status=\\'\\'; ' + 'return true;\"><' + 'img ' + 'src=\"' + this.launchButtonPNG + '\" ' + 'border=\"0\" /><' + '/' + 'a' + '>');\n    },\n    /**\n     * Outputs a launch button for the specified JNLP URL.  When clicked, the\n     * button will ensure that an appropriate JRE is installed and then launch\n     * the JNLP application.  minimumVersion is of the form #[.#[.#[_#]]], and\n     * is the minimum JRE version necessary to run this JNLP application.\n     * minimumVersion is optional, and if it is not specified, '1.4.2'\n     * will be used.\n     * If an appropriate JRE or Web Start installation is detected,\n     * the JNLP application will be launched, otherwise installLatestJRE()\n     * will be called.\n     *\n     * After installLatestJRE() is called, the script will attempt to detect\n     * that the JRE installation has completed and launch the JNLP application,\n     * but there are circumstances (such as when the JRE installation\n     * requires a browser restart) when this cannot be fulfilled.\n     */\n    createWebStartLaunchButton: function (jnlp, minimumVersion) {\n      var url = 'javascript:' + 'if (!deployJava.isWebStartInstalled(&quot;' + minimumVersion + '&quot;)) {' + 'if (deployJava.installLatestJRE()) {' + 'if (deployJava.launch(&quot;' + jnlp + '&quot;)) {}' + '}' + '} else {' + 'if (deployJava.launch(&quot;' + jnlp + '&quot;)) {}' + '}';\n      document.write('<' + 'a href=\"' + url + '\" onMouseOver=\"window.status=\\'\\'; ' + 'return true;\"><' + 'img ' + 'src=\"' + this.launchButtonPNG + '\" ' + 'border=\"0\" /><' + '/' + 'a' + '>');\n    },\n    /**\n     * Launch a JNLP application, (using the plugin if available)\n     */\n    launch: function (jnlp) {\n      /*\n       * Using the plugin to launch Java Web Start is disabled for the time being\n       */\n      document.location = jnlp;\n      return true;\n    },\n    /**\n     * Launch a JNLP application, using JNLP protocol handler\n     */\n    launchEx: function (jnlp) {\n      launchWithJnlpProtocol(jnlp);\n      return true;\n    },\n    /*\n     * returns true if the ActiveX or XPI plugin is installed\n     */\n    isPluginInstalled: function () {\n      var plugin = this.getPlugin();\n      if (plugin && plugin.jvms) {\n        return true;\n      } else {\n        return false;\n      }\n    },\n    /*\n     * returns true if the plugin is installed and AutoUpdate is enabled\n     */\n    isAutoUpdateEnabled: function () {\n      if (this.isPluginInstalled()) {\n        return this.getPlugin().isAutoUpdateEnabled();\n      }\n      return false;\n    },\n    /*\n     * sets AutoUpdate on if plugin is installed\n     */\n    setAutoUpdateEnabled: function () {\n      if (this.isPluginInstalled()) {\n        return this.getPlugin().setAutoUpdateEnabled();\n      }\n      return false;\n    },\n    /*\n     * sets the preferred install type : null, online, kernel\n     */\n    setInstallerType: function (_type) {\n      log('The Deployment Toolkit no longer installs JRE. Method setInstallerType() is no-op. ' + 'More Information on usage of the Deployment Toolkit can be found in the Deployment Guide at ' + '://docs.oracle.com/javase/8/docs/technotes/guides/deploy/');\n      return false;\n    },\n    /*\n     * sets additional package list - to be used by kernel installer\n     */\n    setAdditionalPackages: function (_packageList) {\n      log('The Deployment Toolkit no longer installs JRE. Method setAdditionalPackages() is no-op. ' + 'More Information on usage of the Deployment Toolkit can be found in the Deployment Guide at ' + '://docs.oracle.com/javase/8/docs/technotes/guides/deploy/');\n      return false;\n    },\n    /*\n     * sets preference to install Early Access versions if available\n     */\n    setEarlyAccess: function (enabled) {\n      this.EAInstallEnabled = enabled;\n    },\n    /*\n     * Determines if the next generation plugin (Plugin II) is default\n     */\n    isPlugin2: function () {\n      if (this.isPluginInstalled()) {\n        if (this.versionCheck('1.6.0_10+')) {\n          try {\n            return this.getPlugin().isPlugin2();\n          } catch (err) {\n            // older plugin w/o isPlugin2() function -\n          }\n        }\n      }\n      return false;\n    },\n    //support native DT plugin?\n    allowPlugin: function () {\n      this.getBrowser();\n\n      // Safari and Opera browsers find the plugin but it\n      // doesn't work, so until we can get it to work - don't use it.\n      var ret = 'Safari' != this.browserName2 && 'Opera' != this.browserName2;\n      return ret;\n    },\n    getPlugin: function () {\n      this.refresh();\n      var ret = null;\n      if (this.allowPlugin()) {\n        ret = document.getElementById('deployJavaPlugin');\n      }\n      return ret;\n    },\n    compareVersionToPattern: function (version, patternArray, familyMatch, minMatch) {\n      if (version == undefined || patternArray == undefined) {\n        return false;\n      }\n      var matchData = version.match(version_regex_strict);\n      if (matchData != null) {\n        var index = 0;\n        var result = new Array();\n        for (var i = 1; i < matchData.length; ++i) {\n          if (typeof matchData[i] == 'string' && matchData[i] != '') {\n            result[index] = matchData[i];\n            index++;\n          }\n        }\n        var l = Math.min(result.length, patternArray.length);\n\n        // result contains what is installed in local machine\n        // patternArray is what is being requested by application\n        if (minMatch) {\n          // minimum version match, return true if what we have (installed)\n          // is greater or equal to what is requested.  false otherwise.\n          for (var j = 0; j < l; ++j) {\n            var resultTemp = parseInt(result[j]);\n            var patternArrayTemp = parseInt(patternArray[j]);\n            if (resultTemp < patternArrayTemp) {\n              return false;\n            } else if (resultTemp > patternArrayTemp) {\n              return true;\n            }\n          }\n          return true;\n        } else {\n          for (var k = 0; k < l; ++k) {\n            if (result[k] != patternArray[k]) return false;\n          }\n          if (familyMatch) {\n            // family match - return true as long as what we have\n            // (installed) matches up to the request pattern\n            return true;\n          } else {\n            // exact match\n            // result and patternArray needs to have exact same content\n            return result.length == patternArray.length;\n          }\n        }\n      } else {\n        return false;\n      }\n    },\n    getBrowser: function () {\n      if (this.browserName == null) {\n        var browser = navigator.userAgent.toLowerCase();\n        log('[getBrowser()] navigator.userAgent.toLowerCase() -> ' + browser);\n\n        // order is important here.  Safari userAgent contains mozilla,\n        // IE 11 userAgent contains mozilla and netscape,\n        // and Chrome userAgent contains both mozilla and safari.\n        if (browser.indexOf('edge') != -1) {\n          this.browserName = 'Edge';\n          this.browserName2 = 'Edge';\n        } else if (browser.indexOf('msie') != -1 && browser.indexOf('opera') == -1) {\n          this.browserName = 'MSIE';\n          this.browserName2 = 'MSIE';\n        } else if (browser.indexOf('trident') != -1 || browser.indexOf('Trident') != -1) {\n          this.browserName = 'MSIE';\n          this.browserName2 = 'MSIE';\n          // For Windows 8 and Windows 8.1 check for Metro mode\n          if (browser.indexOf('windows nt 6.3') != -1 || browser.indexOf('windows nt 6.2') != -1) {\n            try {\n              // try to create a known ActiveX object\n              new ActiveXObject('htmlfile');\n            } catch (e) {\n              // ActiveX is disabled\n              this.browserName2 = 'NoActiveX';\n            }\n          }\n        } else if (browser.indexOf('iphone') != -1) {\n          // this included both iPhone and iPad\n          this.browserName = 'Netscape Family';\n          this.browserName2 = 'iPhone';\n        } else if (browser.indexOf('firefox') != -1 && browser.indexOf('opera') == -1) {\n          this.browserName = 'Netscape Family';\n          if (this.isPluginInstalled()) {\n            this.browserName2 = 'Firefox';\n          } else {\n            this.browserName2 = 'FirefoxNoPlugin';\n          }\n        } else if (browser.indexOf('chrome') != -1) {\n          this.browserName = 'Netscape Family';\n          this.browserName2 = 'Chrome';\n        } else if (browser.indexOf('safari') != -1) {\n          this.browserName = 'Netscape Family';\n          this.browserName2 = 'Safari';\n        } else if (browser.indexOf('mozilla') != -1 && browser.indexOf('opera') == -1) {\n          this.browserName = 'Netscape Family';\n          this.browserName2 = 'Other';\n        } else if (browser.indexOf('opera') != -1) {\n          this.browserName = 'Netscape Family';\n          this.browserName2 = 'Opera';\n        } else {\n          this.browserName = '?';\n          this.browserName2 = 'unknown';\n        }\n        log('[getBrowser()] Detected browser name:' + this.browserName + ', ' + this.browserName2);\n      }\n      return this.browserName;\n    },\n    testUsingActiveX: function (version) {\n      var objectName = 'JavaWebStart.isInstalled.' + version + '.0';\n\n      // we need the typeof check here for this to run on FF/Chrome\n      // the check needs to be in place here - cannot even pass ActiveXObject\n      // as arg to another function\n      if (typeof ActiveXObject == 'undefined' || !ActiveXObject) {\n        log('[testUsingActiveX()] Browser claims to be IE, but no ActiveXObject object?');\n        return false;\n      }\n      try {\n        return new ActiveXObject(objectName) != null;\n      } catch (exception) {\n        return false;\n      }\n    },\n    testForMSVM: function () {\n      var clsid = '{08B0E5C0-4FCB-11CF-AAA5-00401C608500}';\n      if (typeof oClientCaps != 'undefined') {\n        var v = oClientCaps.getComponentVersion(clsid, 'ComponentID');\n        if (v == '' || v == '5,0,5000,0') {\n          return false;\n        } else {\n          return true;\n        }\n      } else {\n        return false;\n      }\n    },\n    testUsingMimeTypes: function (version) {\n      if (!navigator.mimeTypes) {\n        log('[testUsingMimeTypes()] Browser claims to be Netscape family, but no mimeTypes[] array?');\n        return false;\n      }\n      for (var i = 0; i < navigator.mimeTypes.length; ++i) {\n        var s = navigator.mimeTypes[i].type;\n        var m = s.match(/^application\\/x-java-applet\\x3Bversion=(1\\.8|1\\.7|1\\.6|1\\.5|1\\.4\\.2)$/);\n        if (m != null) {\n          if (this.compareVersions(m[1], version)) {\n            return true;\n          }\n        }\n      }\n      return false;\n    },\n    testUsingPluginsArray: function (version) {\n      if (!navigator.plugins || !navigator.plugins.length) {\n        return false;\n      }\n      var platform = navigator.platform.toLowerCase();\n      for (var i = 0; i < navigator.plugins.length; ++i) {\n        var s = navigator.plugins[i].description;\n        if (s.search(/^Java Switchable Plug-in (Cocoa)/) != -1) {\n          // Safari on MAC\n          if (this.compareVersions('1.5.0', version)) {\n            return true;\n          }\n        } else if (s.search(/^Java/) != -1) {\n          if (platform.indexOf('win') != -1) {\n            // still can't tell - opera, safari on windows\n            // return true for 1.5.0 and 1.6.0\n            if (this.compareVersions('1.5.0', version) || this.compareVersions('1.6.0', version)) {\n              return true;\n            }\n          }\n        }\n      }\n      // if above dosn't work on Apple or Windows, just allow 1.5.0\n      if (this.compareVersions('1.5.0', version)) {\n        return true;\n      }\n      return false;\n    },\n    IEInstall: function () {\n      location.href = constructGetJavaURL((this.locale != null ? '&locale=' + this.locale : '') + (this.brand != null ? '&brand=' + this.brand : ''));\n\n      // should not actually get here\n      return false;\n    },\n    done: function (_name, _result) {},\n    FFInstall: function () {\n      location.href = constructGetJavaURL((this.locale != null ? '&locale=' + this.locale : '') + (this.brand != null ? '&brand=' + this.brand : '') + (this.installType != null ? '&type=' + this.installType : ''));\n\n      // should not actually get here\n      return false;\n    },\n    // return true if 'installed' (considered as a JRE version string) is\n    // greater than or equal to 'required' (again, a JRE version string).\n    compareVersions: function (installed, required) {\n      var a = installed.split('.');\n      var b = required.split('.');\n      for (var i = 0; i < a.length; ++i) {\n        a[i] = Number(a[i]);\n      }\n      for (var j = 0; j < b.length; ++j) {\n        b[j] = Number(b[j]);\n      }\n      if (a.length == 2) {\n        a[2] = 0;\n      }\n      if (a[0] > b[0]) return true;\n      if (a[0] < b[0]) return false;\n      if (a[1] > b[1]) return true;\n      if (a[1] < b[1]) return false;\n      if (a[2] > b[2]) return true;\n      if (a[2] < b[2]) return false;\n      return true;\n    },\n    enableAlerts: function () {\n      // reset this so we can show the browser detection\n      this.browserName = null;\n      this.debug = true;\n    },\n    poll: function () {\n      this.refresh();\n      var postInstallJREList = this.getJREs();\n      if (this.preInstallJREList.length == 0 && postInstallJREList.length != 0) {\n        clearInterval(this.myInterval);\n      }\n      if (this.preInstallJREList.length != 0 && postInstallJREList.length != 0 && this.preInstallJREList[0] != postInstallJREList[0]) {\n        clearInterval(this.myInterval);\n      }\n    },\n    writePluginTag: function () {\n      var browser = this.getBrowser();\n      if (browser == 'MSIE') {\n        document.write('<' + 'object classid=\"clsid:CAFEEFAC-DEC7-0000-0001-ABCDEFFEDCBA\" ' + 'id=\"deployJavaPlugin\" width=\"0\" height=\"0\">' + '<' + '/' + 'object' + '>');\n      } else if (browser == 'Netscape Family' && this.allowPlugin()) {\n        this.writeEmbedTag();\n      }\n    },\n    refresh: function () {\n      navigator.plugins.refresh(false);\n      var browser = this.getBrowser();\n      if (browser == 'Netscape Family' && this.allowPlugin()) {\n        var plugin = document.getElementById('deployJavaPlugin');\n        // only do this again if no plugin\n        if (plugin == null) {\n          this.writeEmbedTag();\n        }\n      }\n    },\n    writeEmbedTag: function () {\n      var written = false;\n      if (navigator.mimeTypes != null) {\n        for (var i = 0; i < navigator.mimeTypes.length; i++) {\n          if (navigator.mimeTypes[i].type == this.mimeType) {\n            if (navigator.mimeTypes[i].enabledPlugin) {\n              document.write('<' + 'embed id=\"deployJavaPlugin\" type=\"' + this.mimeType + '\" hidden=\"true\" />');\n              written = true;\n            }\n          }\n        }\n        // if we ddn't find new mimeType, look for old mimeType\n        if (!written) for (var j = 0; j < navigator.mimeTypes.length; j++) {\n          if (navigator.mimeTypes[j].type == this.oldMimeType) {\n            if (navigator.mimeTypes[j].enabledPlugin) {\n              document.write('<' + 'embed id=\"deployJavaPlugin\" type=\"' + this.oldMimeType + '\" hidden=\"true\" />');\n            }\n          }\n        }\n      }\n    }\n  }; // deployJava object\n\n  deployJava$1.writePluginTag();\n  if (deployJava$1.locale == null) {\n    var loc = null;\n    if (loc == null) try {\n      loc = navigator.userLanguage;\n    } catch (err) {\n      // ignore error\n    }\n    if (loc == null) try {\n      loc = navigator.systemLanguage;\n    } catch (err) {\n      // ignore error\n    }\n    if (loc == null) try {\n      loc = navigator.language;\n    } catch (err) {\n      // ignore error\n    }\n    if (loc != null) {\n      loc.replace('-', '_');\n      deployJava$1.locale = loc;\n    }\n  }\n  var deployJava_1 = deployJava$1;\n\n  var deployJava = deployJava_1;\n\n  // Get Java Version.  Return a string containing the Java Version.\n  var javaDetection = function getJavaVersion() {\n    return deployJava.getJREs().toString();\n  };\n\n  /*!    SWFObject v2.3.20130521 <http://github.com/swfobject/swfobject>\n      is released under the MIT License <http://www.opensource.org/licenses/mit-license.php>\n  */\n\n  /* global ActiveXObject: false */\n  /* eslint-disable strict */\n\n  var UNDEF = \"undefined\",\n    OBJECT = \"object\",\n    SHOCKWAVE_FLASH = \"Shockwave Flash\",\n    SHOCKWAVE_FLASH_AX = \"ShockwaveFlash.ShockwaveFlash\",\n    FLASH_MIME_TYPE = \"application/x-shockwave-flash\",\n    EXPRESS_INSTALL_ID = \"SWFObjectExprInst\",\n    ON_READY_STATE_CHANGE = \"onreadystatechange\",\n    win = window,\n    doc = document,\n    nav = navigator,\n    plugin = false,\n    domLoadFnArr = [],\n    regObjArr = [],\n    objIdArr = [],\n    listenersArr = [],\n    storedFbContent,\n    storedFbContentId,\n    storedCallbackFn,\n    storedCallbackObj,\n    isDomLoaded = false,\n    isExpressInstallActive = false,\n    dynamicStylesheet,\n    dynamicStylesheetMedia,\n    autoHideShow = true,\n    encodeURIEnabled = false,\n    /* Centralized function for browser feature detection\n        - User agent string detection is only used when no good alternative is possible\n        - Is executed directly for optimal performance\n    */\n    ua = function () {\n      var w3cdom = typeof doc.getElementById !== UNDEF && typeof doc.getElementsByTagName !== UNDEF && typeof doc.createElement !== UNDEF,\n        u = nav.userAgent.toLowerCase(),\n        p = nav.platform.toLowerCase(),\n        windows = p ? /win/.test(p) : /win/.test(u),\n        mac = p ? /mac/.test(p) : /mac/.test(u),\n        webkit = /webkit/.test(u) ? parseFloat(u.replace(/^.*webkit\\/(\\d+(\\.\\d+)?).*$/, \"$1\")) : false,\n        // returns either the webkit version or false if not webkit\n        ie = nav.appName === \"Microsoft Internet Explorer\",\n        playerVersion = [0, 0, 0],\n        d = null;\n      if (typeof nav.plugins !== UNDEF && typeof nav.plugins[SHOCKWAVE_FLASH] === OBJECT) {\n        d = nav.plugins[SHOCKWAVE_FLASH].description;\n        // nav.mimeTypes[\"application/x-shockwave-flash\"].enabledPlugin indicates whether plug-ins are enabled or disabled in Safari 3+\n        if (d && typeof nav.mimeTypes !== UNDEF && nav.mimeTypes[FLASH_MIME_TYPE] && nav.mimeTypes[FLASH_MIME_TYPE].enabledPlugin) {\n          plugin = true;\n          ie = false; // cascaded feature detection for Internet Explorer\n          d = d.replace(/^.*\\s+(\\S+\\s+\\S+$)/, \"$1\");\n          playerVersion[0] = toInt(d.replace(/^(.*)\\..*$/, \"$1\"));\n          playerVersion[1] = toInt(d.replace(/^.*\\.(.*)\\s.*$/, \"$1\"));\n          playerVersion[2] = /[a-zA-Z]/.test(d) ? toInt(d.replace(/^.*[a-zA-Z]+(.*)$/, \"$1\")) : 0;\n        }\n      } else if (typeof win.ActiveXObject !== UNDEF) {\n        try {\n          var a = new ActiveXObject(SHOCKWAVE_FLASH_AX);\n          if (a) {\n            // a will return null when ActiveX is disabled\n            d = a.GetVariable(\"$version\");\n            if (d) {\n              ie = true; // cascaded feature detection for Internet Explorer\n              d = d.split(\" \")[1].split(\",\");\n              playerVersion = [toInt(d[0]), toInt(d[1]), toInt(d[2])];\n            }\n          }\n        } catch (e) {\n          // ignore error\n        }\n      }\n      return {\n        w3: w3cdom,\n        pv: playerVersion,\n        wk: webkit,\n        ie: ie,\n        win: windows,\n        mac: mac\n      };\n    }();\n\n  /* Cross-browser onDomLoad\n      - Will fire an event as soon as the DOM of a web page is loaded\n      - Internet Explorer workaround based on Diego Perini's solution: http://javascript.nwbox.com/IEContentLoaded/\n      - Regular onload serves as fallback\n  */\n  (function () {\n    if (!ua.w3) {\n      return;\n    }\n    if (typeof doc.readyState !== UNDEF && (doc.readyState === \"complete\" || doc.readyState === \"interactive\") || typeof doc.readyState === UNDEF && (doc.getElementsByTagName(\"body\")[0] || doc.body)) {\n      // function is fired after onload, e.g. when script is inserted dynamically\n      callDomLoadFunctions();\n    }\n    if (!isDomLoaded) {\n      if (typeof doc.addEventListener !== UNDEF) {\n        doc.addEventListener(\"DOMContentLoaded\", callDomLoadFunctions, false);\n      }\n      if (ua.ie) {\n        doc.attachEvent(ON_READY_STATE_CHANGE, function detach() {\n          if (doc.readyState === \"complete\") {\n            doc.detachEvent(ON_READY_STATE_CHANGE, detach);\n            callDomLoadFunctions();\n          }\n        });\n        if (win == top) {\n          // if not inside an iframe\n          (function checkDomLoadedIE() {\n            if (isDomLoaded) {\n              return;\n            }\n            try {\n              doc.documentElement.doScroll(\"left\");\n            } catch (e) {\n              setTimeout(checkDomLoadedIE, 0);\n              return;\n            }\n            callDomLoadFunctions();\n          })();\n        }\n      }\n      if (ua.wk) {\n        (function checkDomLoadedWK() {\n          if (isDomLoaded) {\n            return;\n          }\n          if (!/loaded|complete/.test(doc.readyState)) {\n            setTimeout(checkDomLoadedWK, 0);\n            return;\n          }\n          callDomLoadFunctions();\n        })();\n      }\n    }\n  })();\n  function callDomLoadFunctions() {\n    if (isDomLoaded || !document.getElementsByTagName(\"body\")[0]) {\n      return;\n    }\n    try {\n      // test if we can really add/remove elements to/from the DOM; we don't want to fire it too early\n      var t,\n        span = createElement(\"span\");\n      span.style.display = \"none\"; //hide the span in case someone has styled spans via CSS\n      t = doc.getElementsByTagName(\"body\")[0].appendChild(span);\n      t.parentNode.removeChild(t);\n      t = null; //clear the variables\n      span = null;\n    } catch (e) {\n      return;\n    }\n    isDomLoaded = true;\n    var dl = domLoadFnArr.length;\n    for (var i = 0; i < dl; i++) {\n      domLoadFnArr[i]();\n    }\n  }\n  function addDomLoadEvent(fn) {\n    if (isDomLoaded) {\n      fn();\n    } else {\n      domLoadFnArr[domLoadFnArr.length] = fn; // Array.push() is only available in IE5.5+\n    }\n  }\n\n  /* Cross-browser onload\n      - Based on James Edwards' solution: http://brothercake.com/site/resources/scripts/onload/\n      - Will fire an event as soon as a web page including all of its assets are loaded\n      */\n  function addLoadEvent(fn) {\n    if (typeof win.addEventListener !== UNDEF) {\n      win.addEventListener(\"load\", fn, false);\n    } else if (typeof doc.addEventListener !== UNDEF) {\n      doc.addEventListener(\"load\", fn, false);\n    } else if (typeof win.attachEvent !== UNDEF) {\n      addListener(win, \"onload\", fn);\n    } else if (typeof win.onload === \"function\") {\n      var fnOld = win.onload;\n      win.onload = function () {\n        fnOld();\n        fn();\n      };\n    } else {\n      win.onload = fn;\n    }\n  }\n\n  /* Detect the Flash Player version for non-Internet Explorer browsers\n      - Detecting the plug-in version via the object element is more precise than using the plugins collection item's description:\n          a. Both release and build numbers can be detected\n          b. Avoid wrong descriptions by corrupt installers provided by Adobe\n          c. Avoid wrong descriptions by multiple Flash Player entries in the plugin Array, caused by incorrect browser imports\n      - Disadvantage of this method is that it depends on the availability of the DOM, while the plugins collection is immediately available\n  */\n  function testPlayerVersion() {\n    var b = doc.getElementsByTagName(\"body\")[0];\n    var o = createElement(OBJECT);\n    o.setAttribute(\"style\", \"visibility: hidden;\");\n    o.setAttribute(\"type\", FLASH_MIME_TYPE);\n    var t = b.appendChild(o);\n    if (t) {\n      var counter = 0;\n      (function checkGetVariable() {\n        if (typeof t.GetVariable !== UNDEF) {\n          try {\n            var d = t.GetVariable(\"$version\");\n            if (d) {\n              d = d.split(\" \")[1].split(\",\");\n              ua.pv = [toInt(d[0]), toInt(d[1]), toInt(d[2])];\n            }\n          } catch (e) {\n            //t.GetVariable(\"$version\") is known to fail in Flash Player 8 on Firefox\n            //If this error is encountered, assume FP8 or lower. Time to upgrade.\n            ua.pv = [8, 0, 0];\n          }\n        } else if (counter < 10) {\n          counter++;\n          setTimeout(checkGetVariable, 10);\n          return;\n        }\n        b.removeChild(o);\n        t = null;\n        matchVersions();\n      })();\n    } else {\n      matchVersions();\n    }\n  }\n\n  /* Perform Flash Player and SWF version matching; static publishing only\n  */\n  function matchVersions() {\n    var rl = regObjArr.length;\n    if (rl > 0) {\n      for (var i = 0; i < rl; i++) {\n        // for each registered object element\n        var id = regObjArr[i].id;\n        var cb = regObjArr[i].callbackFn;\n        var cbObj = {\n          success: false,\n          id: id\n        };\n        if (ua.pv[0] > 0) {\n          var obj = getElementById(id);\n          if (obj) {\n            if (hasPlayerVersion(regObjArr[i].swfVersion) && !(ua.wk && ua.wk < 312)) {\n              // Flash Player version >= published SWF version: Houston, we have a match!\n              setVisibility(id, true);\n              if (cb) {\n                cbObj.success = true;\n                cbObj.ref = getObjectById(id);\n                cbObj.id = id;\n                cb(cbObj);\n              }\n            } else if (regObjArr[i].expressInstall && canExpressInstall()) {\n              // show the Adobe Express Install dialog if set by the web page author and if supported\n              var att = {};\n              att.data = regObjArr[i].expressInstall;\n              att.width = obj.getAttribute(\"width\") || \"0\";\n              att.height = obj.getAttribute(\"height\") || \"0\";\n              if (obj.getAttribute(\"class\")) {\n                att.styleclass = obj.getAttribute(\"class\");\n              }\n              if (obj.getAttribute(\"align\")) {\n                att.align = obj.getAttribute(\"align\");\n              }\n              // parse HTML object param element's name-value pairs\n              var par = {};\n              var p = obj.getElementsByTagName(\"param\");\n              var pl = p.length;\n              for (var j = 0; j < pl; j++) {\n                if (p[j].getAttribute(\"name\").toLowerCase() !== \"movie\") {\n                  par[p[j].getAttribute(\"name\")] = p[j].getAttribute(\"value\");\n                }\n              }\n              showExpressInstall(att, par, id, cb);\n            } else {\n              // Flash Player and SWF version mismatch or an older Webkit engine that ignores the HTML object element's nested param elements: display fallback content instead of SWF\n              displayFbContent(obj);\n              if (cb) {\n                cb(cbObj);\n              }\n            }\n          }\n        } else {\n          // if no Flash Player is installed or the fp version cannot be detected we let the HTML object element do its job (either show a SWF or fallback content)\n          setVisibility(id, true);\n          if (cb) {\n            var o = getObjectById(id); // test whether there is an HTML object element or not\n            if (o && typeof o.SetVariable !== UNDEF) {\n              cbObj.success = true;\n              cbObj.ref = o;\n              cbObj.id = o.id;\n            }\n            cb(cbObj);\n          }\n        }\n      }\n    }\n  }\n\n  /* Main function\n      - Will preferably execute onDomLoad, otherwise onload (as a fallback)\n  */\n  domLoadFnArr[0] = function () {\n    if (plugin) {\n      testPlayerVersion();\n    } else {\n      matchVersions();\n    }\n  };\n  function getObjectById(objectIdStr) {\n    var r = null,\n      o = getElementById(objectIdStr);\n    if (o && o.nodeName.toUpperCase() === \"OBJECT\") {\n      //If targeted object is valid Flash file\n      if (typeof o.SetVariable !== UNDEF) {\n        r = o;\n      } else {\n        //If SetVariable is not working on targeted object but a nested object is\n        //available, assume classic nested object markup. Return nested object.\n\n        //If SetVariable is not working on targeted object and there is no nested object,\n        //return the original object anyway. This is probably new simplified markup.\n\n        r = o.getElementsByTagName(OBJECT)[0] || o;\n      }\n    }\n    return r;\n  }\n\n  /* Requirements for Adobe Express Install\n      - only one instance can be active at a time\n      - fp 6.0.65 or higher\n      - Win/Mac OS only\n      - no Webkit engines older than version 312\n  */\n  function canExpressInstall() {\n    return !isExpressInstallActive && hasPlayerVersion(\"6.0.65\") && (ua.win || ua.mac) && !(ua.wk && ua.wk < 312);\n  }\n\n  /* Show the Adobe Express Install dialog\n      - Reference: http://www.adobe.com/cfusion/knowledgebase/index.cfm?id=6a253b75\n  */\n  function showExpressInstall(att, par, replaceElemIdStr, callbackFn) {\n    var obj = getElementById(replaceElemIdStr);\n\n    //Ensure that replaceElemIdStr is really a string and not an element\n    replaceElemIdStr = getId(replaceElemIdStr);\n    isExpressInstallActive = true;\n    storedCallbackFn = callbackFn || null;\n    storedCallbackObj = {\n      success: false,\n      id: replaceElemIdStr\n    };\n    if (obj) {\n      if (obj.nodeName.toUpperCase() === \"OBJECT\") {\n        // static publishing\n        storedFbContent = abstractFbContent(obj);\n        storedFbContentId = null;\n      } else {\n        // dynamic publishing\n        storedFbContent = obj;\n        storedFbContentId = replaceElemIdStr;\n      }\n      att.id = EXPRESS_INSTALL_ID;\n      if (typeof att.width === UNDEF || !/%$/.test(att.width) && toInt(att.width) < 310) {\n        att.width = \"310\";\n      }\n      if (typeof att.height === UNDEF || !/%$/.test(att.height) && toInt(att.height) < 137) {\n        att.height = \"137\";\n      }\n      var pt = ua.ie ? \"ActiveX\" : \"PlugIn\",\n        fv = \"MMredirectURL=\" + encodeURIComponent(win.location.toString().replace(/&/g, \"%26\")) + \"&MMplayerType=\" + pt + \"&MMdoctitle=\" + encodeURIComponent(doc.title.slice(0, 47) + \" - Flash Player Installation\");\n      if (typeof par.flashvars !== UNDEF) {\n        par.flashvars += \"&\" + fv;\n      } else {\n        par.flashvars = fv;\n      }\n      // IE only: when a SWF is loading (AND: not available in cache) wait for the readyState of the object element to become 4 before removing it,\n      // because you cannot properly cancel a loading SWF file without breaking browser load references, also obj.onreadystatechange doesn't work\n      if (ua.ie && obj.readyState != 4) {\n        var newObj = createElement(\"div\");\n        replaceElemIdStr += \"SWFObjectNew\";\n        newObj.setAttribute(\"id\", replaceElemIdStr);\n        obj.parentNode.insertBefore(newObj, obj); // insert placeholder div that will be replaced by the object element that loads expressinstall.swf\n        obj.style.display = \"none\";\n        removeSWF(obj); //removeSWF accepts elements now\n      }\n\n      createSWF(att, par, replaceElemIdStr);\n    }\n  }\n\n  /* Functions to abstract and display fallback content\n  */\n  function displayFbContent(obj) {\n    if (ua.ie && obj.readyState != 4) {\n      // IE only: when a SWF is loading (AND: not available in cache) wait for the readyState of the object element to become 4 before removing it,\n      // because you cannot properly cancel a loading SWF file without breaking browser load references, also obj.onreadystatechange doesn't work\n      obj.style.display = \"none\";\n      var el = createElement(\"div\");\n      obj.parentNode.insertBefore(el, obj); // insert placeholder div that will be replaced by the fallback content\n      el.parentNode.replaceChild(abstractFbContent(obj), el);\n      removeSWF(obj); //removeSWF accepts elements now\n    } else {\n      obj.parentNode.replaceChild(abstractFbContent(obj), obj);\n    }\n  }\n  function abstractFbContent(obj) {\n    var ac = createElement(\"div\");\n    if (ua.win && ua.ie) {\n      ac.innerHTML = obj.innerHTML;\n    } else {\n      var nestedObj = obj.getElementsByTagName(OBJECT)[0];\n      if (nestedObj) {\n        var c = nestedObj.childNodes;\n        if (c) {\n          var cl = c.length;\n          for (var i = 0; i < cl; i++) {\n            if (!(c[i].nodeType == 1 && c[i].nodeName === \"PARAM\") && !(c[i].nodeType == 8)) {\n              ac.appendChild(c[i].cloneNode(true));\n            }\n          }\n        }\n      }\n    }\n    return ac;\n  }\n  function createIeObject(url, paramStr) {\n    var div = createElement(\"div\");\n    div.innerHTML = \"<object classid='clsid:D27CDB6E-AE6D-11cf-96B8-444553540000'><param name='movie' value='\" + url + \"'>\" + paramStr + \"</object>\";\n    return div.firstChild;\n  }\n\n  /* Cross-browser dynamic SWF creation\n  */\n  function createSWF(attObj, parObj, id) {\n    var r,\n      el = getElementById(id);\n    id = getId(id); // ensure id is truly an ID and not an element\n\n    if (ua.wk && ua.wk < 312) {\n      return r;\n    }\n    if (el) {\n      var o = ua.ie ? createElement(\"div\") : createElement(OBJECT),\n        attr,\n        attrLower,\n        param;\n      if (typeof attObj.id === UNDEF) {\n        // if no 'id' is defined for the object element, it will inherit the 'id' from the fallback content\n        attObj.id = id;\n      }\n\n      //Add params\n      for (param in parObj) {\n        //filter out prototype additions from other potential libraries and IE specific param element\n        if (Object.prototype.hasOwnProperty.call(parObj, param) && param.toLowerCase() !== \"movie\") {\n          createObjParam(o, param, parObj[param]);\n        }\n      }\n\n      //Create IE object, complete with param nodes\n      if (ua.ie) {\n        o = createIeObject(attObj.data, o.innerHTML);\n      }\n\n      //Add attributes to object\n      for (attr in attObj) {\n        if (Object.prototype.hasOwnProperty.call(attObj, attr)) {\n          // filter out prototype additions from other potential libraries\n          attrLower = attr.toLowerCase();\n\n          // 'class' is an ECMA4 reserved keyword\n          if (attrLower === \"styleclass\") {\n            o.setAttribute(\"class\", attObj[attr]);\n          } else if (attrLower !== \"classid\" && attrLower !== \"data\") {\n            o.setAttribute(attr, attObj[attr]);\n          }\n        }\n      }\n      if (ua.ie) {\n        objIdArr[objIdArr.length] = attObj.id; // stored to fix object 'leaks' on unload (dynamic publishing only)\n      } else {\n        o.setAttribute(\"type\", FLASH_MIME_TYPE);\n        o.setAttribute(\"data\", attObj.data);\n      }\n      el.parentNode.replaceChild(o, el);\n      r = o;\n    }\n    return r;\n  }\n  function createObjParam(el, pName, pValue) {\n    var p = createElement(\"param\");\n    p.setAttribute(\"name\", pName);\n    p.setAttribute(\"value\", pValue);\n    el.appendChild(p);\n  }\n\n  /* Cross-browser SWF removal\n      - Especially needed to safely and completely remove a SWF in Internet Explorer\n  */\n  function removeSWF(id) {\n    var obj = getElementById(id);\n    if (obj && obj.nodeName.toUpperCase() === \"OBJECT\") {\n      if (ua.ie) {\n        obj.style.display = \"none\";\n        (function removeSWFInIE() {\n          if (obj.readyState == 4) {\n            //This step prevents memory leaks in Internet Explorer\n            for (var i in obj) {\n              if (typeof obj[i] === \"function\") {\n                obj[i] = null;\n              }\n            }\n            obj.parentNode.removeChild(obj);\n          } else {\n            setTimeout(removeSWFInIE, 10);\n          }\n        })();\n      } else {\n        obj.parentNode.removeChild(obj);\n      }\n    }\n  }\n  function isElement(id) {\n    return id && id.nodeType && id.nodeType === 1;\n  }\n  function getId(thing) {\n    return isElement(thing) ? thing.id : thing;\n  }\n\n  /* Functions to optimize JavaScript compression\n  */\n  function getElementById(id) {\n    //Allow users to pass an element OR an element's ID\n    if (isElement(id)) {\n      return id;\n    }\n    var el = null;\n    try {\n      el = doc.getElementById(id);\n    } catch (e) {\n      // ignore error\n    }\n    return el;\n  }\n  function createElement(el) {\n    return doc.createElement(el);\n  }\n\n  //To aid compression; replaces 14 instances of pareseInt with radix\n  function toInt(str) {\n    return parseInt(str, 10);\n  }\n\n  /* Updated attachEvent function for Internet Explorer\n      - Stores attachEvent information in an Array, so on unload the detachEvent functions can be called to avoid memory leaks\n  */\n  function addListener(target, eventType, fn) {\n    target.attachEvent(eventType, fn);\n    listenersArr[listenersArr.length] = [target, eventType, fn];\n  }\n\n  /* Flash Player and SWF content version matching\n  */\n  function hasPlayerVersion(rv) {\n    rv += \"\"; //Coerce number to string, if needed.\n    var pv = ua.pv,\n      v = rv.split(\".\");\n    v[0] = toInt(v[0]);\n    v[1] = toInt(v[1]) || 0; // supports short notation, e.g. \"9\" instead of \"9.0.0\"\n    v[2] = toInt(v[2]) || 0;\n    return pv[0] > v[0] || pv[0] == v[0] && pv[1] > v[1] || pv[0] == v[0] && pv[1] == v[1] && pv[2] >= v[2] ? true : false;\n  }\n\n  /* Cross-browser dynamic CSS creation\n      - Based on Bobby van der Sluis' solution: http://www.bobbyvandersluis.com/articles/dynamicCSS.php\n  */\n  function createCSS(sel, decl, media, newStyle) {\n    var h = doc.getElementsByTagName(\"head\")[0];\n    if (!h) {\n      return;\n    } // to also support badly authored HTML pages that lack a head element\n    var m = typeof media === \"string\" ? media : \"screen\";\n    if (newStyle) {\n      dynamicStylesheet = null;\n      dynamicStylesheetMedia = null;\n    }\n    if (!dynamicStylesheet || dynamicStylesheetMedia != m) {\n      // create dynamic stylesheet + get a global reference to it\n      var s = createElement(\"style\");\n      s.setAttribute(\"type\", \"text/css\");\n      s.setAttribute(\"media\", m);\n      dynamicStylesheet = h.appendChild(s);\n      if (ua.ie && typeof doc.styleSheets !== UNDEF && doc.styleSheets.length > 0) {\n        dynamicStylesheet = doc.styleSheets[doc.styleSheets.length - 1];\n      }\n      dynamicStylesheetMedia = m;\n    }\n    // add style rule\n    if (dynamicStylesheet) {\n      if (typeof dynamicStylesheet.addRule !== UNDEF) {\n        dynamicStylesheet.addRule(sel, decl);\n      } else if (typeof doc.createTextNode !== UNDEF) {\n        dynamicStylesheet.appendChild(doc.createTextNode(sel + \" {\" + decl + \"}\"));\n      }\n    }\n  }\n  function setVisibility(id, isVisible) {\n    if (!autoHideShow) {\n      return;\n    }\n    var v = isVisible ? \"visible\" : \"hidden\",\n      el = getElementById(id);\n    if (isDomLoaded && el) {\n      el.style.visibility = v;\n    } else if (typeof id === \"string\") {\n      createCSS(\"#\" + id, \"visibility:\" + v);\n    }\n  }\n\n  /* Filter to avoid XSS attacks\n  */\n  function urlEncodeIfNecessary(s) {\n    var regex = /[\\\\\"<>.;]/;\n    var hasBadChars = regex.exec(s) !== null;\n    return hasBadChars && typeof encodeURIComponent !== UNDEF ? encodeURIComponent(s) : s;\n  }\n\n  /* Release memory to avoid memory leaks caused by closures, fix hanging audio/video threads and force open sockets/NetConnections to disconnect (Internet Explorer only)\n  */\n  (function () {\n    if (ua.ie) {\n      window.attachEvent(\"onunload\", function () {\n        // remove listeners to avoid memory leaks\n        var ll = listenersArr.length;\n        for (var i = 0; i < ll; i++) {\n          listenersArr[i][0].detachEvent(listenersArr[i][1], listenersArr[i][2]);\n        }\n        // cleanup dynamically embedded objects to fix audio/video threads and force open sockets and NetConnections to disconnect\n        var il = objIdArr.length;\n        for (var j = 0; j < il; j++) {\n          removeSWF(objIdArr[j]);\n        }\n        // cleanup library's main closures to avoid memory leaks\n        for (var k in ua) {\n          ua[k] = null;\n        }\n        ua = null;\n        for (var l in swfobject$1) {\n          swfobject$1[l] = null;\n        }\n        swfobject$1 = null;\n      });\n    }\n  })();\n  var swfobject$1 = {\n    /* Public API\n        - Reference: http://code.google.com/p/swfobject/wiki/documentation\n    */\n    registerObject: function (objectIdStr, swfVersionStr, xiSwfUrlStr, callbackFn) {\n      if (ua.w3 && objectIdStr && swfVersionStr) {\n        var regObj = {};\n        regObj.id = objectIdStr;\n        regObj.swfVersion = swfVersionStr;\n        regObj.expressInstall = xiSwfUrlStr;\n        regObj.callbackFn = callbackFn;\n        regObjArr[regObjArr.length] = regObj;\n        setVisibility(objectIdStr, false);\n      } else if (callbackFn) {\n        callbackFn({\n          success: false,\n          id: objectIdStr\n        });\n      }\n    },\n    getObjectById: function (objectIdStr) {\n      if (ua.w3) {\n        return getObjectById(objectIdStr);\n      }\n    },\n    embedSWF: function (swfUrlStr, replaceElemIdStr, widthStr, heightStr, swfVersionStr, xiSwfUrlStr, flashvarsObj, parObj, attObj, callbackFn) {\n      var id = getId(replaceElemIdStr),\n        callbackObj = {\n          success: false,\n          id: id\n        };\n      if (ua.w3 && !(ua.wk && ua.wk < 312) && swfUrlStr && replaceElemIdStr && widthStr && heightStr && swfVersionStr) {\n        setVisibility(id, false);\n        addDomLoadEvent(function () {\n          widthStr += \"\"; // auto-convert to string\n          heightStr += \"\";\n          var att = {};\n          if (attObj && typeof attObj === OBJECT) {\n            for (var i in attObj) {\n              // copy object to avoid the use of references, because web authors often reuse attObj for multiple SWFs\n              att[i] = attObj[i];\n            }\n          }\n          att.data = swfUrlStr;\n          att.width = widthStr;\n          att.height = heightStr;\n          var par = {};\n          if (parObj && typeof parObj === OBJECT) {\n            for (var j in parObj) {\n              // copy object to avoid the use of references, because web authors often reuse parObj for multiple SWFs\n              par[j] = parObj[j];\n            }\n          }\n          if (flashvarsObj && typeof flashvarsObj === OBJECT) {\n            for (var k in flashvarsObj) {\n              // copy object to avoid the use of references, because web authors often reuse flashvarsObj for multiple SWFs\n              if (Object.prototype.hasOwnProperty.call(flashvarsObj, k)) {\n                var key = encodeURIEnabled ? encodeURIComponent(k) : k,\n                  value = encodeURIEnabled ? encodeURIComponent(flashvarsObj[k]) : flashvarsObj[k];\n                if (typeof par.flashvars !== UNDEF) {\n                  par.flashvars += \"&\" + key + \"=\" + value;\n                } else {\n                  par.flashvars = key + \"=\" + value;\n                }\n              }\n            }\n          }\n          if (hasPlayerVersion(swfVersionStr)) {\n            // create SWF\n            var obj = createSWF(att, par, replaceElemIdStr);\n            if (att.id == id) {\n              setVisibility(id, true);\n            }\n            callbackObj.success = true;\n            callbackObj.ref = obj;\n            callbackObj.id = obj.id;\n          } else if (xiSwfUrlStr && canExpressInstall()) {\n            // show Adobe Express Install\n            att.data = xiSwfUrlStr;\n            showExpressInstall(att, par, replaceElemIdStr, callbackFn);\n            return;\n          } else {\n            // show fallback content\n            setVisibility(id, true);\n          }\n          if (callbackFn) {\n            callbackFn(callbackObj);\n          }\n        });\n      } else if (callbackFn) {\n        callbackFn(callbackObj);\n      }\n    },\n    switchOffAutoHideShow: function () {\n      autoHideShow = false;\n    },\n    enableUriEncoding: function (bool) {\n      encodeURIEnabled = typeof bool === UNDEF ? true : bool;\n    },\n    ua: ua,\n    getFlashPlayerVersion: function () {\n      return {\n        major: ua.pv[0],\n        minor: ua.pv[1],\n        release: ua.pv[2]\n      };\n    },\n    hasFlashPlayerVersion: hasPlayerVersion,\n    createSWF: function (attObj, parObj, replaceElemIdStr) {\n      if (ua.w3) {\n        return createSWF(attObj, parObj, replaceElemIdStr);\n      } else {\n        return undefined;\n      }\n    },\n    showExpressInstall: function (att, par, replaceElemIdStr, callbackFn) {\n      if (ua.w3 && canExpressInstall()) {\n        showExpressInstall(att, par, replaceElemIdStr, callbackFn);\n      }\n    },\n    removeSWF: function (objElemIdStr) {\n      if (ua.w3) {\n        removeSWF(objElemIdStr);\n      }\n    },\n    createCSS: function (selStr, declStr, mediaStr, newStyleBoolean) {\n      if (ua.w3) {\n        createCSS(selStr, declStr, mediaStr, newStyleBoolean);\n      }\n    },\n    addDomLoadEvent: addDomLoadEvent,\n    addLoadEvent: addLoadEvent,\n    getQueryParamValue: function (param) {\n      var q = doc.location.search || doc.location.hash;\n      if (q) {\n        if (/\\?/.test(q)) {\n          q = q.split(\"?\")[1];\n        } // strip question mark\n        if (!param) {\n          return urlEncodeIfNecessary(q);\n        }\n        var pairs = q.split(\"&\");\n        for (var i = 0; i < pairs.length; i++) {\n          if (pairs[i].substring(0, pairs[i].indexOf(\"=\")) == param) {\n            return urlEncodeIfNecessary(pairs[i].substring(pairs[i].indexOf(\"=\") + 1));\n          }\n        }\n      }\n      return \"\";\n    },\n    // For internal usage only\n    expressInstallCallback: function () {\n      if (isExpressInstallActive) {\n        var obj = getElementById(EXPRESS_INSTALL_ID);\n        if (obj && storedFbContent) {\n          obj.parentNode.replaceChild(storedFbContent, obj);\n          if (storedFbContentId) {\n            setVisibility(storedFbContentId, true);\n            if (ua.ie) {\n              storedFbContent.style.display = \"block\";\n            }\n          }\n          if (storedCallbackFn) {\n            storedCallbackFn(storedCallbackObj);\n          }\n        }\n        isExpressInstallActive = false;\n      }\n    },\n    version: \"2.3\"\n  };\n  var swfobject_1 = swfobject$1;\n\n  var swfobject = swfobject_1;\n\n  // Get Flash Version. Return a string containing the Flash Version.\n  var flashDetection = function getFlashVersion() {\n    if (this.isFlash()) {\n      var objPlayerVersion = swfobject.getFlashPlayerVersion();\n      return objPlayerVersion.major + '.' + objPlayerVersion.minor + '.' + objPlayerVersion.release;\n    }\n    return '';\n  };\n\n  var inherits = inheritsExports;\n  var ClientJS = client_base.ClientJS;\n  var getJavaVersion = javaDetection;\n  var getFlashVersion = flashDetection;\n  function ClientJSFull() {\n    ClientJS.apply(this, arguments);\n  }\n  inherits(ClientJSFull, ClientJS);\n  ClientJSFull.prototype.getJavaVersion = getJavaVersion;\n  ClientJSFull.prototype.getFlashVersion = getFlashVersion;\n  var ClientJS_1 = ClientJSFull;\n\n  //import MD5                 from \"blueimp-md5-es6/js/md5\";\n\n  var coreMenu = {\n    _user: null,\n    _system: null,\n    _modules: null,\n    _events: {},\n    /**\n     * Получение страницы кабинета\n     * @returns {*}\n     */\n    getPageContent: function getPageContent() {\n      return tpl['menu/main.html'];\n    },\n    /**\n     * Инициализация\n     */\n    init: function init() {\n      document.body.addEventListener('error', coreMenu._onError, true);\n\n      // Нужно для первого открытия страницы\n      if (window.screen.width > 600 && localStorage.getItem('core3_drawer_toggle') === '1') {\n        $('.page-menu').addClass('drawer-toggle');\n        $('.page-menu .menu-drawer').css('transition', 'none 0s ease 0s');\n        $('.page-menu .mdc-top-app-bar').css('transition', 'none 0s ease 0s');\n      }\n      var conf = localStorage.getItem('core3_conf');\n      if (typeof conf === 'string') {\n        try {\n          conf = JSON.parse(conf);\n          if (_typeof(conf.theme) === 'object') {\n            this._setTheme(conf.theme);\n          }\n        } catch (e) {}\n      }\n      coreMenu.preloader.show();\n\n      // Инициализация кнопок\n      var buttons = document.querySelectorAll('.page-menu .mdc-button');\n      var _iterator = _createForOfIteratorHelper(buttons),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var button = _step.value;\n          new MDCRipple(button);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      coreMenu._initInstall();\n      $('.page-menu .main-content .main-wrapper').html('');\n\n      // Добавление токена при любом ajax запросе\n      $(document).ajaxSend(function (event, jqxhr, settings) {\n        if (settings.url.indexOf(settings.url) === 0) {\n          var accessToken = coreTokens.getAccessToken();\n          if (accessToken) {\n            jqxhr.setRequestHeader('Access-Token', accessToken);\n          }\n        }\n      });\n      $.ajax({\n        url: coreMain.options.basePath + '/cabinet',\n        method: \"GET\",\n        dataType: \"json\",\n        success: function success(response) {\n          if (_typeof(response.user) !== 'object' || typeof response.user.id !== 'number' || typeof response.user.login !== 'string' || typeof response.user.name !== 'string' || typeof response.user.avatar !== 'string' || _typeof(response.system) !== 'object' || typeof response.system.name !== 'string' || _typeof(response.modules) !== 'object') {\n            console.warn(response);\n            CoreUI.alert.danger('Ошибка', 'Попробуйте обновить страницу или обратитесь к администратору');\n          } else {\n            coreMenu._user = response.user;\n            coreMenu._system = response.system;\n            coreMenu._modules = response.modules;\n            coreMenu._renderMenu();\n            coreMenu._initComponents(response.system.conf);\n            coreMenu.preloader.hide();\n            var uri = location.hash.substring(1) !== '' && location.hash.substring(1) !== '/' ? location.hash.substring(1) : 'sys/home';\n            coreMenu.load(uri);\n          }\n        },\n        error: function error(response) {\n          if (response.status === 403) {\n            coreTokens.clearAccessToken();\n            coreMain.viewPage('auth');\n          } else if (response.status === 0) {\n            CoreUI.alert.danger('Ошибка', 'Проверьте подключение к интернету');\n          } else {\n            CoreUI.alert.danger('Ошибка', 'Обновите приложение или обратитесь к администратору');\n          }\n        }\n      });\n    },\n    /**\n     *\n     */\n    toggleFullscreen: function toggleFullscreen() {\n      if (!document.fullscreenElement) {\n        document.documentElement.requestFullscreen();\n      } else {\n        if (document.exitFullscreen) {\n          document.exitFullscreen();\n        }\n      }\n    },\n    /**\n     * Перезагрузка содержимого страницы\n     */\n    reload: function reload() {\n      coreMenu.load(location.hash.substring(1));\n    },\n    /**\n     * Загрузка содержимого модуля\n     * @param url\n     */\n    load: function load(url) {\n      url = url || '/home';\n      coreMenu.preloader.show();\n      $.ajax({\n        url: url,\n        method: \"GET\",\n        dataType: 'text',\n        success: function success(response, textStatus, jqXHR) {\n          coreMenu.preloader.hide();\n          var params = coreTools.getParams(url);\n          coreMenu._setActiveModule(params.module, params.section);\n          var contentType = jqXHR.getResponseHeader('Content-type');\n          var contents = [];\n\n          // Обработка json\n          if (/^application\\/json/.test(contentType)) {\n            try {\n              var responseObj = JSON.parse(response);\n              if (_typeof(responseObj) === 'object' && responseObj.hasOwnProperty('_buffer') && typeof responseObj._buffer === 'string' && responseObj._buffer !== '') {\n                contents.push(responseObj._buffer);\n                delete responseObj._buffer;\n              }\n              var renderContents = coreMenu._renderContent(responseObj);\n              $.each(renderContents, function (i, contentItem) {\n                contents.push(contentItem);\n              });\n            } catch (e) {\n              contents = [response];\n              console.warn(e);\n            }\n          } else {\n            contents = [response];\n          }\n          var mainContainer = $('.page-menu .main-content .main-wrapper');\n          mainContainer.empty();\n          $.each(contents, function (key, content) {\n            mainContainer.append(content);\n          });\n          mainContainer.css({\n            'opacity': '0',\n            'margin-top': '15px'\n          }).animate({\n            marginTop: 0,\n            opacity: 1\n          }, {\n            duration: 235,\n            specialEasing: {\n              width: \"linear\",\n              height: \"easeOutBounce\"\n            },\n            complete: function complete() {\n              $(this).css({\n                'opacity': '',\n                'margin-top': ''\n              });\n            }\n          });\n          coreMenu._trigger('shown.load.core3', this, [url]);\n        },\n        error: function error(response) {\n          coreMenu.preloader.hide();\n          if (response.status === 403) {\n            coreTokens.clearAccessToken();\n            coreMain.viewPage('auth');\n          } else if (response.status === 0) {\n            CoreUI.alert.danger('Ошибка', 'Проверьте подключение к интернету');\n          } else {\n            CoreUI.alert.danger('Ошибка', 'Обновите приложение или обратитесь к администратору');\n          }\n        }\n      });\n    },\n    /**\n     * @param action\n     * @param options\n     * @returns {boolean}\n     */\n    loader: {\n      /**\n       * @param options\n       */\n      show: function show(options) {\n        if ($('#loader')[0]) {\n          return false;\n        }\n        $('.page-menu > header').append(tpl['menu/loader.html']);\n        var loaderElement = $('#loader .loader-progress');\n        var linearProgress = new MDCLinearProgress(loaderElement[0]);\n        linearProgress.determinate = false;\n      },\n      /**\n       *\n       */\n      hide: function hide() {\n        $('#loader').remove();\n      }\n    },\n    /**\n     * @param action\n     * @param options\n     * @returns {boolean}\n     */\n    preloader: {\n      /**\n       * @param options\n       * @returns {boolean}\n       */\n      show: function show(options) {\n        if ($('#preloader')[0]) {\n          this.hide();\n        }\n        options = _typeof(options) === 'object' ? options : {};\n        $('.page-menu').prepend(ejs.render(tpl['menu/preloader.html'], {\n          text: options.text || 'Загрузка...'\n        }));\n      },\n      /**\n       *\n       */\n      hide: function hide() {\n        $('#preloader').fadeOut('fast', function () {\n          $(this).remove();\n        });\n      }\n    },\n    /**\n     * @param eventName\n     * @param callback\n     * @param context\n     * @param singleExec\n     */\n    on: function on(eventName, callback, context, singleExec) {\n      if (_typeof(this._events[eventName]) !== 'object') {\n        this._events[eventName] = [];\n      }\n      this._events[eventName].push({\n        context: context || this,\n        callback: callback,\n        singleExec: singleExec\n      });\n    },\n    /**\n     * Сборка содержимого\n     * @param data\n     * @return {*[]}\n     * @private\n     */\n    _renderContent: function _renderContent(data) {\n      var that = this;\n      var result = [];\n      if (typeof data === 'string' || typeof data === 'bigint' || typeof data === 'number' || _typeof(data) === 'symbol') {\n        result.push(data);\n      } else if (data instanceof Object) {\n        if (!Array.isArray(data)) {\n          data = [data];\n        }\n        for (var i = 0; i < data.length; i++) {\n          if (typeof data[i] === 'string') {\n            result.push(data[i]);\n          } else {\n            if (!Array.isArray(data[i]) && data[i].hasOwnProperty('component') && data[i].component.substring(0, 6) === 'coreui') {\n              var name = data[i].component.split('.')[1];\n              if (CoreUI.hasOwnProperty(name) && that.isObject(CoreUI[name])) {\n                var instance = CoreUI[name].create(data[i]);\n                result.push(instance.render());\n                this.on('shown.load.core3', instance.initEvents, instance, true);\n              }\n            } else {\n              result.push(JSON.stringify(data[i]));\n            }\n          }\n        }\n      } else {\n        result.push(JSON.stringify(data));\n      }\n      return result;\n    },\n    /**\n     * Проверка на объект\n     * @param value\n     */\n    isObject: function isObject(value) {\n      return _typeof(value) === 'object' && !Array.isArray(value) && value !== null;\n    },\n    /**\n     *\n     * @param name\n     * @param context\n     * @param params\n     */\n    _trigger: function _trigger(name, context, params) {\n      if (this._events.hasOwnProperty(name) && this._events[name].length > 0) {\n        for (var i = 0; i < this._events[name].length; i++) {\n          var callback = this._events[name][i].callback;\n          context = this._events[name][i].context || context;\n          callback.apply(context, params);\n          if (this._events[name][i].singleExec) {\n            this._events[name].splice(i, 1);\n            i--;\n          }\n        }\n      }\n    },\n    /**\n     *\n     */\n    _renderMenu: function _renderMenu() {\n      $('.page-menu .system-title').text(coreMenu._system.name);\n      if (_typeof(coreMenu._system.conf) === 'object') {\n        localStorage.setItem('core3_conf', JSON.stringify(coreMenu._system.conf));\n        if (_typeof(coreMenu._system.conf.theme) === 'object') {\n          this._setTheme(coreMenu._system.conf.theme);\n        }\n      }\n      if (Object.values(coreMenu._modules).length > 0) {\n        var params = coreTools.getParams();\n        $('.page-menu > aside .menu-list.level-1').empty();\n        $.each(coreMenu._modules, function (key, module) {\n          if (typeof module.name !== 'string' || !module.name || typeof module.title !== 'string' || !module.title) {\n            CoreUI.notice.danger('Не удалось показать некоторые модули из за ошибок!');\n            return true;\n          }\n          module.index = 'index';\n          if (!module.is_visible_index && module.sections.length > 0) {\n            $.each(module.sections, function (key, section) {\n              module.index = section.name;\n              return false;\n            });\n          }\n          $('.page-menu > aside .menu-list.level-1').append(ejs.render(tpl['menu/module.html'], {\n            module: module\n          }));\n          $('.page-menu > aside .core-module.core-module-' + module.name).hover(function () {\n            var level2 = $('.level-2', this);\n            if (level2[0]) {\n              level2.css('top', $(this).offset().top);\n            }\n          });\n        });\n        coreMenu._setActiveModule(params.module, params.section);\n        var menuItems = document.querySelectorAll('.page-menu .menu-list-item a');\n        var _iterator2 = _createForOfIteratorHelper(menuItems),\n          _step2;\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var menuItem = _step2.value;\n            new MDCRipple(menuItem);\n            $(menuItem).on('click', function (event) {\n              if (event.button === 0 && !event.ctrlKey) {\n                var module = $(this).data('module');\n                var section = $(this).data('section');\n                if (location.hash.substring(2) === module + '/' + section) {\n                  if (window.screen.width < 600) {\n                    coreMenu._drawerToggle();\n                  }\n                  coreMenu.load(module + '/' + section);\n                }\n              }\n            });\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n        var _buttons = document.querySelectorAll('.page-menu .menu-list-item .menu-icon-button');\n        var _iterator3 = _createForOfIteratorHelper(_buttons),\n          _step3;\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var button = _step3.value;\n            new MDCRipple(button);\n            $(button).on('click', function () {\n              $(this).parent().parent().toggleClass('menu-item-nested-open');\n            });\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      }\n      $('.page-menu .mdc-top-app-bar__section--align-end').empty();\n      $('.page-menu .mdc-top-app-bar__section--align-end').append(ejs.render(tpl['menu/navbar.html'], {\n        user: coreMenu._user\n      }));\n\n      // Выход\n      $('.page-menu .menu-logout').on('click', function (e) {\n        e.preventDefault();\n        CoreUI.alert.warning(Core._('Уверены, что хотите выйти?'), '', {\n          buttons: [{\n            text: Core._('Отмена')\n          }, {\n            text: Core._('Да'),\n            type: 'warning',\n            click: coreAuth.logout\n          }]\n        });\n      });\n      $('.page-menu .open-menu, .page-menu .menu-drawer-scrim').on('click', function () {\n        coreMenu._drawerToggle();\n      });\n      $('.page-menu .module-home').on('click', function (event) {\n        if (event.button === 0 && !event.ctrlKey) {\n          coreMenu.load('sys/home');\n          if (window.screen.width < 600) {\n            coreMenu._drawerToggle();\n            console.log(11);\n          }\n        }\n      });\n      var buttons = document.querySelectorAll('.page-menu .mdc-ripple-surface');\n      var _iterator4 = _createForOfIteratorHelper(buttons),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var _button = _step4.value;\n          new MDCRipple(_button);\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n      coreMenu._initSwipe($(\".page-menu .menu-drawer-swipe\")[0], function (direction) {\n        if (direction === \"right\") {\n          coreMenu._drawerToggle();\n        } else if (direction === \"left\") {\n          coreMenu._drawerToggle();\n        }\n      });\n    },\n    /**\n     * Инициализация компонентов\n     * @param {object} conf\n     * @private\n     */\n    _initComponents: function _initComponents(conf) {\n      CoreUI.table.setSettings({\n        lang: conf.lang\n      });\n      CoreUI.form.setSettings({\n        lang: conf.lang\n      });\n      CoreUI.notice.setSettings({\n        position: 'bottom-right',\n        bottom: 25\n      });\n    },\n    /**\n     * @param moduleName\n     * @param sectionName\n     */\n    _setActiveModule: function _setActiveModule(moduleName, sectionName) {\n      $('.page-menu > aside .core-module').removeClass('menu-module-index--activated').removeClass('menu-module--activated');\n      $('.page-menu > aside .core-module-section').removeClass('menu-module-section--activated');\n      $('.page-menu > aside .core-module-section-index').removeClass('menu-module-section--activated');\n      $('.page-menu > aside .core-module-' + moduleName).addClass('menu-module--activated').addClass('menu-item-nested-open');\n      if (sectionName === 'index') {\n        $('.page-menu > aside .core-module.core-module-' + moduleName).addClass('menu-module-index--activated');\n        $('.page-menu > aside .core-module-' + moduleName + ' .core-module-section-index').addClass('menu-module-section--activated');\n      }\n      $('.page-menu > aside .core-module-' + moduleName + '-' + sectionName).addClass('menu-module-section--activated');\n      if (!moduleName && !sectionName) {\n        $('.page-menu .module-home').addClass('active');\n      } else {\n        $('.page-menu .module-home').removeClass('active');\n      }\n\n      /**\n       * @param moduleName\n       * @param sectionName\n       * @returns {*[]}\n       */\n      function getModuleTitles(moduleName, sectionName) {\n        var title = [];\n        $.each(coreMenu._modules, function (key, module) {\n          if (module.name === moduleName) {\n            title.push(module.title);\n            if (module.sections && module.sections.length > 0) {\n              $.each(module.sections, function (key, section) {\n                if (section.name === sectionName) {\n                  title.push(section.title);\n                  return false;\n                }\n              });\n            }\n            return false;\n          }\n        });\n        return title;\n      }\n      var titles = getModuleTitles(moduleName, sectionName);\n      $('header .mdc-top-app-bar__title').text(titles[0] || '');\n      $('header .mdc-top-app-bar__subtitle').text(titles[1] || '');\n      var title = titles.hasOwnProperty(0) ? (titles.hasOwnProperty(1) ? titles[1] + ' - ' : '') + titles[0] : '';\n      title = (title ? title + ' - ' : '') + coreMenu._system.name;\n      $('head title').text(title);\n    },\n    /**\n     * @param target\n     * @param callback\n     */\n    _initSwipe: function _initSwipe(target, callback) {\n      document.addEventListener('touchstart', handleTouchStart, false);\n      document.addEventListener('touchmove', handleTouchMove, false);\n      var xDown = null;\n      var yDown = null;\n\n      /**\n       * @param evt\n       */\n      function handleTouchStart(evt) {\n        xDown = evt.touches[0].clientX;\n        yDown = evt.touches[0].clientY;\n      }\n\n      /**\n       * @param evt\n       */\n      function handleTouchMove(evt) {\n        if (!xDown || !yDown) {\n          return;\n        }\n        var xUp = evt.touches[0].clientX;\n        var yUp = evt.touches[0].clientY;\n        var xDiff = xDown - xUp;\n        var yDiff = yDown - yUp;\n        if (Math.abs(xDiff) > Math.abs(yDiff)) {\n          /*most significant*/\n          if (xDiff > 0) {\n            if (target === evt.target) {\n              callback('left');\n            }\n          } else {\n            if (target === evt.target) {\n              callback('right');\n            }\n          }\n        } else {\n          if (yDiff > 0) {\n            if (target === evt.target) {\n              callback('up');\n            }\n          } else {\n            if (target === evt.target) {\n              callback('down');\n            }\n          }\n        }\n        xDown = null;\n        yDown = null;\n      }\n    },\n    /**\n     * @private\n     */\n    _drawerToggle: function _drawerToggle() {\n      // Нужно для первого открытия страницы\n      $('.page-menu .menu-drawer').css('transition', '');\n      $('.page-menu .mdc-top-app-bar').css('transition', '');\n      var menu = $('.page.page-menu');\n      if (menu.hasClass('drawer-toggle')) {\n        localStorage.setItem('core3_drawer_toggle', 0);\n      } else {\n        localStorage.setItem('core3_drawer_toggle', 1);\n      }\n      menu.toggleClass('drawer-toggle');\n    },\n    /**\n     * Установка\n     */\n    _initInstall: function _initInstall() {\n      var install = function install(event) {\n        event.preventDefault();\n        var button = $('.page-menu .install-button');\n        if (event.platforms.includes('web')) {\n          button.show();\n          button.on('click', function () {\n            event.prompt();\n          });\n        }\n        event.userChoice.then(function (choiceResult) {\n          switch (choiceResult.outcome) {\n            case \"accepted\":\n              button.hide();\n              break;\n            case \"dismissed\":\n              button.css('opacity', '0.7');\n              break;\n          }\n        });\n      };\n      if (coreMain.install.event) {\n        install(coreMain.install.event);\n      } else {\n        coreMain.install.promise.then(install);\n      }\n    },\n    /**\n     * Установка темы\n     * @param {object} theme\n     * @private\n     */\n    _setTheme: function _setTheme(theme) {\n      var styles = [];\n      if (_typeof(theme.main) === 'object' && typeof theme.main.bg_color === 'string' && theme.main.bg_color) {\n        styles.push('--menu-drawer: ' + theme.main.bg_color + ';');\n      }\n      if (_typeof(theme.main) === 'object' && typeof theme.main.text_color === 'string' && theme.main.text_color) {\n        styles.push('--menu-drawer-text:' + theme.main.text_color + ';');\n      }\n      if (styles.length > 0) {\n        var content = ':root{' + styles.join('') + '}';\n        var coreTheme = $('head #theme-main');\n        if (!coreTheme[0] || content !== coreTheme.html()) {\n          if (coreTheme[0]) {\n            coreTheme.remove();\n          }\n          $('head').append('<style id=\"theme-main\">' + content + '</style>');\n        }\n      }\n    },\n    /**\n     * Событие обработки ошибок на странице\n     * @param {string} message\n     * @param {string} url\n     * @param {int}    line\n     * @param {int}    col\n     * @param {Object} error\n     * @private\n     */\n    _onError: function _onError(message, url, line, col, error) {\n      var accessToken = coreTokens.getAccessToken();\n      if (accessToken) {\n        var clientJs = new ClientJS_1();\n        var client = clientJs.getBrowserData();\n        client.screen = {\n          current: client.getCurrentResolution(),\n          available: client.getAvailableResolution()\n        };\n        client.lang = client.getLanguage();\n        client.time = {\n          time: new Date().toTimeString().substring(0, 8),\n          zone: new Date().toTimeString().substring(12, 17),\n          zone_name: Intl.DateTimeFormat().resolvedOptions().timeZone\n        };\n        $.ajax({\n          url: coreMain.options.basePath + '/error',\n          method: \"POST\",\n          dataType: \"json\",\n          headers: {\n            'Access-Token': accessToken\n          },\n          data: JSON.stringify({\n            host: location.host,\n            url: location.href,\n            client: client,\n            error: {\n              message: message,\n              url: url,\n              line: line,\n              col: col,\n              stack: error && error.hasOwnProperty('stack') ? error.stack : null\n            }\n          }),\n          success: function success(response) {},\n          error: function error(response) {\n            console.warn(response);\n          }\n        });\n      }\n    }\n  };\n\n  var coreMain = {\n    activePage: null,\n    options: {\n      basePath: 'sys'\n    },\n    /**\n     *\n     */\n    install: {\n      event: null,\n      promise: null\n    },\n    /**\n     *\n     */\n    _hashChangeCallbacks: [],\n    /**\n     * @param pageName\n     */\n    viewPage: function viewPage(pageName) {\n      if (Core[pageName]) {\n        var pageContent = Core[pageName].getPageContent();\n        $('.main').append('<div class=\"page page-' + pageName + '\">' + pageContent + '</div>');\n        Core[pageName].init();\n        coreMain.activePage = pageName;\n        var $otherPages = $('.main > .page:not(.page-' + pageName + ')');\n        if ($otherPages[0]) {\n          $otherPages.fadeOut('fast', function () {\n            $otherPages.remove();\n            $('.main > .page-' + pageName).fadeIn('fast');\n          });\n        } else {\n          $('.main > .page-' + pageName).fadeIn('fast');\n        }\n      } else {\n        CoreUI.alert.danger('Ошибка', 'Страница ' + pageName + ' не найдена');\n      }\n    },\n    /**\n     * @param eventName\n     * @param callback\n     */\n    on: function on(eventName, callback) {\n      if (eventName === 'hashchange') {\n        coreMain._hashChangeCallbacks.push(callback);\n      }\n    },\n    /**\n     *\n     */\n    hashChange: function hashChange() {\n      if (coreMain._hashChangeCallbacks.length > 0) {\n        for (var i = 0; i < coreMain._hashChangeCallbacks.length; i++) {\n          coreMain._hashChangeCallbacks[i]();\n        }\n      }\n    },\n    /**\n     * @param text\n     * @param options\n     * @private\n     */\n    _: function _(text, options) {\n      return text;\n    },\n    /**\n     * Загрузка\n     * @private\n     */\n    _onLoad: function _onLoad() {\n      coreMain.on('hashchange', function () {\n        if ($('.page-auth')[0]) {\n          coreAuth.viewActualContainer();\n        }\n        if ($('.page.page-menu')[0]) {\n          if (window.screen.width < 600 && $('.page.page-menu.drawer-toggle')[0]) {\n            coreMenu._drawerToggle();\n          }\n          coreMenu.load(location.hash.substring(1));\n        }\n      });\n\n      // Событие установки\n      coreMain.install.promise = new Promise(function (resolve, reject) {\n        window.addEventListener('beforeinstallprompt', function (event) {\n          event.preventDefault();\n          coreMain.install.event = event;\n          resolve(event);\n        });\n      });\n      var accessToken = coreTokens.getAccessToken();\n      if (!accessToken) {\n        coreMain.viewPage('auth');\n      } else {\n        coreTokens.refreshToken(function () {\n          coreTokens.initRefresh();\n          coreMain.viewPage('menu');\n        }, function () {\n          coreMain.viewPage('auth');\n        });\n      }\n      if (\"onhashchange\" in window) {\n        window.onhashchange = coreMain.hashChange;\n      }\n\n      /**\n       * Замена alert\n       * @param message\n       */\n      alert = function alert(message) {\n        CoreUI.alert.create({\n          type: 'warning',\n          message: message\n        });\n      };\n    }\n  };\n  document.addEventListener('DOMContentLoaded', coreMain._onLoad);\n\n  /*\n   * JavaScript MD5\n   * https://github.com/blueimp/JavaScript-MD5\n   *\n   * Copyright 2011, Sebastian Tschan\n   * https://blueimp.net\n   *\n   * Licensed under the MIT license:\n   * https://opensource.org/licenses/MIT\n   *\n   * Based on\n   * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n   * Digest Algorithm, as defined in RFC 1321.\n   * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009\n   * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n   * Distributed under the BSD License\n   * See http://pajhome.org.uk/crypt/md5 for more info.\n   */\n\n  /*\n   * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n   * to work around bugs in some JS interpreters.\n   */\n  const safeAdd = (x, y) => {\n    let lsw = (x & 0xFFFF) + (y & 0xFFFF);\n    return (x >> 16) + (y >> 16) + (lsw >> 16) << 16 | lsw & 0xFFFF;\n  };\n\n  /*\n   * Bitwise rotate a 32-bit number to the left.\n   */\n  const bitRotateLeft = (num, cnt) => num << cnt | num >>> 32 - cnt;\n\n  /*\n   * These functions implement the four basic operations the algorithm uses.\n   */\n  const md5cmn = (q, a, b, x, s, t) => safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b),\n    md5ff = (a, b, c, d, x, s, t) => md5cmn(b & c | ~b & d, a, b, x, s, t),\n    md5gg = (a, b, c, d, x, s, t) => md5cmn(b & d | c & ~d, a, b, x, s, t),\n    md5hh = (a, b, c, d, x, s, t) => md5cmn(b ^ c ^ d, a, b, x, s, t),\n    md5ii = (a, b, c, d, x, s, t) => md5cmn(c ^ (b | ~d), a, b, x, s, t);\n  const firstChunk = (chunks, x, i) => {\n      let [a, b, c, d] = chunks;\n      a = md5ff(a, b, c, d, x[i + 0], 7, -680876936);\n      d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);\n      c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);\n      b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);\n      a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);\n      d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);\n      c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);\n      b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);\n      a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);\n      d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);\n      c = md5ff(c, d, a, b, x[i + 10], 17, -42063);\n      b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);\n      a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);\n      d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);\n      c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);\n      b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);\n      return [a, b, c, d];\n    },\n    secondChunk = (chunks, x, i) => {\n      let [a, b, c, d] = chunks;\n      a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);\n      d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);\n      c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);\n      b = md5gg(b, c, d, a, x[i], 20, -373897302);\n      a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);\n      d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);\n      c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);\n      b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);\n      a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);\n      d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);\n      c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);\n      b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);\n      a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);\n      d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);\n      c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);\n      b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);\n      return [a, b, c, d];\n    },\n    thirdChunk = (chunks, x, i) => {\n      let [a, b, c, d] = chunks;\n      a = md5hh(a, b, c, d, x[i + 5], 4, -378558);\n      d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);\n      c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);\n      b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);\n      a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);\n      d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);\n      c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);\n      b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);\n      a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);\n      d = md5hh(d, a, b, c, x[i], 11, -358537222);\n      c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);\n      b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);\n      a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);\n      d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);\n      c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);\n      b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);\n      return [a, b, c, d];\n    },\n    fourthChunk = (chunks, x, i) => {\n      let [a, b, c, d] = chunks;\n      a = md5ii(a, b, c, d, x[i], 6, -198630844);\n      d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);\n      c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);\n      b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);\n      a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);\n      d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);\n      c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);\n      b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);\n      a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);\n      d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);\n      c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);\n      b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);\n      a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);\n      d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);\n      c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);\n      b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);\n      return [a, b, c, d];\n    };\n  /*\n   * Calculate the MD5 of an array of little-endian words, and a bit length.\n   */\n  const binlMD5 = (x, len) => {\n    /* append padding */\n    x[len >> 5] |= 0x80 << len % 32;\n    x[(len + 64 >>> 9 << 4) + 14] = len;\n    let commands = [firstChunk, secondChunk, thirdChunk, fourthChunk],\n      initialChunks = [1732584193, -271733879, -1732584194, 271733878];\n    return Array.from({\n      length: Math.floor(x.length / 16) + 1\n    }, (v, i) => i * 16).reduce((chunks, i) => commands.reduce((newChunks, apply) => apply(newChunks, x, i), chunks.slice()).map((chunk, index) => safeAdd(chunk, chunks[index])), initialChunks);\n  };\n\n  /*\n   * Convert an array of little-endian words to a string\n   */\n  const binl2rstr = input => Array(input.length * 4).fill(8).reduce((output, k, i) => output + String.fromCharCode(input[i * k >> 5] >>> i * k % 32 & 0xFF), '');\n\n  /*\n   * Convert a raw string to an array of little-endian words\n   * Characters >255 have their high-byte silently ignored.\n   */\n  const rstr2binl = input => Array.from(input).map(i => i.charCodeAt(0)).reduce((output, cc, i) => {\n    let resp = output.slice();\n    resp[i * 8 >> 5] |= (cc & 0xFF) << i * 8 % 32;\n    return resp;\n  }, []);\n\n  /*\n   * Calculate the MD5 of a raw string\n   */\n  const rstrMD5 = string => binl2rstr(binlMD5(rstr2binl(string), string.length * 8));\n  /*\n   * Calculate the HMAC-MD5, of a key and some data (raw strings)\n   */\n  const strHMACMD5 = (key, data) => {\n    let bkey = rstr2binl(key),\n      ipad = Array(16).fill(undefined ^ 0x36363636),\n      opad = Array(16).fill(undefined ^ 0x5C5C5C5C);\n    if (bkey.length > 16) {\n      bkey = binlMD5(bkey, key.length * 8);\n    }\n    bkey.forEach((k, i) => {\n      ipad[i] = k ^ 0x36363636;\n      opad[i] = k ^ 0x5C5C5C5C;\n    });\n    return binl2rstr(binlMD5(opad.concat(binlMD5(ipad.concat(rstr2binl(data)), 512 + data.length * 8)), 512 + 128));\n  };\n\n  /*\n   * Convert a raw string to a hex string\n   */\n  const rstr2hex = input => {\n    const hexTab = pos => '0123456789abcdef'.charAt(pos);\n    return Array.from(input).map(c => c.charCodeAt(0)).reduce((output, x, i) => output + hexTab(x >>> 4 & 0x0F) + hexTab(x & 0x0F), '');\n  };\n\n  /*\n   * Encode a string as utf-8\n   */\n\n  const str2rstrUTF8 = unicodeString => {\n    if (typeof unicodeString !== 'string') throw new TypeError('parameter ‘unicodeString’ is not a string');\n    const cc = c => c.charCodeAt(0);\n    return unicodeString.replace(/[\\u0080-\\u07ff]/g,\n    // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz\n    c => String.fromCharCode(0xc0 | cc(c) >> 6, 0x80 | cc(c) & 0x3f)).replace(/[\\u0800-\\uffff]/g,\n    // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz\n    c => String.fromCharCode(0xe0 | cc(c) >> 12, 0x80 | cc(c) >> 6 & 0x3F, 0x80 | cc(c) & 0x3f));\n  };\n\n  /*\n   * Take string arguments and return either raw or hex encoded strings\n   */\n  const rawMD5 = s => rstrMD5(str2rstrUTF8(s));\n  const hexMD5 = s => rstr2hex(rawMD5(s));\n  const rawHMACMD5 = (k, d) => strHMACMD5(str2rstrUTF8(k), str2rstrUTF8(d));\n  const hexHMACMD5 = (k, d) => rstr2hex(rawHMACMD5(k, d));\n  var MD5 = ((string, key, raw) => {\n    if (!key) {\n      if (!raw) {\n        return hexMD5(string);\n      }\n      return rawMD5(string);\n    }\n    if (!raw) {\n      return hexHMACMD5(key, string);\n    }\n    return rawHMACMD5(key, string);\n  });\n\n  var coreAuth = {\n    /**\n     * Получение страницы входа и регистрации\n     * @returns {*}\n     */\n    getPageContent: function getPageContent() {\n      return tpl['auth/main.html'];\n    },\n    /**\n     * Инициализация страницы входа и регистрации\n     */\n    init: function init() {\n      var that = this;\n\n      // Инициализация кнопок\n      var buttons = document.querySelectorAll('.page-auth .mdc-button');\n      var _iterator = _createForOfIteratorHelper(buttons),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var button = _step.value;\n          new MDCRipple(button);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      $('.container-login form').on('submit', function () {\n        coreAuth.login(this);\n        return false;\n      });\n      $('.container-registration form').on('submit', function () {\n        coreAuth.registration(this);\n        return false;\n      });\n      var conf = localStorage.getItem('core3_conf');\n      if (typeof conf === 'string') {\n        try {\n          conf = JSON.parse(conf);\n          if (typeof conf.name === 'string') {\n            $('head title').text(conf.name);\n          }\n          if (typeof conf.logo === 'string') {\n            this._setLogo(conf.logo);\n          }\n          if (_typeof(conf.theme) === 'object') {\n            this._setTheme(conf.theme);\n          }\n        } catch (e) {}\n      }\n      coreAuth.loadConfig().then(function (conf) {\n        localStorage.setItem('core3_conf', JSON.stringify(conf));\n        if (typeof conf.name === 'string') {\n          $('head title').text(conf.name);\n        }\n        if (typeof conf.logo === 'string') {\n          that._setLogo(conf.logo);\n        } else {\n          that._setLogo('');\n        }\n        if (_typeof(conf.theme) === 'object') {\n          that._setTheme(conf.theme);\n        }\n      });\n      coreAuth.viewActualContainer();\n\n      // Установка\n      var install = function install(event) {\n        event.preventDefault();\n        var button = $('.page-auth .install-button');\n        if (event.platforms.includes('web')) {\n          button.show();\n          button.on('click', function () {\n            event.prompt();\n          });\n        }\n        event.userChoice.then(function (choiceResult) {\n          switch (choiceResult.outcome) {\n            case \"accepted\":\n              button.hide();\n              break;\n          }\n        });\n      };\n      if (coreMain.install.event) {\n        install(coreMain.install.event);\n      } else {\n        coreMain.install.promise.then(install);\n      }\n    },\n    /**\n     * Показ текущего контейнера\n     */\n    viewActualContainer: function viewActualContainer() {\n      var params = coreTools.getParams();\n      var authPanel = params.module;\n      if (['login', 'registration', 'registration_complete'].indexOf(authPanel) === -1) {\n        authPanel = 'login';\n      }\n      coreAuth._viewContainer(authPanel);\n    },\n    /**\n     * @param action\n     */\n    preloader: function preloader(action) {\n      var $btn = $('.page-auth button[type=submit]:visible');\n      switch (action) {\n        case 'show':\n          $btn.attr(\"disabled\", \"disabled\");\n          if ($btn.find('.spinner-border').length === 0) {\n            $btn.prepend('<div class=\"spinner-border spinner-border-sm\"></div> ');\n          }\n          break;\n        case 'hide':\n          $btn.find('.spinner-border').remove();\n          $btn.removeAttr(\"disabled\");\n          break;\n      }\n    },\n    /**\n     * Получение конфигурации\n     * @return {Promise}\n     */\n    loadConfig: function loadConfig() {\n      return new Promise(function (resolve, reject) {\n        $.ajax({\n          url: coreMain.options.basePath + \"/conf\",\n          method: \"GET\",\n          dataType: \"json\",\n          success: function success(response) {\n            resolve(response);\n          }\n        });\n      });\n    },\n    /**\n     * @param form\n     * @returns {Promise<boolean>}\n     */\n    login: function () {\n      var _login = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(form) {\n        var fp;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (form.checkValidity()) {\n                _context.next = 5;\n                break;\n              }\n              $(form).addClass('was-validated');\n              return _context.abrupt(\"return\", false);\n            case 5:\n              $(form).removeClass('was-validated');\n            case 6:\n              coreAuth.preloader('show');\n              $('.page-auth form .text-danger').text('');\n              _context.next = 10;\n              return coreTools.getFingerprint();\n            case 10:\n              fp = _context.sent;\n              if (fp) {\n                _context.next = 15;\n                break;\n              }\n              coreAuth.preloader('hide');\n              $('.page-auth form .text-danger').text('Не удалось получить отпечаток');\n              return _context.abrupt(\"return\", false);\n            case 15:\n              $.ajax({\n                url: coreMain.options.basePath + \"/auth/login\",\n                method: \"POST\",\n                dataType: \"json\",\n                contentType: \"application/json; charset=utf-8\",\n                data: JSON.stringify({\n                  login: $('[name=login]', form).val(),\n                  password: MD5($('[name=password]', form).val()),\n                  fp: fp\n                }),\n                success: function success(response) {\n                  if (typeof response.access_token !== 'string' || typeof response.refresh_token !== 'string' || !response.access_token || !response.refresh_token) {\n                    var errorMessage = response.error_message || \"Ошибка. Попробуйте позже, либо обратитесь к администратору\";\n                    $('.page-auth form .text-danger').text(errorMessage);\n                  } else {\n                    $('.page-auth form .text-danger').text('');\n                    coreTokens.setAccessToken(response.access_token);\n                    coreTokens.setRefreshToken(response.refresh_token);\n                    $('.page-auth [name=login]').val('');\n                    $('.page-auth [name=password]').val('');\n                    coreMain.viewPage('menu');\n                    coreTokens.initRefresh();\n                  }\n                },\n                error: function error(response) {\n                  coreAuth.preloader('hide');\n                  var errorMessage = '';\n                  if (response.status === 0) {\n                    errorMessage = 'Проверьте подключение к интернету';\n                  } else if (response.responseJSON && response.responseJSON.error_message) {\n                    errorMessage = response.responseJSON.error_message;\n                  } else {\n                    errorMessage = $(\"<div>\" + response.responseText + \"</div>\").text();\n                  }\n                  errorMessage = errorMessage || 'Ошибка. Попробуйте позже, либо обратитесь к администратору';\n                  $('.container-login .text-danger').text(errorMessage);\n                },\n                complete: function complete(jqXHR, textStatus) {\n                  coreAuth.preloader('hide');\n                }\n              });\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      function login(_x) {\n        return _login.apply(this, arguments);\n      }\n      return login;\n    }(),\n    /**\n     *\n     */\n    logout: function logout() {\n      $.ajax({\n        url: coreMain.options.basePath + '/auth/logout',\n        method: \"PUT\",\n        headers: {\n          'Access-Token': coreTokens.getAccessToken()\n        },\n        dataType: \"json\",\n        success: function success(response) {\n          coreTokens.clearAccessToken();\n          coreTokens.deinitRefresh();\n          coreMain.viewPage('auth');\n          $('.page-menu > aside .menu-logout').removeClass('mdc-list-item--activated');\n        },\n        error: function error(response) {\n          if (response.status === 0) {\n            CoreUI.alert.danger('Ошибка', 'Проверьте подключение к интернету');\n          } else {\n            CoreUI.alert.danger('Ошибка', 'Обновите приложение или обратитесь к администратору');\n          }\n        }\n      });\n    },\n    /**\n     * @param form\n     */\n    registration: function registration(form) {\n      if (!form.checkValidity()) {\n        $(form).addClass('was-validated');\n        return false;\n      } else {\n        $(form).removeClass('was-validated');\n      }\n      coreAuth.preloader('show');\n      $('.container-registration .text-danger').text('');\n      $.ajax({\n        url: coreMain.options.basePath + \"/auth/registration/email\",\n        dataType: \"json\",\n        method: \"POST\",\n        data: $(form).serialize(),\n        success: function success(response) {\n          coreAuth.preloader('hide');\n          if (typeof response.access_token !== 'string' || typeof response.refresh_token !== 'string' || !response.access_token || !response.refresh_token) {\n            var errorMessage = response.error_message || \"Ошибка. Попробуйте позже, либо обратитесь к администратору\";\n            $('.container-registration .text-danger').text(errorMessage);\n          } else {\n            $('.page-auth form .text-danger').text('');\n            coreTokens.setAccessToken(response.access_token);\n            coreTokens.setRefreshToken(response.refresh_token);\n            $('.page-auth [name=login]').val('');\n            $('.page-auth [name=password]').val('');\n            coreMain.viewPage('menu');\n            coreTokens.initRefresh();\n          }\n        },\n        error: function error(response) {\n          coreAuth.preloader('hide');\n          var errorMessage = '';\n          if (response.status === 0) {\n            errorMessage = 'Проверьте подключение к интернету';\n          } else if (response.responseJSON && response.responseJSON.error_message) {\n            errorMessage = response.responseJSON.error_message;\n          } else {\n            errorMessage = $(response.responseText).text();\n          }\n          errorMessage = errorMessage || 'Ошибка. Попробуйте позже, либо обратитесь к администратору';\n          $('.container-registration .text-danger').text(errorMessage);\n        },\n        complete: function complete(jqXHR, textStatus) {\n          coreAuth.preloader('hide');\n        }\n      });\n    },\n    /**\n     * @param form\n     * @constructor\n     */\n    registrationComplete: function registrationComplete(form) {\n      var pass1 = $(\"[name=password]\", form).val();\n      var pass2 = $(\"[name=password2]\", form).val();\n      if (!pass1 || !pass2) {\n        $('.container-registration_complete .text-danger').text('Введите пароль');\n        return false;\n      }\n      if (pass1 !== pass2) {\n        $('.container-registration_complete .text-danger').text('Пароли не совпадают').show();\n        return false;\n      }\n      coreAuth.preloader('show');\n      $('.container-registration_complete .text-danger').text('');\n      var params = coreTools.getParams();\n      $.ajax({\n        url: coreMain.options.basePath + \"/auth/registration/email/check\",\n        dataType: \"json\",\n        method: \"POST\",\n        data: {\n          key: params.query.key,\n          password: MD5(form.password.value)\n        },\n        success: function success(data) {\n          coreAuth.preloader('hide');\n          if (data.status === 'success') {\n            $('.container-registration_complete .text-success').html(data.message).css('margin-bottom', '50px');\n            $(form).hide();\n          } else {\n            $('.container-registration_complete .text-danger').text(data.error_message);\n          }\n        },\n        error: function error(response) {\n          coreAuth.preloader('hide');\n          var errorMessage = '';\n          if (response.status === 0) {\n            errorMessage = 'Ошибка. Проверьте подключение к интернету';\n          } else {\n            errorMessage = 'Ошибка. Попробуйте позже, либо обратитесь к администратору';\n          }\n          $('.container-registration_complete .text-danger').text(errorMessage);\n        }\n      });\n    },\n    /**\n     * Показ указанного контейнера\n     * @param name\n     */\n    _viewContainer: function _viewContainer(name) {\n      $('.page-auth > .container').hide();\n      $('.page-auth > .container-' + name).fadeIn('fast');\n    },\n    /**\n     * Установка логотипа\n     * @param {string} logo\n     * @private\n     */\n    _setLogo: function _setLogo(logo) {\n      if (logo) {\n        $('.page-auth img.logo').attr('src', logo).show();\n      } else {\n        $('.page-auth img.logo').hide();\n      }\n    },\n    /**\n     * Установка темы\n     * @param {object} theme\n     * @private\n     */\n    _setTheme: function _setTheme(theme) {\n      var styles = [];\n      if (_typeof(theme.login) === 'object' && typeof theme.login.bg_video === 'string' && theme.login.bg_video) {\n        if (!$('.page.page-auth > video')[0]) {\n          $('.page.page-auth').prepend('<video autoplay muted loop><source src=\"' + theme.login.bg_video + '\" type=\"video/mp4\"></video>');\n        }\n      }\n      if (_typeof(theme.login) === 'object' && typeof theme.login.bg_img === 'string' && theme.login.bg_img) {\n        styles.push('--login-bg:url(\"' + theme.login.bg_img + '\");');\n      } else if (_typeof(theme.login) === 'object' && typeof theme.login.bg_color === 'string' && theme.login.bg_color) {\n        styles.push('--login-bg: ' + theme.login.bg_color + ';');\n      }\n      if (styles.length > 0) {\n        var content = ':root{' + styles.join('') + '}';\n        var coreTheme = $('head #theme-login');\n        if (!coreTheme[0] || content !== coreTheme.html()) {\n          if (coreTheme[0]) {\n            coreTheme.remove();\n          }\n          $('head').append('<style id=\"theme-login\">' + content + '</style>');\n        }\n      }\n    }\n  };\n\n  /**\r\n   * @property {object} _table\r\n   */\n  var coreUiTableInstance = /*#__PURE__*/function () {\n    /**\r\n     * @param {object} table\r\n     */\n    function coreUiTableInstance(table) {\n      _classCallCheck(this, coreUiTableInstance);\n      if (_typeof(table) !== 'object' || Array.isArray(table) || table === null) {\n        throw new Error('Ошибка инициализации таблицы');\n      }\n      this._table = table;\n    }\n\n    /**\r\n     * Запрос на удаление выбранных записей\r\n     * @param {string}   url\r\n     * @param {function} callbackSuccess\r\n     */\n    return _createClass(coreUiTableInstance, [{\n      key: \"deleteSelected\",\n      value: function deleteSelected(url, callbackSuccess) {\n        var recordsId = this._table.getSelectedRecordsId();\n        if (recordsId.length === 0) {\n          CoreUI.notice.warning(Core$1._('Нужно выбрать хотя бы одну запись'));\n          return;\n        }\n        CoreUI.alert.warning(Core$1._(\"Удалить выбранные записи?\"), Core$1._('Количество: ') + ' ' + recordsId.length, {\n          buttons: [{\n            text: Core$1._(\"Отмена\")\n          }, {\n            text: Core$1._(\"Да\"),\n            type: 'warning',\n            click: function click() {\n              Core$1.menu.preloader.show();\n              $.ajax({\n                url: url,\n                method: 'delete',\n                dataType: 'json',\n                contentType: \"application/json; charset=utf-8\",\n                data: JSON.stringify({\n                  id: recordsId\n                }),\n                success: function success(response) {\n                  if (response.status !== 'success') {\n                    CoreUI.alert.danger(response.error_message || Core$1._(\"Ошибка. Попробуйте обновить страницу и выполнить удаление еще раз.\"));\n                  } else {\n                    CoreUI.notice.defalt(Core$1._('Выбранные записи удалены'));\n                    if (callbackSuccess && typeof callbackSuccess == 'function') {\n                      callbackSuccess();\n                    }\n                  }\n                },\n                error: function error(response) {\n                  CoreUI.alert.danger(Core$1._(\"Ошибка. Попробуйте обновить страницу и выполнить удаление еще раз.\"));\n                },\n                complete: function complete() {\n                  Core$1.menu.preloader.hide();\n                }\n              });\n            }\n          }]\n        });\n      }\n\n      /**\r\n       * Переключение состояния у записи\r\n       * @param {string} url\r\n       * @param {string} checked\r\n       * @param {string} id\r\n       * @param {string} questionY\r\n       * @param {string} questionN\r\n       */\n    }, {\n      key: \"switch\",\n      value: function _switch(url, checked, id, questionY, questionN) {\n        var question;\n        var isChecked = $(checked).is(':checked');\n        if (isChecked) {\n          question = questionY || \"Активировать запись?\";\n        } else {\n          question = questionN || \"Деактивировать запись?\";\n        }\n        var isAccept = false;\n        CoreUI.alert.create({\n          type: 'warning',\n          title: question,\n          onHide: function onHide() {\n            if (!isAccept) {\n              $(checked).prop('checked', !isChecked);\n            }\n          },\n          buttons: [{\n            text: Core$1._(\"Отмена\"),\n            click: function click() {\n              $(checked).prop('checked', !isChecked);\n            }\n          }, {\n            text: Core$1._(\"Да\"),\n            type: 'warning',\n            click: function click() {\n              Core$1.menu.loader.show();\n              isAccept = true;\n              $.ajax({\n                url: url.replace('[id]', id),\n                method: 'patch',\n                dataType: 'json',\n                contentType: \"application/json; charset=utf-8\",\n                data: JSON.stringify({\n                  checked: isChecked ? 'Y' : 'N'\n                }),\n                success: function success(response) {\n                  if (response.status !== 'success') {\n                    $(checked).prop('checked', !isChecked);\n                    CoreUI.notice.danger(response.error_message || Core$1._(\"Ошибка. Попробуйте обновить страницу и выполните это действие еще раз.\"));\n                  }\n                },\n                error: function error(response) {\n                  $(checked).prop('checked', !isChecked);\n                  CoreUI.notice.danger(Core$1._(\"Ошибка. Попробуйте обновить страницу и выполните это действие еще раз.\"));\n                },\n                complete: function complete() {\n                  Core$1.menu.loader.hide();\n                }\n              });\n            }\n          }]\n        });\n      }\n    }]);\n  }();\n\n  var coreUiTable$1 = {\n    /**\r\n     * Получение таблицы ядра\r\n     * @param tableId\r\n     */\n    get: function get(tableId) {\n      var table = CoreUI.table.get(tableId);\n      if (!table) {\n        throw new Error('Не удалось найти таблицу с id' + table);\n      }\n      return new coreUiTableInstance(table);\n    }\n  };\n\n  var coreUiFormInstance = /*#__PURE__*/_createClass(\n  /**\r\n   * @param {object} form\r\n   */\n  function coreUiFormInstance(form) {\n    _classCallCheck(this, coreUiFormInstance);\n    if (_typeof(form) !== 'object' || Array.isArray(form) || form === null) {\n      throw new Error('Ошибка инициализации формы');\n    }\n    this._form = form;\n  });\n\n  var coreUiTable = {\n    /**\r\n     * Получение таблицы ядра\r\n     * @param formId\r\n     */\n    get: function get(formId) {\n      var form = CoreUI.form.get(formId);\n      if (!form) {\n        throw new Error('Не удалось найти форму с id' + formId);\n      }\n      return new coreUiFormInstance(form);\n    }\n  };\n\n  var Core$1 = {\n    _settings: {\n      lang: 'en'\n    },\n    main: coreMain,\n    auth: coreAuth,\n    menu: coreMenu,\n    tools: coreTools,\n    ui: {\n      table: coreUiTable$1,\n      form: coreUiTable\n    },\n    lang: {},\n    /**\n     * Перевод\n     * @param  {string} text\n     * @return {string}\n     */\n    _: function _(text) {\n      var lang = {};\n      if (this._settings.lang && this.lang.hasOwnProperty(this._settings.lang) && _typeof(this.lang[this._settings.lang]) === 'object' && this.lang[this._settings.lang] !== null) {\n        lang = this.lang[this._settings.lang];\n      }\n      return lang.hasOwnProperty(text) ? lang[text] : text;\n    },\n    /**\n     * Установка настроек\n     * @param {object} settings\n     */\n    setSettings: function setSettings(settings) {\n      this._settings = $.extend({}, this._settings, settings);\n    },\n    /**\n     * Получение значения настройки\n     * @param {string} name\n     */\n    getSetting: function getSetting(name) {\n      var value = null;\n      if (this._settings.hasOwnProperty(name)) {\n        value = this._settings[name];\n      }\n      return value;\n    }\n  };\n\n  Core$1.lang.en = {\n    'Вход': 'Login'\n  };\n\n  return Core$1;\n\n}));\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"],"names":["global","factory","exports","module","define","amd","globalThis","self","Core","this","_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","enumerable","configurable","writable","wrap","Generator","create","Context","h","f","Error","s","done","method","arg","delegate","maybeInvokeDelegate","return","TypeError","y","tryCatch","type","resultName","next","nextLoc","sent","_sent","dispatchException","abrupt","p","l","call","GeneratorFunction","GeneratorFunctionPrototype","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","callInvokeWithMethodAndArg","invoke","resolve","__await","then","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","catch","delegateYield","_typeof","asyncGeneratorStep","gen","reject","_next","_throw","key","info","error","_asyncToGenerator","fn","args","arguments","apply","err","undefined","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","input","hint","prim","toPrimitive","String","Number","res","_toPrimitive","_toPropertyKey","_createClass","protoProps","staticProps","_arrayLikeToArray","arr","len","arr2","Array","_createForOfIteratorHelper","allowArrayLike","it","isArray","minLen","toString","from","test","_unsupportedIterableToArray","F","normalCompletion","didErr","step","message","window","atob","bind","replace","fromCharCode","indexOf","header","JSON","parse","decodeURIComponent","charCodeAt","toUpperCase","split","extendStatics","b","__extends","__","__assign","assign","__awaiter","thisArg","_arguments","P","generator","fulfilled","rejected","result","__generator","body","_","label","trys","ops","verb","throw","op","__values","m","__spreadArrays","il","k","j","jl","version","wait","durationMs","resolveWith","setTimeout","awaitIfAsync","action","callback","returnedValue","forEachWithBreaks","items","loopReleaseInterval","lastLoopReleaseTime","now","_a","Date","x64Add","x64Multiply","x64Rotl","x64LeftShift","x64Xor","x64Fmix","toInt$1","parseInt","toFloat","parseFloat","replaceNaN","replacement","countTruthy","reduce","sum","round","base","Math","abs","counterBase","ensureErrorWithMessage","loadSources","sources","sourceOptions","excludeSources","includedSources","filter","sourceKey","excludes","haystack","needle","includes","sourceGetters","index","source","sourceLoadPromise","resolveLoad","loadStartTime","loadArgs","_i","loadResult","loadDuration","duration","resolveGet","getStartTime","getArgs","finalizeSource","components","includedSources_1","componentPromises","_loop_1","hasAllComponentPromises","component","all","isTrident","w","navigator","isChromium","vendor","isWebKit","isDesktopSafari","isAndroid","isItChromium","isItGecko","_b","document","documentElement","style","appVersion","makeInnerError","withIframe","initialHtml","domPollInterval","_c","iframe","_d","createElement","_resolve","_reject","isComplete","onload","onerror","checkReadyState","setProperty","position","top","left","visibility","srcdoc","src","appendChild","contentWindow","readyState","parentNode","removeChild","selectorToElement","selector","errorMessage","tagMatch","exec","tag","attributes","partsRegex","addAttribute","match","part","attributeMatch","parseSimpleCssSelector","element","name_1","join","priority","name_2","property","addStyleString","setAttribute","baseFonts","fontList","save","canvas","toDataURL","screenFrameBackup","screenFrameSizeTimeoutId","screenFrameCheckInterval","getScreenFrame","checkScreenFrame","_this","frameSize","getCurrentScreenFrame","isFrameSizeNull","fullscreenElement","msFullscreenElement","mozFullScreenElement","webkitFullscreenElement","exitFullscreen","msExitFullscreen","mozCancelFullScreen","webkitExitFullscreen","screen","availTop","width","availWidth","availLeft","height","availHeight","filters","abpIndo","abpvn","adBlockFinland","adBlockPersian","adBlockWarningRemoval","adGuardAnnoyances","adGuardBase","adGuardChinese","adGuardFrench","adGuardGerman","adGuardJapanese","adGuardMobile","adGuardRussian","adGuardSocial","adGuardSpanishPortuguese","adGuardTrackingProtection","adGuardTurkish","bulgarian","easyList","easyListChina","easyListCookie","easyListCzechSlovak","easyListDutch","easyListGermany","easyListItaly","easyListLithuania","estonian","fanboyAnnoyances","fanboyAntiFacebook","fanboyEnhancedTrackers","fanboySocial","frellwitSwedish","greekAdBlock","hungarian","iDontCareAboutCookies","icelandicAbp","latvian","listKr","listeAr","listeFr","officialPolish","ro","ruAd","thaiAds","webAnnoyancesUltralist","forceShow","doesMatch","matchMedia","matches","doesMatch$1","doesMatch$2","doesMatch$3","doesMatch$4","fallbackFn","M","presets","default","apple","font","serif","fontFamily","sans","mono","min","fontSize","system","fonts","holder","spansContainer","defaultWidth","defaultHeight","createSpan","span","textContent","createSpanWithFonts","fontToDetect","baseFont","baseFontsSpans","map","fontsSpans","spans","fontList_1","initializeFontsSpans","offsetWidth","offsetHeight","fontSpans","some","baseFontIndex","domBlockers","debug","filterNames","blockedSelectors","selectors","root","elements","offsetParent","getBlockedSelectors","concat","filterName","printDebug","console","log","activeBlockers","sort","fontPreferences","withNaturalFonts","container","sizes","text","whiteSpace","_e","_f","_g","_h","getBoundingClientRect","containerWidthPx","iframeWindow","iframeDocument","iframeBody","bodyStyle","linesOfText","webkitTextSizeAdjust","textSizeAdjust","zoom","devicePixelRatio","audio","AudioContext","OfflineAudioContext","webkitOfflineAudioContext","isWebKit606OrNewer","context","finalize","compressor","oscillator","createOscillator","frequency","createDynamicsCompressor","threshold","knee","ratio","attack","release","connect","destination","start","renderPromise","isFinalized","renderTryCount","startedRunningAt","startRunningTimeout","oncomplete","event","renderedBuffer","tryRender","startRendering","state","hidden","finishRendering","fingerprintPromise","buffer","getHash","signal","getChannelData","subarray","hash","screenFrame","screenFrameGetter","processSize","sideSize","osCpu","oscpu","languages","language","userLanguage","browserLanguage","systemLanguage","Intl","Reflect","colorDepth","deviceMemory","screenResolution","parseDimension","dimensions","hardwareConcurrency","timezone","DateTimeFormat","resolvedOptions","timeZone","currentYear","getFullYear","offset","max","getTimezoneOffset","sessionStorage","localStorage","indexedDB","openDatabase","cpuClass","platform","screenRatio","Element","webkitRequestFullscreen","isIPad","plugins","rawPlugins","plugin","mimeTypes","mimeType","suffixes","description","getContext","winding","rect","isPointInPath","geometry","globalCompositeOperation","color","x","fillStyle","beginPath","arc","PI","closePath","fill","makeGeometryImage","textBaseline","fillRect","printedText","fillText","touchSupport","touchEvent","maxTouchPoints","msMaxTouchPoints","createEvent","touchStart","vendorFlavors","flavors","cookiesEnabled","cookie","colorGamut","gamut","invertedColors","forcedColors","monochrome","contrast","reducedMotion","hdr","math","acos","acosh","asin","asinh","atanh","atan","sin","sinh","cos","cosh","tan","tanh","exp","expm1","log1p","acoshPf","sqrt","asinhPf","atanhPf","sinhPf","coshPf","tanhPf","expm1Pf","log1pPf","powPI","pow","getConfidence","openConfidenceScore","getOpenConfidenceScore","proConfidenceScore","score","comment","componentsToDebugString","stringify","_key","stack","hashComponents","x64hash128","componentKey","componentsToCanonicalString","seed","remainder","bytes","h1","h2","k1","k2","c1","c2","prepareForSources","delayFallback","deadlineTimeout","fallbackTimeout","Infinity","requestIdleCallback","timeout","makeAgent","getComponents","creationTime","get","options","startTime","confidence","visitorId","visitorIdCache","userAgent","_refreshToken","FingerprintJS","load","monitoring","__fpjs_d_m","random","request","XMLHttpRequest","open","send","coreTools","getParams","url","params","location","substring","section","query","parseQuery","vars","query_string","pair","toggleFullscreen","requestFullscreen","formatNumber","numb","formatMoney","divider","toFixed","clipboardText","clipboard","writeText","textArea","focus","select","successful","execCommand","hashCode","string","getTime","getFingerprint","fp","jwtDecode","token","coreTokens","_refreshInterval","initRefresh","deinitRefresh","setInterval","refreshToken","clearInterval","_callee","success","fail","tokenData","_context","getRefreshToken","clearRefreshToken","t0","$","t1","coreMain","basePath","t2","t3","t4","t5","refresh_token","t6","t7","dataType","contentType","data","ajax","response","access_token","setAccessToken","setRefreshToken","error_message","CoreUI","notice","danger","responseJSON","responseText","_x","_x2","accessToken","setItem","getAccessToken","dateExpired","expires","toUTCString","authToken","getItem","clearAccessToken","removeItem","tpl","commonjsGlobal","commonjsRequire","path","supportsCssVariables_","code","1","require","fs","utils","scopeOptionWarned","_VERSION_STRING","_OPTS_PASSABLE_WITH_DATA","_OPTS_PASSABLE_WITH_DATA_EXPRESS","_BOM","_JS_IDENTIFIER","resolvePaths","paths","filePath","resolveInclude","existsSync","handleCache","template","func","filename","hasTemplate","cache","fileLoader","compile","set","includeFile","opts","shallowCopy","createNullProtoObjWherePossible","includePath","views","includer","escapeFunction","getIncludePath","includerResult","rethrow","str","flnm","lineno","esc","lines","end","line","curr","stripSemi","Template","optsParam","hasOwnOnlyObject","templateText","mode","truncate","currentLine","client","escape","escapeXML","compileDebug","openDelimiter","closeDelimiter","delimiter","strict","rmWhitespace","outputFunctionName","localsName","destructuredLocals","legacyInclude","_with","regex","createRegex","readFileSync","promiseImpl","Function","isDir","dirname","extname","scope","warn","render","shallowCopyFromList","renderFile","cb","shift","settings","viewOpts","clearCache","modes","EVAL","ESCAPED","RAW","COMMENT","LITERAL","delim","escapeRegExpChars","close","RegExp","prepended","appended","escapeFn","sanitizedFilename","generateSource","destructuring","ctor","SyntaxError","returnedFn","includeData","basename","parseTemplateText","closing","scanLine","firstPos","pat","_addOutput","newLineCount","lastIndexOf","__express","VERSION","ejs","../package.json","./utils","2","hasOwn","obj","regExpChars","_ENCODE_HTML_RULES","&","<",">","\"","'","_MATCH_HTML","encode_char","escapeXMLToString","markup","to","list","_data","val","remove","hyphenToCamel","3","4","process","normalizeArray","parts","allowAboveRoot","up","last","splice","unshift","xs","resolvedPath","resolvedAbsolute","cwd","normalize","isAbsolute","trailingSlash","substr","relative","trim","fromParts","toParts","samePartsLength","outputParts","sep","hasRoot","matchedSlash","ext","startDot","startPart","preDotState","_process","5","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","clearTimeout","runTimeout","fun","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","run","marker","runClearTimeout","Item","array","noop","nextTick","title","browser","env","argv","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","chdir","dir","umask","6","keywords","author","license","bin","main","jsdelivr","unpkg","repository","bugs","homepage","dependencies","jake","devDependencies","browserify","eslint","git-directory-deploy","jsdoc","lru-cache","mocha","uglify-js","engines","node","scripts","MDCFoundation","init","destroy","adapter","MDCComponent","attachTo","initialize","getDefaultFoundation","initialSyncWithDOM","foundation","listen","evtType","handler","addEventListener","unlisten","removeEventListener","evtData","shouldBubble","evt","CustomEvent","bubbles","detail","initCustomEvent","dispatchEvent","pack","ar","__spreadArray","__read","applyPassive","globalObj","passiveSupported","passive","supportsPassiveOption","_super","cssClasses$1","BG_FOCUSED","FG_ACTIVATION","FG_DEACTIVATION","ROOT","UNBOUNDED","strings$1","VAR_FG_SCALE","VAR_FG_SIZE","VAR_FG_TRANSLATE_END","VAR_FG_TRANSLATE_START","VAR_LEFT","VAR_TOP","numbers","DEACTIVATION_TIMEOUT_MS","FG_DEACTIVATION_MS","INITIAL_ORIGIN_SCALE","PADDING","TAP_DELAY_MS","ACTIVATION_EVENT_TYPES","POINTER_DEACTIVATION_EVENT_TYPES","activatedTargets","MDCRippleFoundation","addClass","browserSupportsCssVars","computeBoundingRect","right","bottom","containsEventTarget","deregisterDocumentInteractionHandler","deregisterInteractionHandler","deregisterResizeHandler","getWindowPageOffset","isSurfaceActive","isSurfaceDisabled","isUnbounded","registerDocumentInteractionHandler","registerInteractionHandler","registerResizeHandler","removeClass","updateCssVariable","ROOT_1","UNBOUNDED_1","supportsPressRipple","registerRootHandlers","cssClasses","requestAnimationFrame","layoutInternal","ROOT_2","UNBOUNDED_2","activationTimer","fgDeactivationRemovalTimer","removeCssVars","deregisterRootHandlers","deregisterDeactivationHandlers","activate","activateImpl","deactivate","deactivateImpl","layout","layoutFrame","cancelAnimationFrame","setUnbounded","unbounded","handleFocus","handleBlur","defaultActivationState","activationEvent","hasDeactivationUXRun","isActivated","isProgrammatic","wasActivatedByPointer","wasElementMadeActive","e_1","ACTIVATION_EVENT_TYPES_1","ACTIVATION_EVENT_TYPES_1_1","activateHandler","e_1_1","resizeHandler","focusHandler","blurHandler","registerDeactivationHandlers","e_2","deactivateHandler","POINTER_DEACTIVATION_EVENT_TYPES_1","POINTER_DEACTIVATION_EVENT_TYPES_1_1","e_2_1","e_3","ACTIVATION_EVENT_TYPES_2","ACTIVATION_EVENT_TYPES_2_1","e_3_1","e_4","POINTER_DEACTIVATION_EVENT_TYPES_2","POINTER_DEACTIVATION_EVENT_TYPES_2_1","e_4_1","rippleStrings","strings","activationState","previousActivationEvent","resetActivationState","checkElementMadeActive","animateActivation","keyCode","startPoint","endPoint","translateStart","translateEnd","getFgTranslationCoordinates","rmBoundedActivationClasses","activationTimerCallback","pageOffset","clientRect","normalizedX","documentX","documentY","normalizedY","changedTouches","pageX","pageY","getNormalizedEventCoords","frame","initialSize","runDeactivationUXLogicIfReady","activationAnimationHasEnded","animateDeactivation","maxDim","maxRadius","floor","fgScale","updateLayoutCssVars","unboundedCoords","defaultAdapter","MDCRipple","ripple","createAdapter","className","classList","add","supportsCssVariables","windowObj","forceRefresh","CSS","supports","explicitlySupportsCssVars","weAreFeatureDetectingSafari10plus","supportsCssVars","contains","pageXOffset","pageYOffset","webkitMatchesSelector","msMatchesSelector","Boolean","disabled","varName","dataset","cssPropertyNameMap","animation","prefixed","standard","transform","transition","getCorrectPropertyName","cssProperty","el","CLOSED_CLASS","CLOSED_ANIMATION_OFF_CLASS","INDETERMINATE_CLASS","REVERSED_CLASS","ANIMATION_READY_CLASS","ARIA_HIDDEN","ARIA_VALUEMAX","ARIA_VALUEMIN","ARIA_VALUENOW","BUFFER_BAR_SELECTOR","FLEX_BASIS","PRIMARY_BAR_SELECTOR","animationDimensionPercentages","MDCLinearProgressFoundation","attachResizeObserver","forceLayout","getWidth","hasClass","setBufferBarStyle","setPrimaryBarStyle","setStyle","removeAttribute","determinate","progress","observer","entries","entries_1","entries_1_1","entry","contentRect","calculateAndSetDimensions","setDeterminate","isDeterminate","setPrimaryBarProgress","setBufferBarProgress","setProgress","getProgress","setBuffer","getBuffer","isClosed","handleTransitionEnd","disconnect","restartAnimation","progressValue","transformProp","primaryHalf","primaryFull","secondaryQuarter","secondaryHalf","secondaryFull","MDCLinearProgress","styleProperty","bufferBar","querySelector","primaryBar","attributeName","RO","ResizeObserver","observe","inherits$1","inherits_browser","util","inherits","hasRequiredInherits_browser","superCtor","super_","TempCtor","murmurhash3_gcExports","h1b","undefined$1","parser","EMPTY","FUNC_TYPE","UNDEF_TYPE","OBJ_TYPE","STR_TYPE","MODEL","NAME","TYPE","VENDOR","ARCHITECTURE","MOBILE","TABLET","SMARTTV","BLACKBERRY","CHROME","FIREFOX","MICROSOFT","SONY","XIAOMI","CHROMIUM_OS","lowerize","windowsVersionMap","regexes","inheritsExports","client_base","implementation","uaParser","enumerize","enums","has","str1","str2","rgxMapper","ua","arrays","q","strMapper","UAParser","extensions","getResult","_navigator","_ua","_uach","userAgentData","_rgxmap","mergedRegexes","extend","_isSelfNav","getBrowser","_browser","brave","isBrave","getCPU","_cpu","cpu","getDevice","_device","device","mobile","standalone","getEngine","_engine","engine","getOS","_os","os","getUA","setUA","OPERA","BROWSER","SUFFIX_BROWSER","SAMSUNG","FACEBOOK","1.0","1.2","1.3","2.0","2.0.2","2.0.3","2.0.4","?","toLowerCase","APPLE","MOTOROLA","GOOGLE","AMAZON","tablet","*","ZEBRA","CONSOLE","WEARABLE","EMBEDDED","EDGE","ME","NT 3.11","NT 4.0","2000","XP","Vista","7","8","8.1","10","RT","CPU","DEVICE","ENGINE","OS","jQuery","Zepto","prop","ClientJS$1","browserData","fontDetective","Detector","globalThis$1","murmurhash3_32_gc","getElementsByTagName","innerHTML","detect","detected","matched","version_regex_base","getSoftwareVersion","getBrowserData","bar","screenPrint","getScreenPrint","pluginList","getPlugins","getFonts","isLocalStorage","isSessionStorage","getTimeZone","getLanguage","getSystemLanguage","cookies","isCookie","canvasPrint","getCanvasPrint","getCustomFingerprint","getUserAgent","getUserAgentLowerCase","getBrowserVersion","getBrowserMajorVersion","major","isIE","isChrome","isFirefox","isSafari","isMobileSafari","isOpera","getEngineVersion","getOSVersion","isWindows","isMac","isLinux","isUbuntu","isSolaris","model","getDeviceType","getDeviceVendor","architecture","isMobile","dataString","opera","isMobileMajor","isMobileAndroid","isMobileBlackBerry","isMobileIOS","isMobileOpera","isMobileWindows","isIphone","isIpad","isIpod","getCurrentResolution","getAvailableResolution","getColorDepth","getDeviceXDPI","getDeviceYDPI","deviceXDPI","deviceYDPI","pluginsList","isJava","javaEnabled","getJavaVersion","isFlash","getFlashVersion","isSilverlight","getSilverlightVersion","isMimeTypes","getMimeTypes","mimeTypeList","isFont","fontArray","fontString","cookieEnabled","rightNow","myNumber","isCanvas","elem","ctx","txt","ClientJS","version_regex_strict","version_regex_with_family_modifier","hattrs","core","applet","applet_valid_attrs","deployJava$1","alert","doVersionCheck","versionPattern","noplugin","matchData","msg","familyMatch","minMatch","patternArray","getJREs","compareVersionToPattern","getAbsoluteUrl","jnlp","pos","protocols","startsWith","isAbsoluteUrl","href","launchWithJnlpProtocol","isNoPluginWebBrowser","browserName2","constructGetJavaURL","getJavaURL","enableWithoutCertMisMatchWorkaround","requestedJREVersion","browserName","getPlugin","z","versionCheckEx","searchString","firefoxJavaVersion","useStaticMimeType","myInterval","preInstallJREList","brand","locale","installType","EAInstallEnabled","EarlyAccessURL","oldMimeType","launchButtonPNG","imageUrl","protocol","getWebStartLaunchIconURL","isPluginInstalled","VMs","jvms","getLength","testUsingActiveX","testForMSVM","getJPIVersionUsingMimeType","testUsingMimeTypes","testUsingPluginsArray","installJRE","requestVersion","versionCheck","installLatestJRE","isAutoInstallEnabled","isCallbackSupported","IEInstall","FFInstall","runApplet","parameters","minimumVersion","readyStateCheck","divTag","id","writeAppletTag","attribute","startApplet","addCodeAttribute","attr","arHas","isValidAppletAttr","parameter","codebaseParam","write","isWebStartInstalled","compareVersions","launchWebStartApplication","launchTag","jnlpDocbase","documentURI","URL","encodeURIComponent","margin","createWebStartLaunchButtonEx","createWebStartLaunchButton","launch","launchEx","isAutoUpdateEnabled","setAutoUpdateEnabled","setInstallerType","_type","setAdditionalPackages","_packageList","setEarlyAccess","enabled","isPlugin2","allowPlugin","refresh","ret","getElementById","resultTemp","patternArrayTemp","ActiveXObject","objectName","exception","oClientCaps","getComponentVersion","search","_name","_result","installed","required","enableAlerts","poll","postInstallJREList","writePluginTag","writeEmbedTag","written","enabledPlugin","loc","storedFbContent","storedFbContentId","storedCallbackFn","storedCallbackObj","dynamicStylesheet","dynamicStylesheetMedia","deployJava","UNDEF","OBJECT","SHOCKWAVE_FLASH","FLASH_MIME_TYPE","EXPRESS_INSTALL_ID","ON_READY_STATE_CHANGE","win","doc","nav","domLoadFnArr","regObjArr","objIdArr","listenersArr","isDomLoaded","isExpressInstallActive","autoHideShow","encodeURIEnabled","w3cdom","windows","mac","webkit","ie","appName","playerVersion","toInt","GetVariable","w3","pv","wk","callDomLoadFunctions","display","dl","addDomLoadEvent","matchVersions","rl","callbackFn","cbObj","hasPlayerVersion","swfVersion","expressInstall","canExpressInstall","att","par","getAttribute","styleclass","align","pl","showExpressInstall","displayFbContent","insertBefore","replaceChild","abstractFbContent","removeSWF","setVisibility","ref","getObjectById","SetVariable","objectIdStr","nodeName","replaceElemIdStr","getId","pt","fv","flashvars","newObj","createSWF","ac","nestedObj","childNodes","cl","nodeType","cloneNode","attObj","parObj","paramStr","div","pName","pValue","attrLower","param","firstChild","removeSWFInIE","isElement","thing","rv","createCSS","sel","decl","media","newStyle","styleSheets","addRule","createTextNode","isVisible","urlEncodeIfNecessary","attachEvent","detach","detachEvent","checkDomLoadedIE","doScroll","checkDomLoadedWK","counter","checkGetVariable","ll","swfobject$1","objPlayerVersion","swfobject","getFlashPlayerVersion","minor","registerObject","swfVersionStr","xiSwfUrlStr","regObj","embedSWF","swfUrlStr","widthStr","heightStr","flashvarsObj","callbackObj","switchOffAutoHideShow","enableUriEncoding","bool","hasFlashPlayerVersion","objElemIdStr","selStr","declStr","mediaStr","newStyleBoolean","addLoadEvent","fnOld","eventType","getQueryParamValue","pairs","expressInstallCallback","ClientJSFull","ClientJS_1","coreMenu","_user","_system","_modules","_events","getPageContent","_onError","css","conf","theme","_setTheme","preloader","show","_step","_iterator","querySelectorAll","button","_initInstall","html","ajaxSend","jqxhr","setRequestHeader","user","login","avatar","modules","_renderMenu","_initComponents","hide","uri","status","viewPage","reload","textStatus","jqXHR","_setActiveModule","getResponseHeader","contents","responseObj","renderContents","_buffer","_renderContent","each","contentItem","mainContainer","empty","content","append","opacity","margin-top","animate","marginTop","specialEasing","_trigger","loader","loaderElement","prepend","fadeOut","eventName","singleExec","isObject","initEvents","is_visible_index","sections","hover","level2","_step2","_iterator2","menuItem","ctrlKey","_drawerToggle","_step3","_iterator3","parent","toggleClass","preventDefault","warning","buttons","click","coreAuth","logout","_step4","_iterator4","_button","_initSwipe","direction","table","setSettings","lang","form","moduleName","sectionName","titles","xDown","touches","clientX","yDown","clientY","xDiff","yDiff","xUp","yUp","menu","install","platforms","prompt","userChoice","choiceResult","outcome","promise","styles","bg_color","text_color","coreTheme","col","current","available","time","toTimeString","zone","zone_name","headers","Access-Token","host","activePage","_hashChangeCallbacks","pageName","pageContent","$otherPages","fadeIn","hashChange","_onLoad","viewActualContainer","onhashchange","safeAdd","let","lsw","md5cmn","num","cnt","bitRotateLeft","md5ff","md5gg","md5hh","md5ii","firstChunk","chunks","secondChunk","thirdChunk","fourthChunk","binlMD5","commands","newChunks","chunk","binl2rstr","output","rstr2binl","cc","resp","rstrMD5","strHMACMD5","bkey","ipad","opad","rstr2hex","hexTab","str2rstrUTF8","unicodeString","rawMD5","rawHMACMD5","_login","MD5","raw","that","registration","logo","_setLogo","loadConfig","authPanel","_viewContainer","$btn","find","removeAttr","checkValidity","password","serialize","registrationComplete","pass1","pass2","bg_video","bg_img","coreUiTableInstance","_table","callbackSuccess","recordsId","getSelectedRecordsId","Core$1","defalt","checked","questionY","questionN","isChecked","is","question","isAccept","onHide","coreUiTable$1","tableId","coreUiFormInstance","_form","_settings","auth","tools","ui","formId","getSetting","en","Вход"],"mappings":"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"}